# MARS 4.1 CREATE SQL FILE
# (C) 2018 Juraj Brabec, DXC.technology
# DON`T MODIFY ANYTHING BELOW THIS LINE______________________________________________________________________________

USE `mars30`;

DROP TABLE IF EXISTS config_cellservers;
CREATE TABLE config_cellservers (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(64) NOT NULL DEFAULT 'Default Cell Server',
  host varchar(64) DEFAULT NULL,
  timezone VARCHAR(64) NULL DEFAULT NULL,
  os varchar(64) DEFAULT NULL,
  php varchar(64) DEFAULT NULL,
  dp varchar(64) DEFAULT NULL,
  `localtime` TIMESTAMP NULL DEFAULT NULL,
  maintenance tinyint(3) unsigned NOT NULL DEFAULT '0',
  active varchar(64) DEFAULT NULL,
  down varchar(64) DEFAULT NULL,
  mmd_local tinyint(3) unsigned NOT NULL DEFAULT '1',
  clients smallint(5) unsigned NOT NULL DEFAULT '0',
  specifications smallint(5) unsigned NOT NULL DEFAULT '0',
  sessions_24h int(10) unsigned NOT NULL DEFAULT '0',
  bsr_sessions_24h int(10) unsigned NOT NULL DEFAULT '0',
  bsr_24h decimal(4,1) unsigned DEFAULT '0.0',
  sessions_1m int(10) unsigned NOT NULL DEFAULT '0',
  bsr_sessions_1m int(10) unsigned NOT NULL DEFAULT '0',
  bsr_1m decimal(4,1) unsigned DEFAULT '0.0',
  errors_24h int(10) unsigned NOT NULL DEFAULT '0',
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name (name)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='List of Cell Servers';

# INSERT INTO config_cellservers (id,name,valid_since,updated_on) VALUES (1,'Default Cell Server','2012-12-31 23:00:00','2012-12-31 23:00:00');

DROP TABLE IF EXISTS config_customers;
CREATE TABLE config_customers (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(32) NOT NULL DEFAULT 'Default Customer',
  specification varchar(32) NOT NULL DEFAULT '_default_',
  fqdn varchar(32) NOT NULL DEFAULT '.default.',
  clients int(10) unsigned NOT NULL DEFAULT '0',
  specifications int(10) unsigned NOT NULL DEFAULT '0',
  sessions_24h int(10) unsigned NOT NULL DEFAULT '0',
  bsr_sessions_24h int(10) unsigned NOT NULL DEFAULT '0',
  bsr_24h decimal(4,1) unsigned DEFAULT '0.0',
  gbwritten_24h decimal(10,2) unsigned NOT NULL DEFAULT '0.00',
  sessions_1m int(10) unsigned NOT NULL DEFAULT '0',
  bsr_sessions_1m int(10) unsigned NOT NULL DEFAULT '0',
  bsr_1m decimal(4,1) unsigned DEFAULT '0.0',
  tbwritten_1m decimal(10,2) unsigned NOT NULL DEFAULT '0.00',
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name (name),
  UNIQUE KEY fqdn (fqdn),
  UNIQUE KEY specification (specification)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='List of customers';

# INSERT INTO config_customers (id,name,specification,fqdn,valid_since,updated_on) VALUES (1,'Default Customer','_default_','.default.','2012-12-31 23:00:00','2012-12-31 23:00:00');

DROP TABLE IF EXISTS config_mediaservers;
CREATE TABLE config_mediaservers (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(64) NOT NULL DEFAULT 'Default Media Server',
  cellserver varchar(64) NOT NULL DEFAULT 'Default Cell Server',
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name (name),
  KEY cellserver (cellserver)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='List of Media Servers';

# INSERT INTO config_mediaservers (id,name,cellserver,valid_since,updated_on) VALUES (1,'Default Media Server','Default Cell Server','2012-12-31 23:00:00','2012-12-31 23:00:00');

DROP TABLE IF EXISTS config_reports;
CREATE TABLE config_reports (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  sort int(3) unsigned NOT NULL DEFAULT '0',
  name varchar(32) NOT NULL,
  submenu varchar(16) DEFAULT NULL,
  title varchar(32) NOT NULL,
  description varchar(64) DEFAULT NULL,
  `sql` text,
  pivot text,
  timeperiod tinyint(4) unsigned NOT NULL DEFAULT '0',
  customer tinyint(4) unsigned NOT NULL DEFAULT '0',
  fields text,
  styles text,
  datapage_limit tinyint(3) unsigned NOT NULL DEFAULT '25',
  PRIMARY KEY (id),
  UNIQUE KEY name (name),
  KEY submenu (submenu)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='List of Reports';

INSERT INTO `config_reports` (`id`, `sort`, `name`, `submenu`, `title`, `description`, `sql`, `pivot`, `timeperiod`, `customer`, `fields`, `styles`, `datapage_limit`) VALUES
	(1, 100, 'cs1', 'Cell Servers', 'Actual status', 'List of Cell Servers with actual status', 'select * from _cellservers', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nname		Cell Server\r\nos		OS\r\ntimezone		Time Zone\r\nhost		Host name\r\nphp		PHP\r\ndp		DP version\r\nmaintenance\r\nprocesses_active	Active\r\nprocesses_down	Down\r\nmmd_local\r\nlocaltime		Time &#916\r\nlast_updated	Ago\r\nqueue		Q		q			name == \'%name\'						cellserver == \'%name\'				Show command queue for \'%name\'\r\nrunning_sessions	Ses.		rs			name == \'%name\'						cellserver == \'%name\'				Show running sessions for \'%name\'\r\nlocked_objects	Obj.		lo			name == \'%name\'						host == \'%name\'					Show locked objects for \'%name\'\r\nerrors_24h	Err.24h		l			name == \'%name\'						cellserver == \'%name\' || severity == \'Error\' || timestamp > -24 hour		Show logged errors for \'%name\r\nclients\r\nfsclients\r\nbarclients\r\nobjects\r\nfsobjects\r\nbarobjects\r\nspecifications\r\nsessions_24h\r\nbsr_sessions_24h\r\nbsr_24h\r\nsessions_1m\r\nbsr_sessions_1m\r\nbsr_1m\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			maintenance == 0		background:palegreen;			Normal operation\r\n*			mmd_local == 1		font-weight:bold;				MoM/Standalone\r\n*			processes_down >= \' \'	background:salmon;			Process down\r\n*			sessions_24h == 0		color:black;				No sessions\r\n*			sessions_24h > 0		color:green;				Running sessions\r\n*			maintenance == 1		background:silver;color:gray;			Maintenance\r\n*			host REGEXP \'::\'		background:lawngreen;			Executing scheduler\r\nphp			php REGEXP \'^5\\.(1|2)\'	color:brown;				PHP version below 5.3\r\n', 25),
	(2, 110, 'cs2', 'Cell Servers', 'Config/Results', 'List of Cell Servers with configuration, performance and results', 'select * from _cellservers', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nname		Cell Server\r\nos\r\nhost\r\nphp\r\ndp\r\nmaintenance\r\nprocesses_active\r\nprocesses_down\r\nmmd_local\r\nlast_updated\r\nqueue\r\nrunning_sessions\r\nlocked_objects\r\nclients		Clients		h			name == \'%name\'						cellserver == \'%name\'					Show clients for \'%name\'\r\nfsclients		FS clients		h			name == \'%name\'						cellserver == \'%name\' || type <> \'BAR\'				Show FS clients for \'%name\'\r\nbarclients		Integ clients	h			name == \'%name\'						cellserver == \'%name\' || type == \'BAR\'				Show Integ clients for \'%name\'\r\nobjects		Objects		o			name == \'%name\'						cellserver == \'%name\'					Show objects for \'%name\'\r\nfsobjects		FS objects	o			name == \'%name\'						cellserver == \'%name\' || type <> \'BAR\'				Show FS objects for \'%name\'\r\nbarobjects	Integ objects	o			name == \'%name\'						cellserver == \'%name\' || type == \'BAR\'				Show Integ objects for \'%name\'\r\nspecifications	Specifications	s1			name == \'%name\'						cellserver == \'%name\'					Show specifications for \'%name\'\r\nsessions_24h	Sessions 24h	s			name == \'%name\'						cellserver == \'%name\' || starttime >= -24 HOUR			Show sessions for \'%name\'\r\nbsr_sessions_24h	BSR ses. 24h	sb			name == \'%name\'						cellserver == \'%name\' || starttime >= -24 HOUR			Show sessions for \'%name\'\r\nbsr_24h		BSR % 24h	sb			name == \'%name\'						cellserver == \'%name\' || bsr < 100 || starttime >= -24 HOUR	Show failed sessions for \'%name\'\r\nsessions_1m	Sessions LM	\r\nbsr_sessions_1m	BSR ses. LM	\r\nbsr_1m		BSR % LM\r\nerrors_24h\r\n', '#field(s)_affected				#condition		#CSS					#description\r\n#---------------------				#---------------------		#------------------------------------------------	#------------------------------------------\r\n*					mmd_local == 0		background:palegreen;color:green;		Slave\r\n*					mmd_local == 1		background:palegreen;color:green;font-weight:bold;	MoM/Standalone\r\nsessions_24h,bsr_sessions_24h,bsr_24h	bsr_24h >= 0		color:red;background:salmon;		less than 75%\r\nsessions_24h,bsr_sessions_24h,bsr_24h	bsr_24h >= 75		color:red;background:lightpink;		75%\r\nsessions_24h,bsr_sessions_24h,bsr_24h	bsr_24h >= 90		color:salmon;background:gold;		90%\r\nsessions_24h,bsr_sessions_24h,bsr_24h	bsr_24h >= 95		color:green;background:lawngreen;		95%\r\nsessions_24h,bsr_sessions_24h,bsr_24h	bsr_24h >= 98		color:green;background:palegreen;		98%\r\nsessions_1m,bsr_sessions_1m,bsr_1m		bsr_1m >= 0		color:red;background:salmon;		less than 75%\r\nsessions_1m,bsr_sessions_1m,bsr_1m		bsr_1m >= 75		color:red;background:lightpink;		75%\r\nsessions_1m,bsr_sessions_1m,bsr_1m		bsr_1m >= 90		color:salmon;background:gold;		90%\r\nsessions_1m,bsr_sessions_1m,bsr_1m		bsr_1m >= 95		color:green;background:lawngreen;		95%\r\nsessions_1m,bsr_sessions_1m,bsr_1m		bsr_1m >= 98		color:green;background:palegreen;		98%\r\n', 25),
	(3, 150, 'q', 'Cell Servers', 'Queue', 'List of actions queue', 'select * from _queue', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server\r\ntimestamp	Timestamp\r\nname		Task\r\ndata		Value\r\nvalid_from\r\nvalid_until\r\nexecuted_on	Started', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			name REGEXP \'session\'	background:greenyellow;color:green;		Action\r\n*			name == \'ROUTINE\'	background:palegreen;color:green;		Routine\r\n*			cellserver == \'localhost	background:lightblue;color:blue;		DB server\r\n*			executed_on > \'\'		font-weight:bold;				Executing', 25),
	(4, 120, 'rs', 'Cell Servers', 'Running sessions', 'List of running sessions', 'select * from _omnistat', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	rs			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show running sessions for \'%cellserver\'\r\nsessionid		SessionID\r\ntype		Type		rs			type == \'%type\'						type == \'%type\'					Show running \'%type\' sessions\r\nstatus		Status\r\nsessionowner	\r\nstarttime		Start Time\r\nduration		Duration\r\nlast		Last run\r\ncurrent		Run %\r\nspecification	Specification	s1			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || name == \'%specification\'	Show specification \'%specification\'\r\ndevices		Devices		rsd			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show devices for \'%sessionid\'\r\nactive_devices	Active\r\nad_delta		&#916;\r\ngbdone		Written (GB)\r\ndone_delta	&#916;\r\nobjects		Objects		rso			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show objects for \'%sessionid\'\r\nactive_objects	Active\r\nao_delta		&#916;\r\ngbtotal		Size (GB)\r\ngbprocessed	Done (GB)\r\nps_delta		&#916;\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			type == \'Backup\'		background:lightgreen;color:green;		Backup\r\n*			type == \'Copy\'		background:lightblue;color:blue;		Copy\r\n*			type == \'Restore\'		background:lemonchiffon;color:brown;		Restore\r\n*			type == \'Media\'		background:silver;color:black;		Media\r\n*			status == \'Aborted\'		color:red;					Aborted\r\n*			status == \'Queuing\'	color:brown;background:orange;		Queuing\r\n*			status REGEXP \'Error\'	color:red;					Error\r\n*			status REGEXP \'Failure\'	color:brown;				Failure\r\n*			status REGEXP \'Completed\'	font-weight:bold;				Completed\r\n*			type REGEXP \'Preview\'	background:gray;color:black;			Preview\r\n', 25),
	(5, 130, 'lo', 'Cell Servers', 'Locked objects', 'List of locked objects', 'select * from _locked_objects', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nhost		Cell Server	lo			host == \'%host\'						host == \'%host\'					Show locked objects for \'%host\'\r\npid		\r\ntype		Type		lo			type == \'%type\'						type == \'%type\'					Show only locked \'%type\'\'\r\nname		Name		lo			host == \'%host\' || name == \'%name\'				host == \'%host\' || name REGEXP \'%name\'		Show running devices \'%name\' for \'%host\'\r\nlabel		Label\r\nlocation		Location\r\n\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			type == \'Cartridge\'		color:black;				Cartridge\r\n*			type == \'Device\'		color:green;				Device\r\n*			type == \'Medium\'		color:blue;				Medium\r\n', 25),
	(6, 300, 's1', 'Specifications', 'Specifications', 'List of specifications', 'select * from _specifications', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	s1			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only specifications for \'%cellserver\'\r\nname		Specification	s2			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || name == \'%name\'			Show specification details for \'%cellserver\' and \'%name\'\r\ndpgroup		Group		s1			dpgroup == \'%dpgroup\'					dpgroup == \'%dpgroup\'					Show only specifications for  group \'%dpgroup\'\r\ncustomer		Customer		s1			customer == \'%customer\'					customer == \'%customer\'					Show only specifications for  \'%customer\'\r\nretention		Retention		s1			retention == \'%retention\'					retention == \'%retention\'					Show only \'%retention\' specifications\r\ntype		Type		s1			type == \'%type\'						type == \'%type\'						Show only \'%type\' specifications\r\nprotection	Protection\r\nspecification\r\nschedule\r\nhosts		\r\nhostnames	Host Names	s1			hostnames == \'%hostnames\'					hostnames REGEXP \'%hostnames\'				Show only specifications for \'%hostnames\'\r\nnextexecution	Next Execution\r\nperiodicity	\r\nlastsessionid	Last Session	s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || sessionid == \'%lastsessionid\'		Show last session for \'%cellserver\' and \'%name\'\r\nlastsuccessfulsessionid	Last Successful	s		cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || sessionid == \'%lastsuccessfulsessionid\'	Show last successful session for \'%cellserver\' and \'%name\'\r\nduration		Duration\r\ngbwritten		Written (GB)\r\nfailure		Failure+		s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || specification == \'%name\'		Show sessions for \'%cellserver\' and \'%name\'\r\nsuccess		Success+		s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || specification == \'%name\'		Show sessions for \'%cellserver\' and \'%name\'\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			customer == \'\'		color:red;					No customer\r\n*			nextexecution == \'\'		background:lightpink;			No next schedule\r\n*			lastsessionid == \'\'		background:red;color:white;			No last session\r\n*			success > 0		color:green;background:lightgreen;		Successful\r\n*			failure > 0		color:green;background:lawngreen;		Failing\r\n*			failure > 1		color:green;background:greenyellow;		Failing 2x\r\n*			failure > 2		color:salmon;background:gold;		Failing 3x\r\n*			failure > 5		color:red;background:salmon;		Failing 5x\r\n', 25),
	(7, 140, 'l', 'Cell Servers', 'Log', 'List of log entries', 'select * from _log', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server\r\ntimestamp	Timestamp\r\npid		PID\r\nduration		Duration\r\nseverity		Severity\r\nmessage		Message\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			severity == \'Error\'		background:lightpink;			Error\r\n*			severity == \'Warning\'	background:gold;				Warning\r\n*			severity == \'Action\'		background:lightgreen;			Action\r\n*			duration > 0		color:green;				Normal\r\n*			duration > 120		color:brown;				2 minutes\r\n*			duration > 300		color:red;					5 minutes\r\n*			cellserver == \'localhost\'	color:blue;background:lightblue;		DB server\r\n', 25),
	(8, 121, 'rsd', 'Cell Servers', 'Running sessions - devices', 'List of running session\'s devices', 'select * from _omnistat_devices', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	rsd			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show running session\'s devices for \'%cellserver\'\r\nsessionid		SessionID		rsd			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show running session\'s devices for \'%sessionid\'\r\nname		Device Name\r\nlockname		Lock Name\r\nlibrary		Library		rsd			cellserver == \'%cellserver\' || library == \'%library\'		cellserver == \'%cellserver\' || library == \'%library\'	Show running session\'s devices for library \'%library\'\r\nhost		Host Name\r\nstarted		Start Time\r\nfinished		End Time\r\ngbdone		Written (GB)	rs			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show running session \'%sessionid\'\r\nphysical_device	Device Address\r\nstatus		Status\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			status REGEXP \'Inactive\'		color:gray;			Inactive\r\n*			status REGEXP \'Failure\'		color:green;background:lightgreen;	Failure\r\n*			status REGEXP \'Abort\'		color:red;background:lightpink;	Abort\r\n*			status REGEXP \'Reading\'		color:blue;background:lightblue;	Reading\r\n*			status REGEXP \'Writing\'		color:green;background:lawngreen;	Writing\r\n*			status REGEXP \'Running\'		color:green;background:palegreen;	Running\r\n*			status REGEXP \'Finished\'		color:green;background:lightgreen;	Finished\r\n', 25),
	(9, 122, 'rso', 'Cell Servers', 'Running sessions - objects', 'List of running session\'s objects', 'select * from _omnistat_objects', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	rso			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show running session\'s objects for \'%cellserver\'\r\nsessionid		SessionID		rso			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show running session\'s objects for \'%sessionid\'\r\nname		Object Name\r\ntype		Type\r\nstarted		Start Time\r\nfinished		End Time\r\nwarnings		Warnings\r\nerrors		Errors\r\ntotal_files		Files\r\nprocessed_files	Done\r\ngbprocessed_size	Done (GB)	rs			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show running session \'%sessionid\'\r\ndevice		Device Name\r\nstatus		Status\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			status REGEXP \'Inactive\'		color:gray;			Inactive\r\n*			status REGEXP \'Fail\'			color:red;background:lightpink;	Failed\r\n*			status REGEXP \'Abort\'		color:white;background:red;		Aborted\r\n*			status REGEXP \'Pending\'		color:green;			Pending\r\n*			status REGEXP \'Running\'		color:green;background:lawngreen;	Running\r\n*			status REGEXP \'Completed\'		color:green;background:lightgreen;	Completed\r\n', 25),
	(10, 310, 's2', 'Specifications', 'Specification details', 'LIst of specifications with details', 'select * from _specifications', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	s2			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show specifications for \'%cellserver\'\r\nname		Specification	s			cellserver == \'%cellserver\' || name ==\'%name\'			cellserver == \'%cellserver\' || specification == \'%name\'	Show sessions for \'%cellserver\' and \'%name\'\r\ndpgroup		Group		s2			dpgroup == \'%dpgroup\'					dpgroup == \'%dpgroup\'				Show specifications for group \'%dpgroup\'\r\ncustomer		Customer		s2			cellserver == \'%cellserver\' || 	customer ==\'%customer\'		cellserver == \'%cellserver\' || customer == \'%customer\'	Show specifications for \'%cellserver\' and \'%customer\'\r\nretention		Retention\r\nprotection	Protection\r\nspecification	Datalist/Barlist\r\nschedule		Schedule\r\nhosts		Hosts\r\nhostnames	Host Names	s2			cellserver == \'%cellserver\' || hostnames ==\'%customer\'		cellserver == \'%cellserver\' || hostnames REGEXP \'%hostnames\'	Show specifications for \'%cellserver\' and \'%hostnames\'\r\nnextexecution	Next Execution\r\nperiodicity	Periodicity\r\nlastsessionid	\r\nlastsuccessfulsessionid	\r\nduration\r\ngbwritten\r\nfailure		\r\nsuccess		\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			customer > \' \'		color:green;background:lightgreen;		Normal\r\n*			customer == \' \'		color:red;					No customer\r\n*			nextexecution == \' \'	background:lightpink;			No next schedule\r\n*			schedule REGEXP \'disabled\'	background:silver;				Disabled\r\n', 10),
	(11, 400, 'sa', 'Sessions', 'Sessions', 'List of sessions', 'select * from _sessions_all', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	sa			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only sessions for \'%cellserver\'\r\nsessionid		SessionID		sb			cellserver == \'%cellserver\' || restartof == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show aggregated \'%sessionid\' session\r\nsar		SAR		sa			sar == \'%sar\'						sar == \'%sar\'					Show only \'%sar\' sessions\r\nrestartof		Restart of\r\nspecification	Specification\r\ncustomer		Customer\r\nretention		Retention\r\ntype		Type\r\nbsr		BSR\r\nperiodicity\r\nsessionowner	Session Owner\r\nstatus		Status\r\nmode		Mode\r\nstarttime		Start Time\r\nendtime		End Time\r\nqueuing		Queuing\r\nduration		Duration\r\ngbwritten		Written (GB)	sd			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show devices for \'%sessionid\' session\r\nmedia		Media		sm			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show media for \'%sessionid\' session\r\nerrors		Errors\r\nwarnings		Warnings\r\npendingda	PO\r\nrunningda	RO\r\nfailedda		FO\r\ncompletedda	CO\r\nobjects		Objects		so			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show objects for \'%sessionid\' session\r\nsuccess\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			sar == \'S\'			font-weight:normal;			Scheduled\r\n*			sar == \'R\'		font-weight:bold;				Restart\r\n*			sar == \'A\'		font-style:italic;				Ad-Hoc\r\n*			bsr == 0			color:red;background:salmon;		Failed\r\n*			bsr > 0			color:brown;background:gold;		Partial\r\n*			bsr == 100		color:green;background:palegreen;		Successful\r\n*			status REGEXP \'Error|Abort\'	color:red;					Error/Abort\r\n*			status REGEXP \'Fail\'		color:brown;				Failure\r\n', 25),
	(12, 410, 'sb', 'Sessions', 'Aggregated sessions', 'List of aggregated sessions', 'select * from _sessions_aggregated', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	sa			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only sessions for \'%cellserver\'\r\nsessionid		SessionID		s			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show \'%sessionid\' session\r\nistatus		Initial Status\r\nibsr		iBSR\r\nrestarts		Restarts\r\nsessionids	Restarted SessionID\'s	s			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || restartof == \'%sessionid\'	Show \'%sessionid\' restarts\r\nspecification	Specification\r\ncustomer		Customer\r\nretention		Retention\r\ntype		Type\r\nbsr		BSR\r\nstatus		Status\r\nbw_day		Backup day\r\nstarttime		Initial Start Time\r\nduration		Total Duration\r\nlaststarttime	Last Start Time\r\nlastduration	Last Duration\r\ngbwritten		Written (GB)	sd			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show devices for \'%sessionid\' session\r\nmedia		Media		sm			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show media for \'%sessionid\' session\r\nerrors		Errors\r\nwarnings		Warnings\r\npendingda	PO\r\nrunningda	RO\r\nfailedda		FO\r\ncompletedda	CO\r\nobjects		Objects		so			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show objects for \'%sessionid\' session\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			bsr == 0			background:salmon;			Failed\r\n*			bsr > 0			background:gold;				Partial\r\n*			bsr == 100		background:palegreen;			Successful\r\nistatus,ibsr		ibsr == 0			background:salmon;			Failed\r\nistatus,ibsr		ibsr > 0			background:gold;				Partial\r\nistatus,ibsr		ibsr == 100		background:palegreen;			Successful\r\n*			status REGEXP \'Error|Abort\'	color:red;					Error/Abort\r\n*			status REGEXP \'Fail\'		color:brown;				Failure\r\n*			status == \'Completed\'	color:green;				Completed\r\n', 25),
	(13, 411, 'sd', NULL, 'Sessions - devices', 'List of session devices', 'select * from _session_devices', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	sd			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only session\'s devices for \'%cellserver\'\r\nsessionid		SessionID		sd			sessionid == \'%sessionid\'					sessionid == \'%sessionid\'				Show only session\'s devices for \'%sessionid\'\r\ndevice		Device Name	sd			device == \'%device\'					device == \'%device\'				Show only session\'s devices for \'%device\'\r\nlockname		Lock Name	sd			lockname == \'%lockname\'					lockname == \'%lockname\'				Show only session\'s devices for \'%lockname\'\r\nlibrary		Library		sd			library == \'%library\'					library == \'%library\'				Show only session\'s devices for \'%library\'\r\nstarttime		Start Time\r\nendtime		End Time\r\nduration		Duration\r\ngbwritten		Written (GB)	s			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show session \'%sessionid\'\r\nperformance	Performance\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			gbwritten == 0			color:red;background:salmon;	Idle\r\n*			gbwritten > 0			color:green;background:lightgreen;	Writing\r\n', 10),
	(14, 412, 'sm', NULL, 'Sessions - media', 'List of session media', 'select * from _session_media', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	sm			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only session\'s media for \'%cellserver\'\r\nsessionid		SessionID		sm			sessionid == \'%sessionid\'					sessionid == \'%sessionid\'				Show only session\'s media for \'%sessionid\'\r\nmediumid		Medium ID	m			cellserver == \'%cellserver\' || mediumid == \'%mediumid\'		mediumid == \'%mediumid\'				Show medium \'%label\'\r\nlabel		Label\r\nlocation		Location	\r\npool		Pool name	p			cellserver == \'%cellserver\' || mediumid == \'%mediumid\'		name == \'%pool\'					Show pool \'%pool\'\r\nprotection	Protection\r\nused		Used (GB)\r\ntotal		Total (GB)\r\nlastused		Last Used		s			cellserver == \'%cellserver\' || mediumid == \'%mediumid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show session \'%sessionid\'\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			used == 0			color:red;background:salmon;	Empty\r\n*			used > 0				color:green;background:lightgreen;	Used\r\n', 10),
	(15, 413, 'so', NULL, 'Sessions - objects', 'List of session objects', 'select * from _session_objects', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	so			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only session\'s objects for \'%cellserver\'\r\nsessionid		SessionID		so			sessionid == \'%sessionid\'					sessionid == \'%sessionid\'				Show only session\'s objects for \'%sessionid\'\r\ntype		Type\r\nclient		Host name\r\nmountpoint	Mount point\r\ndescription	Description\r\nstatus		Status\r\nstarttime		Start Time\r\nendtime		End Time\r\nduration		Duration\r\nkbwritten		Written (KB)	s			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show session \'%sessionid\'\r\nfiles		Files\r\nperformance	Performance\r\nprotection	Protection\r\nerrors		Errors\r\nwarnings		Warnings\r\ndevice		Device Name	sd			cellserver == \'%cellserver\' || device == \'%device\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show devices for \'%sessionid\' session', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			status == \'Aborted\'			color:red;background:salmon;	Aborted\r\n*			status == \'Failed\'			color:red;background:lightpink;	Failed\r\n*			status == \'Completed\'		color:green;background:lightgreen;	Completed\r\n', 10),
	(16, 200, 'c', 'Customers', 'Customers', 'List of customers', 'select * from _customers', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomer		Customer\r\nclients		Clients		h			customer == \'%customer\'					customer == \'%customer\'				Show clients for \'%customer\'\r\nfsclients		FS Clients		h			customer == \'%customer\'					customer == \'%customer\' || type <> \'BAR\'		Show FS clients for \'%customer\'\r\nbarclients		Integ Clients	h			customer == \'%customer\'					customer == \'%customer\' || type == \'BAR\'		Show Integ clients for \'%customer\'\r\nobjects		Objects		o			customer == \'%customer\'					customer == \'%customer\'				Show objects for \'%customer\'\r\nfsobjects		FS objects	o			customer == \'%customer\'					customer == \'%customer\' || type <> \'BAR\'		Show FS objects for \'%customer\'\r\nbarobjects	Integ objects	o			customer == \'%customer\'					customer == \'%customer\' || type == \'BAR\'		Show Integ objects for \'%customer\'\r\nspecifications	Specifications	s1			customer == \'%customer\'					customer == \'%customer\'				Show specifications for \'%customer\'\r\nsessions_24h	Sessions 24h	s			customer == \'%customer\'					customer == \'%customer\' || starttime >= -24 HOUR	Show sesisons for \'%customer\'\r\nbsr_sessions_24h	BSR ses.24h	sb			customer == \'%customer\'					customer == \'%customer\' || starttime >= -24 HOUR	Show sesisons for \'%customer\'\r\nbsr_24h		BSR % 24h	sb			customer == \'%customer\'					customer == \'%customer\' || BSR < 100 || starttime >= -24 HOUR	Show failed sesisons for \'%customer\'\r\ngbwritten_24h	Written 24h (GB)\r\nsessions_1m	Sessions LM\r\nbsr_sessions_1m	BSR ses. LM\r\nbsr_1m		BSR % LM\r\ntbwritten_1m	Written LM (TB)\r\npools		Pools		p			customer == \'%customer\'					customer == \'%customer\'				Show pools for \'%customer\'\r\ntbretained	Retained (TB)\r\n', '#field(s)_affected				#condition		#CSS						#description\r\n#---------------------				#---------------------		#------------------------------------------------		#------------------------------------------\r\n*					sessions_24h > 0		color:green;background:palegreen;			Normal\r\n*					sessions_24h == 0		color:red;background:salmon;			No Sessions\r\nbsr_sessions_24h,bsr_24h,gbwritten_24h	bsr_24h >= 0		color:red;background:salmon;			less than 75%\r\nbsr_sessions_24h,bsr_24h,gbwritten_24h	bsr_24h >= 75		color:red;background:lightpink;			75%\r\nbsr_sessions_24h,bsr_24h,gbwritten_24h	bsr_24h >= 90		color:salmon;background:gold;			90%\r\nbsr_sessions_24h,bsr_24h,gbwritten_24h	bsr_24h >= 95		color:green;background:lawngreen;			95%\r\nbsr_sessions_24h,bsr_24h,gbwritten_24h	bsr_24h >= 98		color:green;background:palegreen;			98%\r\nbsr_sessions_1m,bsr_1m,tbwritten_1m		bsr_1m >= 0		color:red;background:salmon;			less than 75%\r\nbsr_sessions_1m,bsr_1m,tbwritten_1m		bsr_1m >= 75		color:red;background:lightpink;			75%\r\nbsr_sessions_1m,bsr_1m,tbwritten_1m		bsr_1m >= 90		color:salmon;background:gold;			90%\r\nbsr_sessions_1m,bsr_1m,tbwritten_1m		bsr_1m >= 95		color:green;background:lawngreen;			95%\r\nbsr_sessions_1m,bsr_1m,tbwritten_1m		bsr_1m >= 98		color:green;background:palegreen;			98%\r\n', 25),
	(17, 210, 'h', 'Customers', 'Clients', 'List of clients', 'select * from _clients', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	h			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show clients for \'%cellserver\'\r\ncustomer		Customer		h			customer == \'%customer\'					customer == \'%customer\'				Show clients for \'%customer\'\r\nname		Client Name\r\ntype		Type		h			type == \'%type\'						type == \'%type\'					Show \'%type\' clients\r\nspecifications	Specifications	s1			cellserver == \'%cellserver\' || type == \'%type\' || name == \'%name\'			cellserver == \'%cellserver\' || hostnames REGEXP \'%name\'		Show specifications for \'%name\'\r\nmountpoints	Objects		o			name == \'%name\' || type == \'%type\'				client == \'%name\' || type == \'%type\' 			Show \'%type\' mountpoints for \'%name\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			type == \'BAR\'			background:palegreen;;color:darkblue;		BAR\r\n*			type == \'FileSystem\'		background:palegreen;color:green;		FileSystem\r\n*			type == \'WinFS\'			background:palegreen;color:darkgreen;	WinFS\r\n*			type == \'IDB\'			background:palegreen;color:blue;		IDB\r\n', 25),
	(18, 500, 'lib', 'Hardware', 'Libraries', 'List of libraries', 'select * from _libraries', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	lib			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only libraries for \'%cellserver\'\r\nname		Library Name	devu			name == \'%name\'						lockname REGEXP \'%name\'				Show device utilization for \'%name\' \r\ndevices		Devices		dev			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || library == \'%name\'		Show devices for \'%name\' library\r\ndescription	Description\r\nhost		Host\r\nioctlserial		I/O Serial\r\ncontrol		Control\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			devices > 0		background:palegreen;color:green;			Normal\r\n*			devices == 0		background:silver;color:black;			None\r\n', 25),
	(19, 510, 'dev', 'Hardware', 'Devices', 'List of devices', 'select * from _devices', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	dev			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only devices for \'%cellserver\'\r\nlibrary		Library		dev			cellserver == \'%cellserver\' || library == \'%library\'		cellserver == \'%cellserver\' || library == \'%library\'	Show devices for \'%library\' library\r\nlockname		Lock name	devu			lockname == \'%lockname\'					lockname == \'%lockname\'				Show device utilization for lock name \'%lockname\' \r\nname		Device Name\r\ndisable		Disabled\r\ndescription	Description\r\nhost		Host\r\npool		Default Pool\r\nblksize		Block Size\r\ndevserial		S/N\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			disable == \'Y\'		background:silver;color:black;			Disabled\r\n*			disable == \'\'		background:palegreen;color:green;			Enabled\r\n*			lockname == \'\'		background:red;color:white;				No Lock Name\r\n', 25),
	(20, 520, 'p', 'Hardware', 'Pools', 'List of pools', 'select * from _pools', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		CellServer	p			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show pools for Cell Server \'%cellserver\'\r\ncustomer		Customer		p			customer == \'%customer\'					customer == \'%customer\'				Show pools for customer \'%customer\'\r\nmtype		Media Type	p			mtype == \'%mype\'						mtype == \'%mtype\'				Show pools for \'%mtype\'\r\nname		Name\r\ndescription	Description\r\ntype\r\ngbused		Used (GB)\r\ngbtotal		Total (GB)\r\nmedia		Media		m			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || pool == \'%name\'		Show media for pool \'%name\'\r\npoor		Poor		m			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || pool == \'%name\' || status == \'Poor\'		Show media for pool \'%name\'\r\nfair		Fair		m			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || pool == \'%name\' || status == \'Fair\'		Show media for pool \'%name\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			media > 0		background:lightgreen;				Allocated\r\n*			poor == 0		color:green;					No poor\r\n*			fair > 0			color:gold;					Fair\r\n*			poor > 0			color:red;						Poor\r\n*			media == 0		background:silver;color:gray;				Empty\r\n*			mtype REGEXP \'Physical\'	font-weight:bold;					Physical', 25),
	(21, 530, 'm', 'Hardware', 'Media', 'List of media', 'select * from _media', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		CellServer	m			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show media for Cell Server \'%cellserver\'\r\nmediumid		Medium ID\r\nlabel		Label\r\npool		Pool		p			pool == \'%pool\'						name == \'%pool\'					Show pool \'%pool\'\r\nlocation		Location\r\nowner		Owner\r\nwp		WP\r\nstatus		Status\r\ngbused		Used (GB)	sm			mediumid == \'%mediumid\'					cellserver == \'%owner\' || mediumid == \'%mediumid\'	Show sessions for medium \'%label\'\r\ngbtotal		Total (GB)\r\ngbusable		Usable (GB)\r\nwrites		Writes\r\noverwrites	Overwrites\r\nerrors		Errors\r\ninitialized		Initialized\r\nprotected		Protected\r\nlastwrite		Last Write\r\nlastaccess	Last Access\r\nlastoverwrite	Last Overwrite\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			wp == \'No\'		background:lightgreen;				Normal\r\n*			wp == \'Yes\'		background:salmon;				Write-Protect\r\n*			status == \'Good\'		color:green;					Good\r\n*			status == \'Fair\'		color:gold;					Fair\r\n*			status == \'Poor\'		color:red;						Poor\r\n', 25),
	(22, 540, 'ost', 'Hardware', 'Media - scratch tapes', 'List of physical scratch tapes', 'select * from _offload_scratch_tapes', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\npool		Pool Name\r\nprefix		Prefix\r\nbarcode		Barcode\r\nlocation		Location\r\nstatus		Status\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			status == \'Good\'		color:green;					Good\r\n*			status == \'Fair\'		color:gold;					Fair\r\n*			status == \'Poor\'		color:red;						Poor\r\n', 25),
	(23, 550, 'out', 'Hardware', 'Media - used tapes', 'List of physical tapes for offload', 'select * from _offload_used_tapes', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\nlibrary		Library\r\nfull		Full\r\npool		Pool Name\r\nbarcode		Barcode\r\nlocation		Location\r\nstatus		Status\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			full == \'yes\'		font-weight:normal;				Full\r\n*			full == \'no\'		font-weight:bold;					Appendable\r\n*			status == \'Good\'		color:green;					Good\r\n*			status == \'Fair\'		color:gold;					Fair\r\n*			status == \'Poor\'		color:red;						Poor\r\n', 25),
	(24, 220, 'o', 'Customers', 'Objects', 'List of objects', 'select * from _objects', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomer		Customer		o			customer == \'%customer\'					customer == \'%customer\'				Show mountpoints for \'%customer\'\r\ncellserver		Cell Server	o			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show mountpoints for \'%cellserver\'\r\nclient		Client		o			client == \'%client\'						client == \'%client\'					Show mountpoints for \'%client\'\r\ntype		Type		o			type == \'%type\'						type == \'%type\'					Show \'%type\' mountpoints\'\r\nname		Mount Point\r\ndescription	Description\r\nversions		Versions		ov			client == \'%client\' || name == \'%name\'				client == \'%client\' || type == \'%type\' || mountpoint REGEXP \'%name\'				Show all versions for \'%name\' on  \'%client\'\r\noldest		Oldest version	ov			client == \'%client\' || name == \'%name\'				client == \'%client\' || mountpoint REGEXP \'%name\' || starttime == \'%oldest\'	Show oldest version for \'%name\' on  \'%client\'\r\nnewest		Newest version	ov			client == \'%client\' || name == \'%name\'				client == \'%client\' || mountpoint REGEXP \'%name\' || starttime == \'%newest\'	Show newest version for \'%name\' on  \'%client\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			versions > 0 		background:palegreen;				Available\r\n*			versions == 0		background:salmon;				None\r\n*			type == \'BAR\'		color:darkblue;					BAR\r\n*			type == \'FileSystem\'	color:green;					FileSystem\r\n*			type == \'WinFS\'		color:darkgreen;					WinFS\r\n*			type == \'IDB\'		color:blue;					IDB\r\n', 25),
	(25, 0, 'ov', NULL, 'Object versions', 'List of object versions', 'select * from _object_versions', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomer		Customer		ov			customer == \'%customer\'					customer == \'%customer\'				Show mountpoints for customer \'%customer\'\r\ncellserver		CellServer	ov			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show mountpoints for Cell Server \'%cellserver\'\r\nclient		Client		ov			client == \'%client\'						client == \'%client\'					Show mountpoints for \'%client\'\r\ntype		Type		ov			type == \'%type\'						type == \'%type\'					Show \'%type\' mountpoints\'\r\nmountpoint	Mount Point\r\ndescription	Description\r\nstarttime		Version from\r\nprotection	Protected until\r\nsessionid		SessionID		s			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show original session \'%sessionid\' on \'%cellserver\'\r\nstatus		Status\r\nkbwritten		Written (kB)', '#field(s)_affected		#condition			#CSS						#description\r\n#---------------------		#---------------------			#------------------------------------------------		#------------------------------------------\r\n*			status == \'Completed\'		background:palegreen;				Completed\r\n*			status REGEXP \'Fail|Error|Abort\'	background:salmon;				Not completed\r\n*			type == \'BAR\'			color:darkblue;					BAR\r\n*			type == \'FileSystem\'		color:green;					FileSystem\r\n*			type == \'WinFS\'			color:darkgreen;					WinFS\r\n*			type == \'IDB\'			color:blue;					IDB\r\n', 25),
	(26, 0, 's', NULL, 'Sessions', 'List of sessions', 'select * from _sessions', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	s			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only sessions for \'%cellserver\'\r\nsessionid		SessionID		sa			cellserver == \'%cellserver\' || restartof == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show aggregated \'%sessionid\' session\r\nsar		SAR		s			sar == \'%sar\'						sar == \'%sar\'					Show only \'%sar\' sessions\r\nrestartof		Restart of\r\nspecification	Specification\r\ncustomer		Customer\r\nretention		Retention\r\ntype		Type\r\nbsr		BSR\r\nperiodicity\r\nsessionowner	Session Owner\r\nstatus		Status\r\nmode		Mode\r\nstarttime		Start Time\r\nendtime		End Time\r\nqueuing		Queuing\r\nduration		Duration\r\ngbwritten		Written (GB)	sd			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show devices for \'%sessionid\' session\r\nmedia		Media		sm			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show media for \'%sessionid\' session\r\nerrors		Errors\r\nwarnings		Warnings\r\npendingda	PO\r\nrunningda	RO\r\nfailedda		FO\r\ncompletedda	CO\r\nobjects		Objects		so			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show objects for \'%sessionid\' session\r\nsuccess\r\n', '#field(s)_affected		#condition			#CSS						#description\r\n#---------------------		#---------------------			#------------------------------------------------		#------------------------------------------\r\n*			sar == \'S\'				font-weight:normal;				Scheduled\r\n*			sar == \'R\'			font-weight:bold;					Restart\r\n*			sar == \'A\'			font-style:italic;					Ad-Hoc\r\n*			bsr == 0				color:red;background:salmon;			Failed\r\n*			bsr > 0				color:brown;background:gold;			Partial\r\n*			bsr == 100			color:green;background:palegreen;			Successful\r\n*			status REGEXP \'Error|Abort\'		color:red;						Error/Abort\r\n*			status REGEXP \'Fail\'			color:brown;					Failure\r\n', 25),
	(27, 320, 'sp', 'Specifications', 'Specification periodicity', 'Periodicity of specifications', 'select * from _specification_periodicity', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	sp			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only sessions for \'%cellserver\'\r\nspecification	Specification	s1			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || name == \'%specification\'	Show specification \'%specification\'\r\nsessions		Sessions		s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || specification == \'%specification\'	Show sessions for \'%specification\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			sessions > 0		color:green;background:palegreen;			Up to 12\r\n*			sessions > 12		color:red;background:lightpink;			More than 12\r\n*			sessions > 24		color:red;background:salmon;			More than 24\r\n', 25),
	(28, 260, 'brc', 'Customers', 'Backup Retained', 'Backup Retained data per customer', 'select * from _backup_retained_customer', 'customer,mtype', 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomer		Customer\r\nmtype		Media Type\r\nmedia		Media		p			customer == \'%customer\' || mtype = \'%mtype\'			customer == \'%customer\' || mtype = \'%mtype\'		Show \'%mtype\' for customer \'%customer\'\r\ntbused		Used (TB)\r\ntbtotal		Total (TB)', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			tbtotal > 0		color:green;background:palegreen;			Allocated\r\n', 25),
	(29, 420, 'cf', 'Sessions', 'Consecutive failures', 'List fo consecutive failures', 'select * from _consecutive_failures', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	cf			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only sessions for \'%cellserver\'\r\nspecification	Specification	s2			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || name == \'%specification\'		Show specification \'%specification\'\r\ncustomer		Customer		cf			customer == \'%customer\'					customer == \'%customer\'					Show only sessions for  \'%customer\'\r\nretention		Retention		cf			retention == \'%retention\'					retention == \'%retention\'					Show only \'%retention\' sessions\r\ntype		Type		cf			type == \'%type\'						type == \'%type\'						Show only \'%type\' sessions\r\nscheduled	Scheduled?	cf			scheduled == \'%scheduled\'					scheduled == \'%scheduled\'					Show only scheduled sessions\r\nlastfailure		Last failure	s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || sessionid == \'%lastfailure\'		Show last failure for \'%cellserver\' and \'%specification\'\r\nlastsuccess	Last successful	s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || sessionid == \'%lastsuccess\'		Show last successful session for \'%cellserver\' and \'%specification\'\r\nfailures		Failures		s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || specification == \'%specification\'	Show failures for \'%cellserver\' and \'%specification\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			customer == \' \'		color:red;						None\r\n*			failures > 0		color:green;background:lawngreen;			Failing\r\n*			failures > 1		color:green;background:greenyellow;			Failing 2x\r\n*			failures > 4		color:salmon;background:gold;			Failing 5x\r\n*			failures > 6		color:red;background:salmon;			Failing 7x\r\n*			scheduled == \'No\'		background:silver;color:gray;				Not scheduled\r\n', 25),
	(30, 330, 'dnr', 'Specifications', 'Specifications not runing', 'List of specifications that did not run within period', 'select * from _did_not_run', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	dnr			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only specifications for \'%cellserver\'\r\nspecification	Specification	s1			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || name == \'%specification\'		Show specification \'%specification\'\r\ncustomer		Customer		dnr			customer == \'%customer\'					customer == \'%customer\'					Show only specifications for  \'%customer\'\r\nretention		Retention		dnr			retention == \'%retention\'					retention == \'%retention\'					Show only \'%retention\' specifications\r\ntype		Type		dnr			type == \'%type\'						type == \'%type\'						Show only \'%type\' specifications\r\nperiodicity	Periodicity\r\nschedule		Schedule		dnr			schedule == \'%schedule\'					schedule == \'%schedule\'					Show only specifications with \'%schedule\' schedules\r\nsessionid		Last session	s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || specification == \'%specification\'	Show sessions for \'%cellserver\' and \'%specification\'\r\ndaysago		Days ago\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			customer == \' \'		color:red;						None\r\n*			daysago > 0		color:green;background:lawngreen;			up to 3 days\r\n*			daysago > 3		color:green;background:greenyellow;			4 days\r\n*			daysago > 5		color:salmon;background:gold;			6 days\r\n*			daysago > 9		color:red;background:salmon;			10 days\r\n*			sessionid == \'\'		color:white;background:red;				Never run\r\n*			schedule == \'disabled\'	background:silver;color:gray;				Disabled\r\n*			schedule == \'missing\'	color:white;background:red;				Missing\r\n', 25),
	(31, 240, 'bvc', 'Customers', 'Backup Volume', 'Backup Volume data per customer', 'select * from _backup_volume_customer', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncustomer		Customer name\r\nsessions		Sessions		sa			customer == \'%customer\'					customer == \'%customer\'					Show sessions for customer \'%customer\'\r\ntbwritten		Written (TB)\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			customer == \'\'		background:silver;					None\r\n*			customer != \'\'		background:lightgreen;color:green;			Assigned\r\n', 25),
	(32, 250, 'bvch', 'Customers', 'Backup Volume per host', 'Backup Volume data per customer and host', 'select * from _backup_volume_customer_host', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncustomer		Customer name	bvch			customer == \'%customer\'				customer == \'%customer\'					Show values for customer \'%customer\'\r\nhost		Host name\r\ntype		Type\r\nsessions		Sessions\r\ngbwritten		Written (GB)\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			customer == \'\'		background:silver;					None\r\n*			customer != \'\'		background:lightgreen;color:green;			Assigned\r\n*			type == \'MSSQL\'		color:darkblue;					MSSQL\r\n*			type == \'Oracle8\'		color:darkblue;					Oracle\r\n*			type == \'Lotus\'		color:darkblue;					Lotus\r\n*			type == \'FS\'		color:darkgreen;					FS\r\n*			type == \'IDB\'		color:blue;					IDB\r\n', 25),
	(33, 430, 'sr', 'Sessions', 'Sessions review', 'Sessions review', 'select * from _sessions_review', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\nsupport		Support\r\ntower		Tower\r\ncellserver		Cell Server\r\nbsrsessions	Sessions\r\nbsrsuccess	Success\r\nbsrfailed		Failed\r\nbsr		BSR%\r\n1stsuccess	1.success\r\n1stfailed		1.failed\r\n1stbsr		1.BSR%\r\nrestarted		Restart\r\nnotrestarted	No R.\r\nrestartrate	R.%\r\nrestartsuccess	R.success\r\nrestartfailed	R.failed\r\nrsr		RSR%\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			7%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n1stsuccess,1stfailed,1stbsr	1stbsr >= 0		color:red;background:salmon;			less than 75%\r\n1stsuccess,1stfailed,1stbsr	1stbsr >= 75		color:red;background:lightpink;			75%\r\n1stsuccess,1stfailed,1stbsr	1stbsr >= 90		color:salmon;background:gold;			90%\r\n1stsuccess,1stfailed,1stbsr	1stbsr >= 95		color:green;background:lawngreen;			95%\r\n1stsuccess,1stfailed,1stbsr	1stbsr >= 98		color:green;background:palegreen;			98%\r\nnotrestarted,restarted,restartrate	restartrate >= 0	color:red;background:salmon;			less than 75%\r\nnotrestarted,restarted,restartrate	restartrate >= 75	color:red;background:lightpink;			75%\r\nnotrestarted,restarted,restartrate	restartrate >= 90	color:salmon;background:gold;			90%\r\nnotrestarted,restarted,restartrate	restartrate >= 95	color:green;background:lawngreen;			95%\r\nnotrestarted,restarted,restartrate	restartrate >= 98	color:green;background:palegreen;			98%\r\nrestartsuccess,restartfailed,rsr	rsr >= 0		color:red;background:salmon;			less than 75%\r\nrestartsuccess,restartfailed,rsr	rsr >= 75		color:red;background:lightpink;			75%\r\nrestartsuccess,restartfailed,rsr	rsr >= 90		color:salmon;background:gold;			90%\r\nrestartsuccess,restartfailed,rsr	rsr >= 95		color:green;background:lawngreen;			95%\r\nrestartsuccess,restartfailed,rsr	rsr >= 98		color:green;background:palegreen;			98%\r\n', 25),
	(34, 440, 'sx', 'Sessions', 'Sessions (X-mas tree)', 'X-mas Tree Session report', 'select * from _sessions_xmastree', 'specification,date', 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nspecification	Specification\r\ndate		Day\r\nflag		Result\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			flag REGEXP \'D.\'		font-weight:normal;				D : Daily\r\n*			flag REGEXP \'W.\'		font-weight:bold;					W : Weekly\r\n*			flag REGEXP \'.F\'		color:red;background:salmon;			F : Failed\r\n*			flag REGEXP \'.F\\+\'		color:red;background:lightpink;			F+ : Failed after restart(s)\r\n*			flag REGEXP \'.P\'		color:salmon;background:gold;			P : Partial\r\n*			flag REGEXP \'.P\\+\'		color:green;background:greenyellow;			P+ : Partial after restart(s)\r\n*			flag REGEXP ".S"		color:green;background:palegreen;			S : Successful\r\n*			flag REGEXP \'.S\\+\'		color:green;background:lawngreen;			S+ : Successful after restart(s)\r\n', 25),
	(35, 600, 'gbsr', 'BSR', 'Global BSR', 'Global BSR', 'select  \r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\n', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nsessions		Sessions		sb			sessions == \'%sessions\'					bsr >= 0						Show sessions\r\nibsr		iBSR		sb			sessions == \'%sessions\'					ibsr < 100					Show initially failed sessions\r\nrestarts		Restarts		sb			sessions == \'%sessions\'					restarts > 0					Show restarted sessions\r\nbsr		BSR		sb			sessions == \'%sessions\'					bsr < 100						Show failed sessions\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			sessions == 0		background:gray;color:black;				None\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 25),
	(36, 610, 'gbsrcs', 'BSR', 'Global BSR per Cell Server', 'Global BSR per Cell Server', 'select  \r\ncellserver,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by cellserver', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server\r\nsessions		Sessions		sb			cellserver == \'%cellserver\'					cellserver == \'%cellserver\' || 				Show sessions for \'%cellserver\'\r\nibsr		iBSR		sb			cellserver == \'%cellserver\'					cellserver == \'%cellserver\' || ibsr < 100		Show initially failed sessions for \'%cellserver\'\r\nrestarts		Restarts		sb			cellserver == \'%cellserver\'					cellserver == \'%cellserver\' || restarts > 0		Show restarted sessions for \'%cellserver\'\r\nbsr		BSR		sb			cellserver == \'%cellserver\'					cellserver == \'%cellserver\' || bsr < 100			Show failed sessions for \'%cellserver\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 25),
	(37, 620, 'gbsrc', 'BSR', 'Global BSR per Customer', 'Global BSR per Customer', 'select  \r\ncustomer,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by customer', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomer		Customer\r\nsessions		Sessions		sb			customer == \'%customer\'					customer == \'%customer\' || 				Show sessions for \'%customer\'\r\nibsr		iBSR		sb			customer == \'%customer\'					customer == \'%customer\' || ibsr < 100			Show initially failed sessions for \'%customer\'\r\nrestarts		Restarts		sb			customer == \'%customer\'					customer == \'%customer\' || restarts > 0		Show restarted sessions for \'%customer\'\r\nbsr		BSR		sb			customer == \'%customer\'					customer == \'%customer\' || bsr < 100			Show failed sessions for \'%customer\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 25),
	(38, 630, 'gbsrt', 'BSR', 'Global BSR per Technology', 'Global BSR per Technology', 'select  \r\ntype,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by type', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ntype		Technology\r\nsessions		Sessions		sb			type == \'%type\'					type == \'%type\' || 				Show sessions for \'%type\'\r\nibsr		iBSR		sb			type == \'%type\'					type == \'%type\' || ibsr < 100		Show initially failed sessions for \'%type\'\r\nrestarts		Restarts		sb			type == \'%type\'					type == \'%type\' || restarts > 0		Show restarted sessions for \'%type\'\r\nbsr		BSR		sb			type == \'%type\'					type == \'%type\' || bsr < 100			Show failed sessions for \'%type\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 25),
	(39, 640, 'dbsr', 'BSR', 'Daily BSR', 'Daily BSR', 'select  \r\nbw_day as day,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by 1\r\norder by 1 desc,%order', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nday		Backup day\r\nsessions		Sessions		sb			day == \'%day\'						bw_day == \'%day\'					Show sessions from \'%day\'\r\nibsr		iBSR		sb			day == \'%day\'						bw_day == \'%day\' || ibsr < 100			Show initially failed sessions from \'%day\'\r\nrestarts		Restarts		sb			day == \'%day\'						bw_day == \'%day\' || restarts > 0			Show restarted sessions from \'%day\'\r\nbsr		BSR		sb			day == \'%day\'						bw_day == \'%day\' ||  bsr < 100			Show failed sessions from \'%day\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n*			day >= -1 day		color:black;background:floralwhite;			Today\r\n', 14),
	(40, 650, 'dbsrcs', 'BSR', 'Daily BSR per Cell Server', 'Daily BSR per Cell Server', 'select  \r\nbw_day as day,\r\ncellserver,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\ngroup by 1,2\r\norder by 1 desc,%order\r\n', 'day,cellserver', 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nday		Backup day\r\ncellserver		Cell Server\r\nsessions		Sessions		sb			day == \'%day\' || cellserver == \'%cellserver\'			cellserver == \'%cellserver\' || bw_day == \'%day\'			Show sessions for \'%cellserver\' from \'%day\'\r\nibsr		iBSR		sb			day == \'%day\' || cellserver == \'%cellserver\'			cellserver == \'%cellserver\' || bw_day == \'%day\' || ibsr < 100	Show initially failed sessions for \'%cellserver\' from \'%day\'\r\nrestarts		Restarts		sb			day == \'%day\' || cellserver == \'%cellserver\'			cellserver == \'%cellserver\' || bw_day == \'%day\' || restarts > 0	Show restarted sessions for \'%cellserver\' from \'%day\'\r\nbsr		BSR		sb			day == \'%day\' || cellserver == \'%cellserver\'			cellserver == \'%cellserver\' || bw_day == \'%day\' ||  bsr < 100	Show failed sessions for \'%cellserver\' from \'%day\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n*			day >= -1 day		color:black;background:floralwhite;			Today\r\n', 14),
	(41, 660, 'dbsrc', 'BSR', 'Daily BSR per Customer', 'Daily BSR per Customer', 'select  \r\nbw_day as day,\r\ncustomer,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\ngroup by 1,2\r\norder by 1 desc,%order', 'day,customer', 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nday		Backup day\r\ncustomer		Customer\r\nsessions		Sessions		sb			day == \'%day\' || customer == \'%customer\'			customer == \'%customer\' || bw_day == \'%day\'			Show sessions for \'%customer\' from \'%day\'\r\nibsr		iBSR		sb			day == \'%day\' || customer == \'%customer\'			customer == \'%customer\' || bw_day == \'%day\' || ibsr < 100	Show initially failed sessions for \'%customer\' from \'%day\'\r\nrestarts		Restarts		sb			day == \'%day\' || customer == \'%customer\'			customer == \'%customer\' || bw_day == \'%day\' || restarts > 0	Show restarted sessions for \'%customer\' from \'%day\'\r\nbsr		BSR		sb			day == \'%day\' || customer == \'%customer\'			customer == \'%customer\' || bw_day == \'%day\' ||  bsr < 100	Show failed sessions for \'%customer\' from \'%day\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n*			day >= -1 day		color:black;background:floralwhite;			Today\r\n', 14),
	(42, 670, 'dbsrt', 'BSR', 'Daily BSR per Technology', 'Daily BSR per Technology', 'select  \r\nbw_day as day,\r\ntype,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\ngroup by 1,2\r\norder by 1 desc,%order\r\n', 'day,type', 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nday		Backup day\r\ntype		Technology\r\nsessions		Sessions		sb			day == \'%day\' || type == \'%type\'			type == \'%type\' || bw_day == \'%day\'			Show sessions for \'%type\' from \'%day\'\r\nibsr		iBSR		sb			day == \'%day\' || type == \'%type\'			type == \'%type\' || bw_day == \'%day\' || ibsr < 100	Show initially failed sessions for \'%type\' from \'%day\'\r\nrestarts		Restarts		sb			day == \'%day\' || type == \'%type\'			type == \'%type\' || bw_day == \'%day\' || restarts > 0	Show restarted sessions for \'%type\' from \'%day\'\r\nbsr		BSR		sb			day == \'%day\' || type == \'%type\'			type == \'%type\' || bw_day == \'%day\' ||  bsr < 100	Show failed sessions for \'%type\' from \'%day\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n*			day >= -1 day		color:black;background:floralwhite;			Today\r\n', 14),
	(43, 680, 'hbsr', 'BSR', 'Hourly BSR', 'Hourly BSR', 'select (date(starttime) + interval hour(starttime) hour) as time,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by 1\r\norder by 1 desc,%order ', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ntime		Time\r\nsessions		Sessions		sb			time == \'%time\'						starttime REGEXP \'%time\'				Show sessions from \'%time\'\r\nibsr		iBSR		sb			time == \'%time\'						starttime REGEXP \'%time\' || ibsr < 100			Show initially failed sessions from \'%time\'\r\nrestarts		Restarts		sb			time == \'%time\'						starttime REGEXP \'%time\' || restarts > 0		Show restarted sessions from \'%time\'\r\nbsr		BSR		sb			time == \'%time\'						starttime REGEXP \'%time\' ||  bsr < 100			Show failed sessions from \'%time\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 24),
	(44, 690, 'hbsrcs', 'BSR', 'Hourly BSR per Cell Server', 'Hourly BSR per Cell Server', 'select (date(starttime) + interval hour(starttime) hour) as time,\r\ncellserver,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by 1,2\r\norder by 1 desc,%order', 'time,cellserver', 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ntime		Time\r\ncellserver		Cell Server\r\nsessions		Sessions		sb			cellserver == \'%cellserver\' || time == \'%time\'			cellserver == \'%cellserver\' || starttime REGEXP \'%time\'				Show sessions for \'%cellserver\' from \'%time\'\r\nibsr		iBSR		sb			cellserver == \'%cellserver\' || time == \'%time\'			cellserver == \'%cellserver\' || starttime REGEXP \'%time\' || ibsr < 100			Show initially failed sessions for \'%cellserver\' from \'%time\'\r\nrestarts		Restarts		sb			cellserver == \'%cellserver\' || time == \'%time\'			cellserver == \'%cellserver\' || starttime REGEXP \'%time\' || restarts > 0		Show restarted sessions for \'%cellserver\' from \'%time\'\r\nbsr		BSR		sb			cellserver == \'%cellserver\' || time == \'%time\'			cellserver == \'%cellserver\' || starttime REGEXP \'%time\' ||  bsr < 100			Show failed sessions for \'%cellserver\' from \'%time\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 24),
	(45, 700, 'hbsrc', 'BSR', 'Hourly BSR per Customer', 'Hourly BSR per Customer', 'select (date(starttime) + interval hour(starttime) hour) as time,\r\ncustomer,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by 1,2\r\norder by 1 desc,%order', 'time,customer', 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ntime		Time\r\ncustomer		Customer\r\nsessions		Sessions		sb			customer == \'%customer\' || time == \'%time\'			customer == \'%customer\' || starttime REGEXP \'%time\'				Show sessions for \'%customer\' from \'%time\'\r\nibsr		iBSR		sb			customer == \'%customer\' || time == \'%time\'			customer == \'%customer\' || starttime REGEXP \'%time\' || ibsr < 100			Show initially failed sessions for \'%customer\' from \'%time\'\r\nrestarts		Restarts		sb			customer == \'%customer\' || time == \'%time\'			customer == \'%customer\' || starttime REGEXP \'%time\' || restarts > 0		Show restarted sessions for \'%customer\' from \'%time\'\r\nbsr		BSR		sb			customer == \'%customer\' || time == \'%time\'			customer == \'%customer\' || starttime REGEXP \'%time\' ||  bsr < 100			Show failed sessions for \'%customer\' from \'%time\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 24),
	(46, 710, 'hbsrt', 'BSR', 'Hourly BSR per Technology', 'Hourly BSR per Technology', 'select (date(starttime) + interval hour(starttime) hour) as time,\r\ntype,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by 1,2\r\norder by 1 desc,%order', 'time,type', 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ntime		Time\r\ntype		Technology\r\nsessions		Sessions		sb			type == \'%type\' || time == \'%time\'			type == \'%type\' || starttime REGEXP \'%time\'				Show sessions for \'%type\' from \'%time\'\r\nibsr		iBSR		sb			type == \'%type\' || time == \'%time\'			type == \'%type\' || starttime REGEXP \'%time\' || ibsr < 100			Show initially failed sessions for \'%type\' from \'%time\'\r\nrestarts		Restarts		sb			type == \'%type\' || time == \'%time\'			type == \'%type\' || starttime REGEXP \'%time\' || restarts > 0		Show restarted sessions for \'%type\' from \'%time\'\r\nbsr		BSR		sb			type == \'%type\' || time == \'%time\'			type == \'%type\' || starttime REGEXP \'%time\' ||  bsr < 100			Show failed sessions for \'%type\' from \'%time\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 24),
	(47, 0, 'ods', NULL, 'Database server overview', 'Overview - Database Server', 'select * from _status', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nuptime		Uptime\r\naborted_connects	Connect aborts\r\nslow_queries	Slow queries\r\nqueue		Queue	q				NONE							NONE\r\nprocesses	Processes	ps			NONE							NONE\r\nevents		Events\r\nlast_executed	Last event	l			NONE							cellserver = \'localhost\'				Show events log\r\nlast_normal_routine		Routine\r\nnormal_routine_duration	Time\r\nlast_daily_routine		Daily routine\r\ndaily_routine_duration	Time\r\nlast_maintenance		Maintenance\r\nmaintenance_duration	Time', '#field(s)_affected				#condition				#CSS						#description\r\n#---------------------				#---------------------				#------------------------------------------------		#------------------------------------------\r\n*					events == ENABLED			background:palegreen;color:green;			Normal\r\n*					processes == 1				background:palegreen;color:green;			Normal\r\n*					processes > 1				background:lightgreen;color:green;			Working\r\n*					processes > 10				background:greenyellow;color:green;			more than 10\r\nqueue					queue > 0				background:greenyellow;color:green;			Busy\r\nevents					events == \'DISABLED\'			background:gray;color:white;				Disabled\r\nlast_executed				last_executed < -5 minutes			background:salmon;color:red				Crashed\r\nlast_normal_routine,normal_routine_duration	last_normal_routine < -15 minutes		background:salmon;color:red				Normal routine error\r\nlast_daily_routine,daily_routine_duration	last_daily_routine < -1 day			background:salmon;color:red				Daily routine error\r\nlast_maintenance,maintenance_duration	last_maintenance < -1 month			background:yellow;color:gold				Maintenance error\r\n', 25),
	(48, 0, 'ocs', NULL, 'Cell Servers overview', 'Overview - Cell Servers', 'select * from _status_cellservers', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellservers	Cell Servers	cs1			NONE							NONE						Show Cell Servers\r\nsessions		Sessions		rs			NONE							NONE						Show running sessions\r\nsessions_24h	Sessions 24h	s			NONE							starttime >= -24 HOUR						Show all sessions\r\nbsr_sessions_24h	BSR ses. 24h	sb			NONE							starttime >= -24 HOUR				Show BSR sessions\r\nbsr_24h		BSR % 24h	sb			NONE							bsr < 100 || starttime >= -24 HOUR			Show failed BSR sessions\r\nsessions_1m	Sessions LM\r\nbsr_sessions_1m	BSR ses. LM\r\nbsr_1m		BSR % LM\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			sessions == 0		background:silver;color:black;			None\r\n*			cellservers == 0		background:gray;color:black;				None\r\n*			sessions > 0		background:palegreen;color:green;			Normal\r\nbsr_sessions_24h,bsr_24h	bsr_24h >= 0		color:red;background:salmon;			Less than 75%\r\nbsr_sessions_24h,bsr_24h	bsr_24h >= 75		color:red;background:lightpink;			75%\r\nbsr_sessions_24h,bsr_24h	bsr_24h >= 90		color:salmon;background:gold;			90%\r\nbsr_sessions_24h,bsr_24h	bsr_24h >= 95		color:green;background:lawngreen;			95%\r\nbsr_sessions_24h,bsr_24h	bsr_24h >= 98		color:green;background:palegreen;			98%\r\nbsr_sessions_1m,bsr_1m	bsr_1m >= 0		color:red;background:salmon;			Less than 75%\r\nbsr_sessions_1m,bsr_1m	bsr_1m >= 75		color:red;background:lightpink;			75%\r\nbsr_sessions_1m,bsr_1m	bsr_1m >= 90		color:salmon;background:gold;			90%\r\nbsr_sessions_1m,bsr_1m	bsr_1m >= 95		color:green;background:lawngreen;			95%\r\nbsr_sessions_1m,bsr_1m	bsr_1m >= 98		color:green;background:palegreen;			98%\r\n', 25),
	(49, 0, 'oc', NULL, 'Customers overview', 'Overview - Customers', 'select * from _status_customers', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomers	Customers	c			NONE							NONE						Show customers\r\nfs		FS clients		h			NONE							type REGEXP \'FileSystem|WinFS\'			Show file system clients\r\nfsobjects		FS objects	o			NONE							type <> \'BAR\'					Show FS objects\r\ninteg		Integ clients	h			NONE							type REGEXP \'BAR|IDB\'				Show integration clients\r\nbarobjects	Integ objects	o			NONE							type == \'BAR\'					Show Integ objects\r\ngbwritten_24h	Written 24h (GB)\r\ntbwritten_1m	Written LM (TB)\r\ntbretained	Retained (TB)\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			customers == 0		background:gray;color:black;				None\r\n*			gbwritten_24h == 0	background:silver;color:black;			None\r\n*			gbwritten_24h > 0		background:palegreen;color:green;			Normal\r\n', 25),
	(50, 0, 'ps', NULL, 'Processes', 'List of processes on database server', 'select * from _processes', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nID		PID\r\nUSER		User\r\nHOST		Host\r\nDB		DB\r\nCOMMAND	CMD\r\nTIME		Time (s)\r\nSTATE		Status\r\nINFO		Information\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			USER == \'script\'		background:palegreen;color:green;			Cell Server\r\n*			TIME > 120		background:greenyellow;color:green;			more than 2 minutes\r\n*			USER == \'root\'		background:navy;color:lavender;			Routine\r\n*			USER == \'event_scheduler\'	background:lightblue;color:blue;			Event Scheduler\r\n*			COMMAND == \'Sleep\'	background:silver;color:gray;				Terminated\r\n', 25),
	(51, 0, 'sbf', NULL, 'Aggregated failures', 'List of aggregated failed sessions ', 'select * from _sessions_aggregated where BSR<100', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	sa			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only sessions for \'%cellserver\'\r\nsessionid		SessionID		s			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show \'%sessionid\' session\r\nistatus		Initial Status\r\nibsr		iBSR\r\nrestarts		Restarts\r\nsessionids	Restarted SessionID\'s	s			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || restartof == \'%sessionid\'	Show \'%sessionid\' restarts\r\nspecification	Specification\r\ncustomer		Customer\r\nretention		Retention\r\ntype		Type\r\nbsr		BSR\r\nstatus		Status\r\nstarttime		Initial Start Time\r\nduration		Total Duration\r\nlaststarttime	Last Start Time\r\nlastduration	Last Duration\r\ngbwritten		Written (GB)	sd			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show devices for \'%sessionid\' session\r\nmedia		Media		sm			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show media for \'%sessionid\' session\r\nerrors		Errors\r\nwarnings		Warnings\r\npendingda	PO\r\nrunningda	RO\r\nfailedda		FO\r\ncompletedda	CO\r\nobjects		Objects		so			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show objects for \'%sessionid\' session\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			bsr == 0			background:salmon;			Failed\r\n*			bsr > 0			background:gold;				Partial\r\n*			bsr == 100		background:palegreen;			Successful\r\nistatus,ibsr		ibsr == 0			background:salmon;			Failed\r\nistatus,ibsr		ibsr > 0			background:gold;				Partial\r\nistatus,ibsr		ibsr == 100		background:palegreen;			Successful\r\n*			status REGEXP \'Error|Abort\'	color:red;					Error/Abort\r\n*			status REGEXP \'Fail\'		color:brown;				Failure\r\n*			status == \'Completed\'	color:green;				Completed\r\n', 25),
	(52, 625, 'gbsrr', 'BSR', 'Global BSR per Retention', 'Global BSR per Retention', 'select  \r\nretention,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by retention', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nretention		Retention\r\nsessions		Sessions		sb			retention == \'%retention\'					retention == \'%retention\' || 				Show sessions for \'%retention\'\r\nibsr		iBSR		sb			retention == \'%retention\'					retention == \'%retention\' || ibsr < 100		Show initially failed sessions for \'%retention\'\r\nrestarts		Restarts		sb			retention == \'%retention\'					retention == \'%retention\' || restarts > 0		Show restarted sessions for \'%retention\'\r\nbsr		BSR		sb			retention == \'%retention\'					retention == \'%retention\' || bsr < 100			Show failed sessions for \'%retention\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 25),
	(53, 660, 'dbsrr', 'BSR', 'Daily BSR per Retention', 'Daily BSR per Retention', 'select  \r\nbw_day as day,\r\nretention,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\ngroup by 1,2\r\norder by 1 desc,%order', 'day,retention', 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nday		Backup day\r\nretention		Retention\r\nsessions		Sessions		sb			day == \'%day\' || retention == \'%retention\'			retention == \'%retention\' || bw_day == \'%day\'			Show \'%retention\' sessions from \'%day\'\r\nibsr		iBSR		sb			day == \'%day\' || retention == \'%retention\'			retention == \'%retention\' || bw_day == \'%day\' || ibsr < 100	Show initially failed \'%retention\' sessions from \'%day\'\r\nrestarts		Restarts		sb			day == \'%day\' || retention == \'%retention\'			retention == \'%retention\' || bw_day == \'%day\' || restarts > 0	Show restarted \'%retention\' sessions from \'%day\'\r\nbsr		BSR		sb			day == \'%day\' || retention == \'%retention\'			retention == \'%retention\' || bw_day == \'%day\' ||  bsr < 100	Show failed \'%retention\' sessions from \'%day\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n*			day >= -1 day		color:black;background:floralwhite;			Today\r\n', 14),
	(54, 705, 'hbsrr', 'BSR', 'Hourly BSR per Retention', 'Hourly BSR per Retention', 'select (date(starttime) + interval hour(starttime) hour) as time,\r\nretention,\r\ncount(sessionid) as sessions,\r\nround(avg(ibsr),1) as ibsr,\r\ncast(sum(restarts) as unsigned integer) as restarts,\r\nround(avg(bsr),1) as bsr\r\nfrom _sessions_aggregated\r\n%where\r\ngroup by 1,2\r\norder by 1 desc,%order', 'time,retention', 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ntime		Time\r\nretention		retention\r\nsessions		Sessions		sb			retention == \'%retention\' || time == \'%time\'			retention == \'%retention\' || starttime REGEXP \'%time\'				Show \'%retention\' sessions from \'%time\'\r\nibsr		iBSR		sb			retention == \'%retention\' || time == \'%time\'			retention == \'%retention\' || starttime REGEXP \'%time\' || ibsr < 100			Show initially failed \'%retention\' sessions from \'%time\'\r\nrestarts		Restarts		sb			retention == \'%retention\' || time == \'%time\'			retention == \'%retention\' || starttime REGEXP \'%time\' || restarts > 0		Show restarted \'%retention\' sessions from \'%time\'\r\nbsr		BSR		sb			retention == \'%retention\' || time == \'%time\'			retention == \'%retention\' || starttime REGEXP \'%time\' ||  bsr < 100			Show failed \'%retention\' sessions from \'%time\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			bsr >= 0			color:red;background:salmon;			less than 75%\r\n*			bsr >= 75		color:red;background:lightpink;			75%\r\n*			bsr >= 90		color:salmon;background:gold;			90%\r\n*			bsr >= 95		color:green;background:lawngreen;			95%\r\n*			bsr >= 98		color:green;background:palegreen;			98%\r\n', 24),
	(55, 515, 'devu', NULL, 'Device Utilization', 'Device Utilization', 'select * from _device_utilization', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\nstarttime		Start Time\r\nduration		Duration\r\nendtime		End Time\r\nlibrary		Library\r\nlockname		Lock Name\r\ndevice		Device Name\r\ngbwritten		Written (GB)\r\nperformance	Perf (GB/h)\r\ncellserver		Cell Server\r\nsessionid		Session ID	sa			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show session \'%sessionid\'\r\nspecification	Specification Name\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			performance <= 400	color:green;background:lawngreen;			less than 400 GB/h\r\n*			performance >= 400	color:green;background:palegreen;			more than 400 GB/h\r\n', 25),
	(56, 0, 'cellservers', NULL, 'Cell Servers', 'List of Cell Servers', 'select * from config_cellservers', NULL, 0, 0, '#field_name	#field_title	#field type		#field contents\r\n#----------	#------------	#------------------------	#------------------------\r\nid\r\nname		Cell Server Name	P			NONE	NONE\r\nlocaltime\r\ntimezone\r\nhost\r\nos\r\nphp\r\ndp\r\nmaintenance\r\nactive\r\ndown\r\nmmd_local\r\nclients\r\nspecifications\r\nsessions_24h\r\nbsr_sessions_24h\r\nbsr_24h\r\nsessions_1m\r\nbsr_sessions_1m\r\nbsr_1m\r\nerrors_24h\r\nvalid_since	Created		R			NONE	NONE\r\nupdated_on	Updated		R			NONE	NONE\r\nvalid_until	Obsoleted?	R			NONE	NONE\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			valid_until == \'\'		color:green;background:palegreen;			Not yet\r\n*			valid_until > \'\'		color:white;background:gray;				Yes, when\r\n', 25),
	(57, 0, 'mediaservers', NULL, 'Media Servers', 'List of Media Servers', 'select * from config_mediaservers', NULL, 0, 0, '#field_name	#field_title	#field_type		#filed_contents\r\n#----------	#------------	#------------------------	#------------------------\r\nid\r\nname		Media Server Name	P			NONE		NONE\r\ncellserver		MOM/Cell Server	C			CELLSERVERS	NONE\r\nvalid_since	Created		R			NONE		NONE\r\nupdated_on	Updated		R			NONE		NONE\r\nvalid_until	Obsoleted?	R			NONE		NONE\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			valid_until == \'\'		color:green;background:palegreen;			Not yet\r\n*			valid_until > \'\'		color:white;background:gray;				Yes, when\r\n', 25),
	(58, 0, 'customers', NULL, 'Customers', 'List of Customers', 'select * from config_customers', NULL, 0, 0, '#field_name	#field_title		#field_type		#filed_contents\r\n#----------	#------------		#------------------------	#------------------------\r\nid\r\nname		Customer Name		P			NONE	NONE\r\nspecification	Specification substring\r\nfqdn		FQDN substring\r\nclients\r\nspecifications\r\nsessions_24h\r\nbsr_sessions_24h\r\nbsr_24h\r\ngbwritten_24h\r\nsessions_1m\r\nbsr_sessions_1m\r\nbsr_1m\r\ntbwritten_1m\r\nvalid_since	Created			R			NONE	NONE\r\nupdated_on	Updated			R			NONE	NONE\r\nvalid_until	Obsoleted?		R			NONE	NONE\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			valid_until == \'\'		color:green;background:palegreen;			Not yet\r\n*			valid_until > \'\'		color:white;background:gray;				Yes, when\r\n', 25),
	(59, 0, 'retentions', NULL, 'Retentions', 'List of retentions', 'select * from config_retentions', NULL, 0, 0, '#field_name	#field_title	#field_type			#filed_contents\r\n#----------	#------------	#------------------------		#------------------------\r\nid\r\nname		Retention Name		P			NONE		NONE\r\ncustomer		Customer Name		C			CUSTOMERS	NONE\r\nretention		Protection (Days)\r\nrestarthours	Restart Window (Hours)\r\nperiodicity	Periodicity (Days)\r\nticket_threshold	Ticket (Failures)\r\nspecification	Specification substring\r\nvalid_since	Created			R			NONE		NONE\r\nupdated_on	Updated			R			NONE		NONE\r\nvalid_until	Obsolelted?		R			NONE		NONE\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			valid_until == \'\'		color:green;background:palegreen;			Not yet\r\n*			customer > \'\'		color:green;background:lawngreen;			Customer specific\r\n*			name == General"\'		color:white;background:silver;			General (not in BSR)\r\n*			name == \'Excluded"\'	color:greenyellow;background:darkgreen;		Excluded from BSR\r\n*			valid_until > \'\'		color:white;background:gray;				Yes, when\r\n', 25),
	(60, 0, 'scheduler', NULL, 'Scheduler', 'List of schedules', 'select * from config_scheduler', NULL, 0, 0, '#field_name	#field_title	#field_type		#filed_contents\r\n#----------	#------------	#------------------------	#------------------------\r\nid\r\ndate		Date\r\ntime		Time\r\nname		Schedule Name	P			NONE			NONE\r\ntype		Type		C			CMD|PAGE|SOURCE	NONE\r\nparam1		Report/Command\r\nparam2		Time Period	C			TIMEPERIODS		NONE\r\nparam3		Customer		C			CUSTOMERS		NONE\r\nparam4		Recipient (TO)\r\nparam5		Recipient (CC)\r\nparam6		Format		C			CSV|HTML		NONE\r\nvalid_since	Created		R			NONE			NONE\r\nupdated_on	Updated		R			NONE			NONE\r\nvalid_until	Obsoleted?	R			NONE			NONE\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			valid_until == \'\'		color:green;background:palegreen;			Not yet\r\n*			type == \'SOURCE\'		color:green;background:palegreen;			Standard Report\r\n*			type ==  \'PAGE\'		color:green;background:lawngreen;			Filtered Report\r\n*			type == \'CMD\'		color:blue;background:lightblue;			External Command\r\n*			valid_until > \'\'		color:white;background:gray;				Yes, when\r\n', 25),
	(61, 0, 'settings', NULL, 'Settings', 'Settings', 'select * from config_settings', NULL, 0, 0, '#field_name	#field_title	#field_type		#filed_contents\r\n#----------	#------------	#------------------------	#------------------------\r\nid\r\ncellserver\r\nname		Name		P			NONE	NONE\r\nvalue		Value\r\ndescription	Description	R			NONE	NONE\r\nvalid_since	Created		R			NONE	NONE\r\nupdated_on	Updated		R			NONE	NONE\r\nvalid_until	Obsoleted?	R			NONE	NONE\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			valid_until == \'\'		color:green;background:palegreen;			Not yet\r\n*			valid_until > \'\'		color:white;background:gray;				Yes, when\r\n', 25),
	(62, 0, 'timeperiods', NULL, 'Time periods', 'List of time periods', 'select * from config_timeperiods', NULL, 0, 0, '#field_name	#field_title	#field_type		#filed_contents\r\n#----------	#------------	#------------------------	#------------------------\r\nid\r\nname		Name		P			NONE	NONE\r\nvalue		Value\r\nord		Order\r\nvalid_since	Created		R			NONE	NONE\r\nupdated_on	Updated		R			NONE	NONE\r\nvalid_until	Obsoleted?	R			NONE	NONE\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			valid_until == \'\'		color:green;background:palegreen;			Not yet\r\n*			valid_until > \'\'		color:white;background:gray;				Yes, when\r\n', 25),
	(63, 160, 'bvcs', 'Cell Servers', 'Backup Volume per Cell Servers', 'Backup Volume data per Cell Server', 'select * from _backup_volume_cellserver', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server\r\nsessions		Sessions		sa			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show sessions for Cell Server \'%cellserver\'\r\ntbwritten		Written (TB)\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			cellserver == \'\'		background:silver;					None\r\n*			cellserver != \'\'		background:lightgreen;color:green;			Assigned\r\n', 25),
	(64, 560, 'bvl', 'Hardware', 'Backup Volume per library', 'Backup volume data per library', 'select * from _backup_volume_library', NULL, 1, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\nlibrary		Library\r\nsessions		Sessions\r\ndevices		Devices\r\ntbwritten		Written (TB)\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			library == \'\'		background:silver;					None\r\n*			library != \'\'		background:lightgreen;color:green;			Assigned\r\n', 25),
	(65, 230, 'cmo', 'Customers', 'Clients missing Objects', 'Clients missing Objects', 'select * from _clients_missing_objects', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomer		Customer\r\ncellserver		Cell Server\r\nclient		Client\r\ntype		Type\r\nspecifications	Specifications	s1			cellserver == \'%cellserver\' || type == \'%type\' || client == \'%client\'	cellserver == \'%cellserver\' || hostnames REGEXP \'%client\'	Show specifications for \'%client\'\r\nmountpoints	Objects		o			client == \'%client\' || type == \'%type\'				client == \'%client\' || type == \'%type\' 			Show \'%type\' mountpoints for \'%client\'\r\nmountpoint	Mount Point\r\ndescription	Description\r\nnewest_mountpoint	Newest		ov			client == \'%client\' || mountpoint == \'%mountpoint\'		client == \'%client\' || mountpoint REGEXP \'%mountpoint\' || starttime REGEXP \'%newest_mountpoint\'	Show newest version for \'%mountpoint\' on  \'%client\'\r\nnewest_client	Expected\r\ndays		Days\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			days > 0			color:green;background:lawngreen;			up to 30 days\r\n*			days > 30		color:green;background:greenyellow;			30 to 60 days\r\n*			days > 60		color:salmon;background:gold;			60 to 90 days\r\n*			days > 90		color:red;background:salmon;			more than 90 days\r\n', 25),
	(66, 340, 'sg', 'Specifications', 'Specification groups', 'List of specification groups', 'select * from _groups', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	sg			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only groups for \'%cellserver\'\r\ncustomer		Customer		sg			customer == \'%customer\'					customer == \'%customer\'					Show only groups for  \'%customer\'\r\ndpgroup		Group		\r\nspecifications	Specifications	s1			dpgroup == \'%dpgroup\'					cellserver == \'%cellserver\' || dpgroup == \'%dpgroup\'		Show specifications for  Cell Server \'%cellserver\' and group \'%dpgroup\'\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			customer > \' \'		color:green;background:lightgreen;		Normal\r\n*			customer < \' \'		color:red;background:lightpink;		No customer\r\n', 25),
	(67, 350, 'cl', 'Specifications', 'Copy lists', 'List of scheduled copy lists', 'select * from _copylists', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	cl			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show copy lists for \'%cellserver\'\r\nname		Copy list		cld			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || name == \'%name		Show copy list details\r\ncustomer		Customer		cl			customer == \'%customer\'					customer == \'%customer\'				Show only copy lists for  \'%customer\'\r\nprotection	Protection\r\ncopylist\r\nschedule\r\ndl_group		Group\r\ndlcount		Datalists\r\ndevicecount	Devices\r\ndatalists\r\ndevices\r\nnextexecution	Next Execution\r\nperiodicity	Periodicity\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			periodicity > 0		color:green;background:lightgreen;		Successful\r\n*			customer == \'\'		color:red;					No customer\r\n*			nextexecution == \'\'		background:lightpink;			No next schedule\r\n', 25),
	(68, 360, 'clc', 'Specifications', 'Copy lists with content', 'List of scheduled copy lists with content', 'select * from _copylists', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	clc			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show copy lists for \'%cellserver\'\r\nname		Copy list		cld			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || name == \'%name		Show copy list details\r\ncustomer		Customer		clc			customer == \'%customer\'					customer == \'%customer\'				Show only copy lists for  \'%customer\'\r\nprotection	Protection\r\ncopylist\r\nschedule\r\ndl_group		Group\r\ndlcount\r\ndatalists		Specifications\r\ndevicecount\r\ndevices		Devices\r\nnextexecution	Next Execution\r\nperiodicity	Periodicity\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			periodicity > 0		color:green;background:lightgreen;		Successful\r\n*			customer == \'\'		color:red;					No customer\r\n*			nextexecution == \'\'		background:lightpink;			No next schedule\r\n', 25),
	(69, 370, 'cld', 'Specifications', 'Copy lists with full details', 'List of scheduled copy lists with full details', 'select * from _copylists', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	cl			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show copy lists for \'%cellserver\'\r\nname		Copy list\r\ncustomer		Customer		cl			customer == \'%customer\'					customer == \'%customer\'				Show only copy lists for  \'%customer\'\r\nprotection	Protection\r\ncopylist		Copy list file\r\nschedule		Schedule file\r\ndl_group		Group\r\ndlcount\r\ndatalists		Specifications\r\ndevicecount\r\ndevices		Devices\r\nnextexecution	Next Execution\r\nperiodicity	Periodicity\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			periodicity > 0		color:green;background:lightgreen;		Successful\r\n*			customer == \'\'		color:red;					No customer\r\n*			nextexecution == \'\'		background:lightpink;			No next schedule\r\n', 25),
	(70, 380, 'scl', 'Specifications', 'Specification - Copy list', 'Specification linked to Copy list', 'select * from _specification_copylist', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	scl			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only specifications for \'%cellserver\'\r\nspecification	Specification\r\ndpgroup		Group\r\ncustomer		Customer		scl			customer == \'%customer\'					customer == \'%customer\'					Show only specifications for  \'%customer\'\r\nretention		Retention		scl			retention == \'%retention\'					retention == \'%retention\'					Show only \'%retention\' specifications\r\ntype		Type		scl			type == \'%type\'						type == \'%type\'						Show only \'%type\' specifications\r\nprotection	Protection\r\nhosts		\r\nhostnames	Host Names	scl			hostnames == \'%hostnames\'					hostnames REGEXP \'%hostnames\'				Show only specifications for \'%hostnames\'\r\ncopylist		Copy list		scl			copylist == \'%copylist\'					copylist == \'%copylist\'					Show only specifications for \'%copylist\'\r\nclcustomer	Customer\r\nclprotection	Protection\r\nclgroup		Group\r\ndlcount		Datalists\r\ndevicecount	Devices\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			hosts > 0			color:green;background:lightgreen;		In Copy list\r\n*			copylist == \'\'		background:lawngreen;			Not in Copy list\r\n*			customer == \'\'		color:red;					No customer\r\n', 25),
	(71, 345, 'ss', 'Specifications', 'Specifications by status', 'Specifications breakdown by their statuses', 'select * from _specification_status_percent', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	ss			specification == \'%specification\'				cellserver == \'%cellserver\'				Show specifications for \'%cellserver\'\r\ncustomer		Customer		ss			specification == \'%specification\'				customer == \'%customer\'				Show specifications for \'%customer\'\r\nspecification	Specification	s1			specification == \'%specification\'				cellserver == \'%cellserver\' || name == \'%specification\'	Show specification \'%specification\'\r\nretention		Retention\r\ntype		Type\r\nsessionid	Last SID\r\nsessions		Sessions		sb			specification == \'%specification\'				cellserver == \'%cellserver\' || specification == \'%specification\'	Show sessions for \'%specification\'\r\ncompleted	Complete%\r\nfailures		wFailure%\r\nerrors		wError%\r\naborted		Abort%\r\nfailed		Fail%', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			aborted > 0		color:black;background:silver;		Mostly aborted\r\n*			failed > 0			color:red;background:lightsalmon;		Mostly failed\r\n*			errors > 0		color:green;background:greenyellow;		Mostly completed with errors\r\n*			failures > 0		color:brown;background:gold;		Mostly completed with failures\r\n*			completed > 97		color:green;background:lightgreen;		Mostly successful\r\n*			completed == 100		color:green;background:palegreen;		100% Successful\r\n*			sessions == 0		color:black;background:silver;		No sessions\r\n', 25),
	(80, 800, 'a0', 'Auditing', 'Sessions running too long', 'Sessions running longer than 24 hours', 'select * from _omnistat where starttime<(now()-interval 24 hour)', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	a0			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show running sessions for \'%cellserver\'\r\nsessionid		SessionID\r\ntype		Type		a0			type == \'%type\'						type == \'%type\'					Show running \'%type\' sessions\r\nstatus		Status\r\nsessionowner	\r\nstarttime		Start Time\r\nduration		Duration\r\nlast		Last run\r\ncurrent		Run %\r\nspecification	Specification	s1			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || name == \'%specification\'	Show specification \'%specification\'\r\ndevices		Devices		rsd			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show devices for \'%sessionid\'\r\nactive_devices	Active\r\nad_delta		&#916;\r\ngbdone		Written (GB)\r\ndone_delta	&#916;\r\nobjects		Objects		rso			cellserver == \'%cellserver\' || sessionid == \'%sessionid\'		cellserver == \'%cellserver\' || sessionid == \'%sessionid\'	Show objects for \'%sessionid\'\r\nactive_objects	Active\r\nao_delta		&#916;\r\ngbtotal		Size (GB)\r\ngbprocessed	Done (GB)\r\nps_delta		&#916;\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			type == \'Backup\'		background:lightgreen;color:green;		Backup\r\n*			type == \'Copy\'		background:lightblue;color:blue;		Copy\r\n*			type == \'Restore\'		background:lemonchiffon;color:brown;		Restore\r\n*			type == \'Media\'		background:silver;color:black;		Media\r\n*			status == \'Aborted\'		color:red;					Aborted\r\n*			status == \'Queuing\'	color:brown;background:orange;		Queuing\r\n*			status REGEXP \'Error\'	color:red;					Error\r\n*			status REGEXP \'Failure\'	color:brown;				Failure\r\n*			status REGEXP \'Completed\'	font-weight:bold;				Completed\r\n*			type REGEXP \'Preview\'	background:gray;color:black;			Preview\r\n', 25),
	(81, 810, 'a1', 'Auditing', 'Specification errors', 'List of errors in specifications', 'select distinct cellserver,message from _log\r\nwhere timestamp>now()-interval 1 hour\r\nand message regexp \'error in spec\'\r\n', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	a1			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show errors for \'%cellserver\'\r\nmessage		Message\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			cellserver > \'\'		background:lightgreen;color:green;		Cell Server\r\n*			message REGEXP \'missing\'	background:red;color:white;			Missing\r\n*			message REGEXP \'not exist\'	background:lightpink;color:red;		Not scheduled\r\n*			message REGEXP \'not valid\'	background:gold;color:brown;		Invalid\r\n*			cellserver == \'localhost\'	color:blue;background:lightblue;		DB server\r\n', 25),
	(82, 820, 'a2', 'Auditing', 'Specifications not assigned', 'Specifications without customer or retention', 'select * from _specifications where customer is null or retention=\'General\'', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	a2			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only specifications for \'%cellserver\'\r\nname		Specification	s2			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || name == \'%name\'			Show specification details for \'%cellserver\' and \'%name\'\r\ndpgroup		Group\r\ncustomer		Customer		a2			customer == \'%customer\'					customer == \'%customer\'					Show only specifications for  \'%customer\'\r\nretention		Retention		a2			retention == \'%retention\'					retention == \'%retention\'					Show only \'%retention\' specifications\r\ntype		Type		a2			type == \'%type\'						type == \'%type\'						Show only \'%type\' specifications\r\nprotection	Protection\r\nspecification\r\nschedule\r\nhosts		\r\nhostnames	Host Names	a2			hostnames == \'%hostnames\'					hostnames REGEXP \'%hostnames\'				Show only specifications for \'%hostnames\'\r\nnextexecution	Next Execution\r\nperiodicity	\r\nlastsessionid	Last Session	s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || sessionid == \'%lastsessionid\'		Show last session for \'%cellserver\' and \'%name\'\r\nlastsuccessfulsessionid	Last Successful	s		cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || sessionid == \'%lastsuccessfulsessionid\'	Show last successful session for \'%cellserver\' and \'%name\'\r\nduration		Duration\r\ngbwritten		Written (GB)\r\nfailure		Failure+		s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || specification == \'%name\'		Show sessions for \'%cellserver\' and \'%name\'\r\nsuccess		Success+		s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || specification == \'%name\'		Show sessions for \'%cellserver\' and \'%name\'\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			customer == \'\'		color:red;					No customer\r\n*			nextexecution == \'\'		background:lightpink;			No next schedule\r\n*			lastsessionid == \'\'		background:red;color:white;			No last session\r\n*			success > 0		color:green;background:lightgreen;		Successful\r\n*			failure > 0		color:green;background:lawngreen;		Failing\r\n*			failure > 1		color:green;background:greenyellow;		Failing 2x\r\n*			failure > 2		color:salmon;background:gold;		Failing 3x\r\n*			failure > 5		color:red;background:salmon;		Failing 5x\r\n', 25),
	(83, 830, 'a3', 'Auditing', 'Specifications running too long', 'List of specifications which ran longer than 24 hours', 'select * from _specifications where  failure=0 and duration>\'24:00:00\'', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	a3			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only specifications for \'%cellserver\'\r\nname		Specification	s2			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || name == \'%name\'			Show specification details for \'%cellserver\' and \'%name\'\r\ndpgroup		Group\r\ncustomer		Customer		a3			customer == \'%customer\'					customer == \'%customer\'					Show only specifications for  \'%customer\'\r\nretention		Retention		a3			retention == \'%retention\'					retention == \'%retention\'					Show only \'%retention\' specifications\r\ntype		Type		a3			type == \'%type\'						type == \'%type\'						Show only \'%type\' specifications\r\nprotection	Protection\r\nspecification\r\nschedule\r\nhosts		\r\nhostnames	Host Names	a3			hostnames == \'%hostnames\'					hostnames REGEXP \'%hostnames\'				Show only specifications for \'%hostnames\'\r\nnextexecution	Next Execution\r\nperiodicity	\r\nlastsessionid	Last Session	s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || sessionid == \'%lastsessionid\'		Show last session for \'%cellserver\' and \'%name\'\r\nlastsuccessfulsessionid	Last Successful	s		cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || sessionid == \'%lastsuccessfulsessionid\'	Show last successful session for \'%cellserver\' and \'%name\'\r\nduration		Duration\r\ngbwritten		Written (GB)\r\nfailure		Failure+		s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || specification == \'%name\'		Show sessions for \'%cellserver\' and \'%name\'\r\nsuccess		Success+		s			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || specification == \'%name\'		Show sessions for \'%cellserver\' and \'%name\'\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			customer == \'\'		color:red;					No customer\r\n*			nextexecution == \'\'		background:lightpink;			No next schedule\r\n*			lastsessionid == \'\'		background:red;color:white;			No last session\r\n*			success > 0		color:green;background:lightgreen;		Successful\r\n*			failure > 0		color:green;background:lawngreen;		Failing\r\n*			failure > 1		color:green;background:greenyellow;		Failing 2x\r\n*			failure > 2		color:salmon;background:gold;		Failing 3x\r\n*			failure > 5		color:red;background:salmon;		Failing 5x\r\n', 25),
	(84, 840, 'a4', 'Auditing', 'Specifications running too often', 'Specifications which ran more than 24 times', 'select * from _specification_periodicity where sessions>24', NULL, 1, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	a4			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show only sessions for \'%cellserver\'\r\nspecification	Specification	s1			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || name == \'%specification\'	Show specification \'%specification\'\r\nsessions		Sessions		s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || specification == \'%specification\'	Show sessions for \'%specification\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			sessions > 0		color:green;background:palegreen;			Up to 12\r\n*			sessions > 12		color:red;background:lightpink;			More than 12\r\n*			sessions > 24		color:red;background:salmon;			More than 24\r\n', 25),
	(85, 850, 'a5', 'Auditing', 'Specifications failing', 'Enabled specifications with more than 2 consecutive failures', 'select * from _consecutive_failures where scheduled=\'yes\' and failures>2', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	a5			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only sessions for \'%cellserver\'\r\nspecification	Specification	s2			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || name == \'%specification\'		Show specification \'%specification\'\r\ncustomer		Customer		a5			customer == \'%customer\'					customer == \'%customer\'					Show only sessions for  \'%customer\'\r\nretention		Retention		a5			retention == \'%retention\'					retention == \'%retention\'					Show only \'%retention\' sessions\r\ntype		Type		a5			type == \'%type\'						type == \'%type\'						Show only \'%type\' sessions\r\nscheduled	Scheduled?	a5			scheduled == \'%scheduled\'					scheduled == \'%scheduled\'					Show only scheduled sessions\r\nlastfailure		Last failure	s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || sessionid == \'%lastfailure\'		Show last failure for \'%cellserver\' and \'%specification\'\r\nlastsuccess	Last successful	s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || sessionid == \'%lastsuccess\'		Show last successful session for \'%cellserver\' and \'%specification\'\r\nfailures		Failures		s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || specification == \'%specification\'	Show failures for \'%cellserver\' and \'%specification\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			customer == \' \'		color:red;						None\r\n*			failures > 0		color:green;background:lawngreen;			Failing\r\n*			failures > 1		color:green;background:greenyellow;			Failing 2x\r\n*			failures > 4		color:salmon;background:gold;			Failing 5x\r\n*			failures > 6		color:red;background:salmon;			Failing 7x\r\n*			scheduled == \'No\'		background:silver;color:gray;				Not scheduled\r\n', 25),
	(86, 860, 'a6', 'Auditing', 'Specifications not running', 'Enabled specifications not running within defined time', 'select * from _did_not_run where schedule=\'enabled\'', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition						#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------				#------------------------------------------------\r\ncellserver		Cell Server	a6			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'					Show only specifications for \'%cellserver\'\r\nspecification	Specification	s1			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || name == \'%specification\'		Show specification \'%specification\'\r\ncustomer		Customer		a6			customer == \'%customer\'					customer == \'%customer\'					Show only specifications for  \'%customer\'\r\nretention		Retention		a6			retention == \'%retention\'					retention == \'%retention\'					Show only \'%retention\' specifications\r\ntype		Type		a6			type == \'%type\'						type == \'%type\'						Show only \'%type\' specifications\r\nperiodicity	Periodicity\r\nschedule		Schedule		a6			schedule == \'%schedule\'					schedule == \'%schedule\'					Show only specifications with \'%schedule\' schedules\r\nsessionid		Last session	s			cellserver == \'%cellserver\' || specification == \'%specification\'	cellserver == \'%cellserver\' || specification == \'%specification\'	Show sessions for \'%cellserver\' and \'%specification\'\r\ndaysago		Days ago\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			customer == \' \'		color:red;						None\r\n*			daysago > 0		color:green;background:lawngreen;			up to 3 days\r\n*			daysago > 3		color:green;background:greenyellow;			4 days\r\n*			daysago > 5		color:salmon;background:gold;			6 days\r\n*			daysago > 9		color:red;background:salmon;			10 days\r\n*			sessionid == \'\'		color:white;background:red;				Never run\r\n*			schedule == \'disabled\'	background:silver;color:gray;				Disabled\r\n*			schedule == \'missing\'	color:white;background:red;				Missing\r\n', 25),
	(87, 870, 'a7', 'Auditing', 'Copy list errors', 'List of errors in copy lists', 'select distinct cellserver,message from _log\r\nwhere timestamp>now()-interval 1 hour\r\nand message regexp \'error in copy\'\r\n', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	a7			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show errors for \'%cellserver\'\r\nmessage		Message\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			cellserver > \'\'		background:lightgreen;color:green;		Cell Server\r\n*			message REGEXP \'missing\'	background:red;color:white;			Missing\r\n*			message REGEXP \'not exist\'	background:lightpink;color:red;		Not scheduled\r\n*			message REGEXP \'not valid\'	background:gold;color:brown;		Invalid\r\n*			cellserver == \'localhost\'	color:blue;background:lightblue;		DB server\r\n', 25),
	(88, 880, 'a8', 'Auditing', 'Copy lists not assigned', 'List of scheduled copy lists without customer', 'select * from _copylists where customer is null', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	a8			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show copy lists for \'%cellserver\'\r\nname		Copy list		cld			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || name == \'%name		Show copy list details\r\ncustomer		Customer		a8			customer == \'%customer\'					customer == \'%customer\'				Show only copy lists for  \'%customer\'\r\nprotection	Protection\r\ncopylist\r\nschedule\r\ndl_group\r\ndlcount		Datalists\r\ndevicecount	Devices\r\ndatalists\r\ndevices\r\nnextexecution	Next Execution\r\nperiodicity	Periodicity\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			periodicity > 0		color:green;background:lightgreen;		Successful\r\n*			customer == \'\'		color:red;					No customer\r\n*			nextexecution == \'\'		background:lightpink;			No next schedule\r\n', 25),
	(89, 890, 'a9', 'Auditing', 'Copy lists not scheduled', 'List of scheduled copy lists that do not have a schedule', 'select * from _copylists where nextexecution is null', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	a9			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show copy lists for \'%cellserver\'\r\nname		Copy list		cld			cellserver == \'%cellserver\' || name == \'%name\'			cellserver == \'%cellserver\' || name == \'%name		Show copy list details\r\ncustomer		Customer		a9			customer == \'%customer\'					customer == \'%customer\'				Show only copy lists for  \'%customer\'\r\nprotection	Protection\r\ncopylist\r\nschedule\r\ndl_group\r\ndlcount		Datalists\r\ndevicecount	Devices\r\ndatalists\r\ndevices\r\nnextexecution	Next Execution\r\nperiodicity	Periodicity\r\n', '#field(s)_affected		#condition		#CSS					#description\r\n#---------------------		#---------------------		#------------------------------------------------	#------------------------------------------\r\n*			periodicity > 0		color:green;background:lightgreen;		Successful\r\n*			customer == \'\'		color:red;					No customer\r\n*			nextexecution == \'\'		background:lightpink;			No next schedule\r\n', 25),
	(90, 900, 'a10', 'Auditing', 'Clients not assigned', 'Clients not assigned to any customer', 'select * from _clients where customer is null', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncellserver		Cell Server	a10			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show clients for \'%cellserver\'\r\ncustomer		Customer		a10			customer == \'%customer\'					customer == \'%customer\'				Show clients for \'%customer\'\r\nname		Client Name\r\ntype		Type		a10			type == \'%type\'						type == \'%type\'					Show \'%type\' clients\r\nspecifications	Specifications	s1			cellserver == \'%cellserver\' || type == \'%type\' || name == \'%name\'			cellserver == \'%cellserver\' || hostnames REGEXP \'%name\'		Show specifications for \'%name\'\r\nmountpoints	Objects		o			name == \'%name\' || type == \'%type\'				client == \'%name\' || type == \'%type\' 			Show \'%type\' mountpoints for \'%name\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			type == \'BAR\'			background:palegreen;;color:darkblue;		BAR\r\n*			type == \'FileSystem\'		background:palegreen;color:green;		FileSystem\r\n*			type == \'WinFS\'			background:palegreen;color:darkgreen;	WinFS\r\n*			type == \'IDB\'			background:palegreen;color:blue;		IDB\r\n', 25),
	(91, 910, 'a11', 'Auditing', 'Clients missing objects', 'Clients missing objects for more than 2 days', 'select * from _clients_missing_objects where days>2', NULL, 0, 1, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomer		Customer\r\ncellserver		Cell Server	a11			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show clients for \'%cellserver\'\r\nclient		Client\r\ntype		Type\r\nspecifications	Specifications	s1			cellserver == \'%cellserver\' || type == \'%type\' || client == \'%client\'	cellserver == \'%cellserver\' || hostnames REGEXP \'%client\'	Show specifications for \'%client\'\r\nmountpoints	Objects		o			client == \'%client\' || type == \'%type\'				client == \'%client\' || type == \'%type\' 			Show \'%type\' mountpoints for \'%client\'\r\nmountpoint	Mount Point\r\ndescription	Description\r\nnewest_mountpoint	Newest		ov			client == \'%client\' || mountpoint == \'%mountpoint\'		client == \'%client\' || mountpoint REGEXP \'%mountpoint\' || starttime REGEXP \'%newest_mountpoint\'	Show newest version for \'%mountpoint\' on  \'%client\'\r\nnewest_client	Expected\r\ndays		Days\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			days > 0			color:green;background:lawngreen;			up to 30 days\r\n*			days > 30		color:green;background:greenyellow;			30 to 60 days\r\n*			days > 60		color:salmon;background:gold;			60 to 90 days\r\n*			days > 90		color:red;background:salmon;			more than 90 days\r\n', 25),
	(92, 920, 'a12', 'Auditing', 'Objects not assigned', 'Objects not assigned to any customer', 'select * from _objects where customer is null', NULL, 0, 0, '#field_name	#field_title	#link_report		#highlight_condition					#link_condition					#link_description\r\n#----------	#------------	#------------------------	#------------------------					#------------------------------------			#------------------------------------------------\r\ncustomer		Customer		a12			customer == \'%customer\'					customer == \'%customer\'				Show mountpoints for \'%customer\'\r\ncellserver		Cell Server	a12			cellserver == \'%cellserver\'					cellserver == \'%cellserver\'				Show mountpoints for \'%cellserver\'\r\nclient		Client		a12			client == \'%client\'						client == \'%client\'					Show mountpoints for \'%client\'\r\ntype		Type		a12			type == \'%type\'						type == \'%type\'					Show \'%type\' mountpoints\'\r\nname		Mount Point\r\ndescription	Description\r\nversions		Versions		ov			client == \'%client\' || name == \'%name\'				client == \'%client\' || type == \'%type\' || mountpoint REGEXP \'%name\'				Show all versions for \'%name\' on  \'%client\'\r\noldest		Oldest version	ov			client == \'%client\' || name == \'%name\'				client == \'%client\' || mountpoint REGEXP \'%name\' || starttime == \'%oldest\'	Show oldest version for \'%name\' on  \'%client\'\r\nnewest		Newest version	ov			client == \'%client\' || name == \'%name\'				client == \'%client\' || mountpoint REGEXP \'%name\' || starttime == \'%newest\'	Show newest version for \'%name\' on  \'%client\'\r\n', '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			versions > 0 		background:palegreen;				Available\r\n*			versions == 0		background:salmon;				None\r\n*			type == \'BAR\'		color:darkblue;					BAR\r\n*			type == \'FileSystem\'	color:green;					FileSystem\r\n*			type == \'WinFS\'		color:darkgreen;					WinFS\r\n*			type == \'IDB\'		color:blue;					IDB\r\n', 25),
	(100, 1000, 'q0', 'Auditing', 'QRS', 'QRS servers/RLI\'s', 'select * from audit.qrs', NULL, 0, 0, NULL, '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			HOST_NAME >= \'\'		color:green;background:palegreen;			Server in QRS\r\n*			HOST_NAME == \'\'		color:red;background:lightpink;			Server missing in QRS\r\n', 25),
	(101, 1001, 'q1', 'Auditing', 'QRS audit partial', 'QRS partially completed servers/RLI\'s', 'select * from audit.audit_partial', NULL, 0, 0, NULL, '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			STATUS == \'MISSING\'	color:red;background:lightpink;			Missing\r\n*			STATUS REGEXP \'WRONG\'	color:salmon;background:gold;			Wrong protection\r\n*			STATUS == \'EXCEPTION\'	color:green;background:greenyellow;			Exception\r\n*			STATUS REGEXP \'OK\'	color:green;background:palegreen;			All OK\r\n', 25),
	(102, 1002, 'q2', 'Auditing', 'QRS audit missing', 'QRS completely missing servers/RLI\'s', 'select * from audit.audit_missing', NULL, 0, 0, NULL, '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			STATUS == \'MISSING\'	color:red;background:lightpink;			Missing\r\n*			STATUS REGEXP \'WRONG\'	color:salmon;background:gold;			Wrong protection\r\n*			STATUS == \'EXCEPTION\'	color:green;background:greenyellow;			Exception\r\n*			STATUS REGEXP \'OK\'	color:green;background:palegreen;			All OK\r\n', 25),
	(103, 1003, 'q3', 'Auditing', 'QRS audit complete', 'QRS fully completed servers/RLI\'s', 'select * from audit.audit_complete', NULL, 0, 0, NULL, '#field(s)_affected		#condition		#CSS						#description\r\n#---------------------		#---------------------		#------------------------------------------------		#------------------------------------------\r\n*			STATUS == \'MISSING\'	color:red;background:lightpink;			Missing\r\n*			STATUS REGEXP \'WRONG\'	color:salmon;background:gold;			Wrong protection\r\n*			STATUS == \'EXCEPTION\'	color:green;background:greenyellow;			Exception\r\n*			STATUS REGEXP \'OK\'	color:green;background:palegreen;			All OK\r\n', 25);

DROP TABLE IF EXISTS config_retentions;
CREATE TABLE config_retentions (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(16) NOT NULL DEFAULT 'Default',
  customer varchar(32) DEFAULT NULL,
  retention int(3) unsigned NOT NULL DEFAULT '7',
  restarthours int(3) unsigned NOT NULL DEFAULT '12',
  periodicity int(3) unsigned NOT NULL DEFAULT '1',
  ticket_threshold int(3) unsigned NOT NULL DEFAULT '1',
  specification varchar(64) DEFAULT '_default_',
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name_customer (name,customer),
  KEY name (name),
  KEY customer (customer),
  KEY specification (specification)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='List of retentions';

INSERT INTO config_retentions (id,name,customer,retention,restarthours,periodicity,ticket_threshold,specification,valid_since,updated_on) VALUES 
	(1,'General',NULL,14,12,2,2,NULL,'2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(2,'Daily',NULL,14,12,2,1,'_daily','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(3,'Weekly',NULL,28,72,7,1,'_weekly','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(4,'Monthly',NULL,365,168,31,1,'_monthly','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(5,'Yearly',NULL,999,168,365,1,'_yearly','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(6,'Special',NULL,14,72,7,1,'_special','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(7,'Excluded',NULL,14,12,1,2,'(_arch|_trans|_tlog|hp_test)','2012-12-31 23:00:00','2012-12-31 23:00:00');

DROP TABLE IF EXISTS config_scheduler;
CREATE TABLE config_scheduler (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  date varchar(32) DEFAULT NULL,
  time varchar(32) NOT NULL DEFAULT 'NEVER',
  name varchar(64) NOT NULL DEFAULT 'Default Name',
  type enum('CMD','PAGE','SOURCE') DEFAULT 'SOURCE',
  param1 varchar(512) DEFAULT 'c',
  param2 varchar(128) DEFAULT NULL,
  param3 varchar(128) DEFAULT NULL,
  param4 varchar(128) DEFAULT NULL,
  param5 varchar(128) DEFAULT NULL,
  param6 enum('HTML','CSV') DEFAULT 'HTML',
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name (name)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='List of scheduled tasks';

DROP TABLE IF EXISTS config_scripts;
CREATE TABLE config_scripts (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(32) NOT NULL DEFAULT 'script',
  code longtext NOT NULL,
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name (name)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='Cell Server Scripts';

INSERT INTO config_scripts (id, name, code, valid_since, updated_on, valid_until) VALUES
	(1, 'config.ini.default', '[PHP and DataProtector paths]\r\n;PHP_HOME path on RHEL /usr/bin, on HPUX /opt/hpws22/apache/php/bin/ or /opt/php54/php/bin, on Windows (relative) php\r\nPHP_HOME                =/usr/bin\r\nOMNI_HOME               =/opt/omni\r\nOMNI_SERVER             =/etc/opt/omni/server\r\n;PHP_HOME                =php\r\n;OMNI_HOME               =C:\\Program Files\\OmniBack\r\n;OMNI_SERVER             =C:\\Program Data\\OmniBack\\Config\\Server\r\n\r\n[MySQL connection details]\r\nMYSQL_HOST              =%MYSQL_HOST%:3306\r\nMYSQL_USER              =script\r\nMYSQL_PASSWORD          =omniback\r\nMYSQL_DB                =mars30\r\n\r\n[3rd Party paths]\r\n;BACKUPMON               =/var/opt/OV/bin/instrumentation/\r\n;OMNI2ESL                =/opt/hps/upload/obcheck2esl/\r\n;ITO_FILE                =/var/opt/OV/backupmon/log/omniback_prio_check.ito\r\nBACKUPMON               =\r\nOMNI2ESL                =tmp\r\nITO_FILE                =tmp\\omniback_prio_check.ito\r\n\r\n[Common Parameters]\r\nTIME_ZONE               =%TIME_ZONE%\r\nITO_IGNORE              =_final,_test,test_,_tlogs\r\nITO_PRIORITY            =high\r\nRECYCLE_FAILURES        =yes\r\nDECIMAL                 ="."\r\nTIME_FORMAT             =Y-m-d H:i:s\r\nDEBUG                   =0\r\n;SILENT_WINDOW           =19:00 4:00\r\nSERVICE_PRIORITY        =critical\r\n;OMNITRIG on UX, OMNIINET on WIN\r\nSERVICE_LIST            =CRS,MMD,KMS,HPDP-IDB,HPDP-IDB-CP,HPDP-AS,OMNITRIG\r\n;SERVICE_LIST            =CRS,MMD,KMS,HPDP-IDB,HPDP-IDB-CP,HPDP-AS,OMNIINET\r\nLICENSEWARNING_PRIORITY =low\r\n;SESSIONERROR_PRIORITY   =high\r\nFREEMEDIA_PRIORITY      =low\r\nFREEMEDIA_IGNORE_POOL   ="default|protected|permanent|temp|test"\r\nTABLESPACELOW_PRIORITY  =critical\r\nMOUNTREQUEST_PRIORITY   =high\r\nDEVICEERROR_PRIORITY    =critical\r\nALARM_PRIORITY          =low\r\nCSASSFAILED_PRIORITY    =low\r\nMAILSLOTSFULL_PRIORITY  =low\r\nLICENSEWILLEXPIRE_PRIORITY=low\r\nHEALTHCHECKFAILED_PRIORITY=high\r\nDBCORRUPTED_PRIORITY    =critical\r\nDBPURGENEEDED_PRIORITY  =high\r\nDBBACKUPNEEDED_PRIORITY =critical\r\nUNEXPECTEDEVENTS_PRIORITY=low\r\nUSERCHECKFAILED_PRIORITY=low\r\n\r\n[Routine Cycles]\r\nROUTINE_LIBRARIES       =15:00\r\nROUTINE_DEVICES         =15:00\r\nROUTINE_MEDIA           =15:00\r\nROUTINE_SPECIFICATIONS  =+60\r\nROUTINE_OMNI2ESL        =+480\r\nROUTINE_CHECK_BACKUPS   =+60\r\nROUTINE_LOCKED_OBJECTS  =+5\r\nROUTINE_OMNISTAT        =+5\r\n\r\n[Optional Parameters]\r\n;CELLSERVER              =%CELLSERVER%\r\n;WORKERS                 =4\r\n;MAINTENANCE_FILE        =MAINT\r\n;TIMEOUT_MULTIPLIER      =1\r\n;OMNISTAT_DETAILS        =Backup\r\n', '2013-01-01 00:00:00', '2016-07-22 14:08:20', NULL),
	(2, 'mars.cmd', '@echo off\r\n\r\nREM MARS 3.0 MAIN SCRIPT\r\nREM DON\'T MODIFY ANYTHING BELOW THIS LINE -------------------------------------------------------------------------------\r\n\r\nsetlocal enabledelayedexpansion\r\npushd %~dp0\r\nset _timestamp=%date% %time%\r\nset _mars_home=%~dp0\r\nfor /F "tokens=1,* delims== " %%i in (\'type "%_mars_home%config.ini"\') do if "%%i" EQU "PHP_HOME" set _php_home=%%j\\\r\n\r\nif not exist "%_mars_home%log" mkdir "%_mars_home%log"\r\nif not exist "%_mars_home%queue" mkdir "%_mars_home%queue"\r\nif not exist "%_mars_home%tmp" mkdir "%_mars_home%tmp"\r\n\r\nset _actionlog=%_mars_home%log\\actions.log\r\nset _errorlog=%_mars_home%log\\errors.log\r\n\r\nif "%1" equ "" (\r\n    call :USAGE\r\n    goto :END\r\n)\r\nif "%1" equ "-n" (\r\n    echo Executing notification...\r\n    call :EXECUTE NOTIFICATION\r\n    goto :END\r\n)\r\nif "%1" equ "-s" (\r\n    echo Executing scheduler...\r\n    call :EXECUTE SCHEDULER\r\n    goto :END\r\n)\r\nif "%1" equ "-r" (\r\n    echo Executing routine \'%2\'...\r\n    call :EXECUTE ROUTINE %2\r\n    goto :END\r\n)\r\nif "%1" equ "-t" (\r\n    echo Executing test...\r\n    call :EXECUTE TEST\r\n    goto :END\r\n)\r\necho Error: Unknown/incomplete parameter \'%1\' provided.\r\necho %_timestamp% Error: Unknown/incomplete parameter \'%1\' provided.>>"%_errorlog%"\r\ncall :USAGE\r\ngoto :END\r\n\r\n:USAGE\r\n    echo.\r\n    echo MARS 3.0 usage: mars.cmd [ -r routine_name ^| -n ^| -s ^| -t ]\r\n    echo -r  manual routine start (requires routine name)\r\n    echo     Routine names:\r\n    echo       libraries\r\n    echo       devices\r\n    echo       media\r\n    echo       specifications\r\n    echo       check_backups\r\n    echo       locked_objects\r\n    echo       omnistat\r\n    echo -n  triggered from DP Notification\r\n    echo -s  used in crontab/scheduler\r\n    echo -t  manual installation test\r\n    echo.\r\n    goto :EOF\r\n\r\n:EXECUTE\r\n    powershell "Get-Process omnistat -ea SilentlyContinue | Where { $_.StartTime -lt (Get-Date).AddMinutes(-4) } | Stop-Process -Force" >nul 2>&1\r\n    "%_php_home%php.exe" "%_mars_home%mars.php" %*\r\n    if not exist "%_mars_home%mars.lock" (\r\n        if exist "%_mars_home%tmp\\*.tmp" del "%_mars_home%tmp\\*.tmp"\r\n    )\r\n    goto :EOF\r\n\r\n:END\r\n    endlocal\r\n    popd\r\n', '2013-01-01 00:00:00', '2016-10-14 13:10:55', NULL),
	(3, 'mars.sh', '#!/bin/sh\r\n\r\n# MARS 3.0 MAIN SCRIPT\r\n# DON\'T MODIFY ANYTHING BELOW THIS LINE -------------------------------------------------------------------------------\r\n\r\nusage() {\r\n    echo ""\r\n    echo "MARS 3.0 usage: mars.sh [ -r routine_name | -n | -s | -t ]"\r\n    echo "-r  manual routine start (requires routine name)"\r\n    echo "    Routine names:"\r\n    echo "      libraries"\r\n    echo "      devices"\r\n    echo "      media"\r\n    echo "      specifications"\r\n    echo "      check_bakcups"\r\n    echo "      locked_objects"\r\n    echo "      omnistat"\r\n    echo "-n  triggered from DP Notification"\r\n    echo "-s  used in crontab/scheduler"\r\n    echo "-t  manual installation test"\r\n    echo ""\r\n    exit 1\r\n}\r\n\r\nexecute() {\r\n	os=`uname`\r\n	if [[ "$os" = "HP-UX" ]]; then\r\n			now=`perl -e \'use POSIX;print strftime "%H:%M:%S",localtime time-(4*60);\'`\r\n	else\r\n			now=`date -d\'4 min ago\' +"%H:%M:%S"`\r\n	fi\r\n	for pid in `ps -ef | grep omnistat | grep -v sh | grep -v grep | awk \'{print $2}\'`; do\r\n			timestamp=`ps -ef | grep $pid | grep -v sh | grep -v grep | awk \'{print $5}\'`\r\n			if [[ "$now" > "$timestamp" ]]; then\r\n					kill $pid\r\n			fi\r\n	done\r\n	${_php_home}/php ${_mars_home}/mars.php $1 $2\r\n	[[ -f "${_mars_home}/mars.lock" ]]  || rm -f ${_mars_home}/tmp/*.tmp\r\n}\r\n\r\n_timestamp=$(date +"%Y-%m-%d_%H-%M-%S")\r\n_mars_home=${0%/*}\r\n_php_home=`grep ^PHP_HOME ${_mars_home}/config.ini | cut -d= -f2`\r\n\r\n[[ -d "${_mars_home}/log" ]]  || mkdir "${_mars_home}/log"\r\n[[ -d "${_mars_home}/queue" ]]  || mkdir "${_mars_home}/queue"\r\n[[ -d "${_mars_home}/tmp" ]]  || mkdir "${_mars_home}/tmp"\r\n\r\n_actionlog=${_mars_home}/log/actions.log\r\n_errorlog=${_mars_home}/log/errors.log\r\n\r\ncase "$1" in\r\n    "")\r\n        usage\r\n        ;;\r\n    -n)\r\n        echo "Notification was queued."\r\n        execute NOTIFICATION\r\n        ;;\r\n    -r)\r\n        echo "Routine \'$2\' was executed."\r\n        execute ROUTINE $2\r\n        ;;\r\n    -s)\r\n        echo "Scheduler was executed."\r\n        execute SCHEDULER\r\n        ;;\r\n    -t)\r\n        echo "Test was executed."\r\n        execute TEST\r\n        ;;\r\n    *)\r\n        echo "Error: Unknown/incomplete parameter \'$1\' provided."\r\n        echo "${_timestamp} Unknown/incomplete parameter \'$1\' provided." >> ${_errorlog}\r\n        usage\r\n        ;;\r\nesac\r\n', '2013-01-01 00:00:00', '2016-10-14 13:11:11', NULL),
	(4, 'mars.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\n\r\nrequire_once \'inc/application.php\';\r\n\r\n$mars = new mars_application( $GLOBALS[ \'argv\' ] );\r\n$mars->execute( );\r\n', '2013-01-01 00:00:00', '2015-08-18 10:40:42', NULL),
	(5, 'inc/application.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 APPLICATION PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'MARS_APPLICATION\', \'Monitoring and Reporting Script (MARS) v3.0\' );   \r\ndefine( \'MARS_COPYRIGHT\', \'&copy;2015 Juraj Brabec, HP Inc.\' );\r\ndefine( \'MARS_CONFIG\', \'config.ini\' );\r\ndefine( \'MARS_LOCKFILE\', \'mars.lock\' );\r\ndefine( \'MARS_LOG_ACTIONS\', \'log/actions.log\' );\r\ndefine( \'MARS_LOG_ERRORS\', \'log/errors.log\' );\r\ndefine( \'MARS_LOG_DEBUG\', \'log/debug.log\' );\r\ndefine( \'MARS_DURATION_PRECISION\', 2 );\r\ndefine( \'MARS_MAX_DURATION\', 3500 );\r\ndefine( \'MARS_OUTPUT\', \'(+%-2s) %s\' );\r\ndefine( \'MARS_SEVERITY_ACTION\', \'Action\' );\r\ndefine( \'MARS_SEVERITY_OK\', \'OK\' );\r\ndefine( \'MARS_SEVERITY_WARNING\', \'Warning\' );\r\ndefine( \'MARS_SEVERITY_ERROR\', \'Error\' );\r\ndefine( \'MARS_SEVERITY_DEBUG\', \'Debug\' );\r\ndefine( \'MARS_LOG_MAX_SIZE\', 10 * 1024 * 1024 );\r\ndefine( \'MARS_LOG_MESSAGE_LIMIT\', 256 );\r\ndefine( \'MARS_LOG_OLD\', \'%s.bak\' );\r\ndefine( \'MARS_LOG_TIMESTAMP\', \'Y-m-d_H-i-s\' );\r\ndefine( \'MARS_LOG\', \'%-19s %-5s (+%-5s) %s\' );\r\ndefine( \'MARS_ERROR_WRITING\', \'Error writing message: %s\' );\r\ndefine( \'MARS_PERMANENT_STRING\', \'Permanent\' );\r\ndefine( \'MARS_PERMANENT_DATE\', \'2038-01-19 03:14:07\' );\r\ndefine( \'MARS_ERROR_UNHANDLED_PARAMETER\', \'Unhandled parameter "%s".\' );\r\ndefine( \'MARS_ERROR\', \'Error: %s: %s\' );\r\ndefine( \'MARS_ERROR_CONFIG_MISSING\', \'Config file "%s" is missing.\' );\r\ndefine( \'MARS_DP7_MAIN_SERVICE\', \'RDS\' );\r\ndefine( \'MARS_DP8_MAIN_SERVICE\', \'HPDP-IDB\' );\r\ndefine( \'MARS_SERVICE_ALL\', \'All services\' );\r\ndefine( \'MARS_SERVICE_ACTIVE\', \'Active\' );\r\ndefine( \'MARS_SERVICE_DOWN\', \'Down\' );\r\ndefine( \'MARS_SERVICE_MAINTENANCE\', \'Maintenance\' );\r\ndefine( \'MARS_MMD_LOCAL\', \'CMMDB\' );\r\ndefine( \'MARS_ERROR_SERVICE_NOT_RUNNING\', \'Service "%s" not running.\' );\r\ndefine( \'MARS_ERROR_EXEC\', \'Cannot start command "%s".\' );\r\ndefine( \'MARS_ERROR_EXEC_TIMEOUT\', \'Timeout %s seconds in command "%s".\' );\r\ndefine( \'MARS_ERROR_EXEC_ERRORLEVEL\', \'Errorlevel %s in command "%s": "%s".\' );\r\ndefine( \'MARS_TIMEOUT_MULTIPLIER\', \'TIMEOUT_MULTIPLIER\' );\r\ndefine( \'MARS_OMNIDBUTIL_TIMEOUT\', 10 );\r\ndefine( \'MARS_OMNIDBUTIL_SHOW_CELL_NAME\', \'Catalog database owner: "(\\S+)"\' );\r\ndefine( \'MARS_ERROR_CELLSERVER_NOT_SET_UP\', \'Cell Server "%s" is not set up.\' );\r\ndefine( \'MARS_OMNISV_TIMEOUT\', 10 );\r\ndefine( \'MARS_OMNISV_VERSION\', \'Data Protector (\\S+): OMNISV, internal build (\\d+)\' );\r\ndefine( \'MARS_ERROR_SERVICE_NOT_ACTIVE\', \'DP Service %s is %s\' );\r\ndefine( \'MARS_ITO_DEFAULT_PRIORITY\', \'high\' );\r\ndefine( \'MARS_ITO_MESSAGE\', \'Creating "%s" ticket "%s".\' );\r\ndefine( \'MARS_ITO\', \'%s::%s;"%s";%s\' );\r\ndefine( \'MARS_ERROR_CANNOT_OPEN\', \'Cannot open file %s.\' );\r\ndefine( \'MARS_ERROR_CANNOT_WRITE\', \'Cannot write to file %s.\' );\r\ndefine( \'MARS_ERROR_CANNOT_CLOSE\', \'Cannot close file %s.\' );\r\ndefine( \'MARS_PS_TIMEOUT\', 10 );\r\ndefine( \'MARS_OMNISTAT_TIMEOUT\', 15 );\r\ndefine( \'MARS_OMNIRPT_TIMEOUT\', 15 );\r\ndefine( \'MARS_TEST\', \'Testing installation of PHP version %s on %s platform\' );\r\ndefine( \'MARS_TEST_MOD_NOT_SUPPORTED\', \'%-5s Mod "%s" not supported in PHP.\' );\r\ndefine( \'MARS_TEST_FILE_FOUND\', \'%-5s File "%s" found.\' );\r\ndefine( \'MARS_TEST_FILE_NOT_FOUND\', \'%-5s File "%s" not found.\' );\r\ndefine( \'MARS_TEST_CELLSERVER\', \'%-5s Cell Server is "%s".\' );\r\ndefine( \'MARS_TEST_OMNISTAT\', \'%-5s OMNISTAT.\' );\r\ndefine( \'MARS_TEST_SESSION\', \'%-5s Last completed backup SessionID is "%s".\' );\r\ndefine( \'MARS_TEST_OMNIRPT\', \'%-5s OMNIRPT.\' );\r\ndefine( \'MARS_TEST_SESSION_DETAILS\', \'      Session "%s" was "%s" and "%s".\' );\r\ndefine( \'MARS_TEST_NO_SESSION\', \'%-5s No session is available so far.\' );\r\ndefine( \'MARS_TEST_MYSQL\', \'%-5s Connected to MySQL on "%s".\' );\r\ndefine( \'MARS_TEST_NO_MYSQL\', \'%-5s No connection to MySQL on "%s": "%s".\' );\r\ndefine (\'UCS_4BE\', chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF));\r\ndefine (\'UCS_4LE\', chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00));\r\ndefine (\'UCS_2BE\', chr(0xFE) . chr(0xFF));\r\ndefine (\'UCS_2LE\', chr(0xFF) . chr(0xFE));\r\ndefine (\'UTF_8B\' , chr(0xEF) . chr(0xBB) . chr(0xBF));\r\n\r\ndefine( \'MARS_DEBUG_EXECUTION_STARTED\', \'Execution started ("%s").\' );\r\ndefine( \'MARS_DEBUG_EXECUTION_FINISHED\', \'Execution finished (%s sec.).\' );\r\ndefine( \'MARS_DEBUG_EXECUTION_NO_RESOURCE\', \'Execution failed: No resource.\' );\r\ndefine( \'MARS_DEBUG_EXECUTION_TIMED_OUT\', \'Execution timed out (%s sec.).\' );\r\n\r\ndefine( \'MARS_WORKERS\', 4 );\r\ndefine( \'MARS_DEBUG_WORKER_START\', \'Worker#%d/%d started cmd#%d/%d (%s).\' );\r\ndefine( \'MARS_DEBUG_WORKER_FINISH\', \'Worker#%d/%d finished cmd#%d/%d (%ss).\' );\r\n\r\nif ( !function_exists( \'sys_get_temp_dir\' ) ) {\r\n	function sys_get_temp_dir( ) {\r\n		if ( !empty( $_ENV[ \'TMP\' ] ) ) { return realpath( $_ENV[ \'TMP\' ] ); }\r\n		if ( !empty( $_ENV[ \'TMPDIR\' ] ) ) { return realpath( $_ENV[ \'TMPDIR\' ] ); }\r\n		if ( !empty( $_ENV[ \'TEMP\' ] ) ) { return realpath( $_ENV[ \'TEMP\' ] ); }\r\n		$tempfile = tempnam( __FILE__, \'\' );\r\n		if ( file_exists( $tempfile ) ) {\r\n			unlink( $tempfile );\r\n			return realpath( dirname( $tempfile ) );\r\n		}\r\n		return null;\r\n	}\r\n}\r\n\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n	$foreign_file = dirname( realpath( $GLOBALS[ \'argv\' ][ 0 ] ) ) . \'\\mars.sh\';\r\n	define( \'MARS_PROC_OPEN\', \'"%s"\' );\r\n	define( \'MARS_EXEC\', \'start "CMD" /B /WAIT %s\' );\r\n	define( \'MARS_OMNIDBUTIL_SHOW_CELL_NAME_CMD\', \'"%s\\omnidbutil.exe" -show_cell_name\' );\r\n	define( \'MARS_OMNISV_VERSION_CMD\', \'"%s\\omnisv.exe" -version\' );\r\n	define( \'MARS_OMNISV_STATUS_CMD\', \'"%s\\omnisv.exe" -status\' );\r\n	define( \'MARS_PS_CMD\', \'wmic process get CommandLine | findstr SCHEDULER | findstr -v findstr\' );\r\n	define( \'MARS_OMNISTAT_PREVIOUS_CMD\', \'"%s\\omnistat.exe" -previous -last 1\' );\r\n	define( \'MARS_OMNIRPT_SINGLE_SESSION_CMD\', \r\n		\'"%s\\omnirpt.exe" -report single_session -level critical -session %s -tab\' );\r\n} else {\r\n	$foreign_file = dirname( realpath( $GLOBALS[ \'argv\' ][ 0 ] ) ) . \'/mars.cmd\';\r\n	define( \'MARS_PROC_OPEN\', \'%s\' );\r\n	define( \'MARS_EXEC\', \'exec %s\' );\r\n	define( \'MARS_OMNIDBUTIL_SHOW_CELL_NAME_CMD\', \'"%s/omnidbutil" -show_cell_name\' );\r\n	define( \'MARS_OMNISV_VERSION_CMD\', \'"%s/omnisv" -version\' );\r\n	define( \'MARS_OMNISV_STATUS_CMD\', \'"%s/omnisv" -status\' );\r\n	define( \'MARS_PS_CMD\', \'ps -ef | grep SCHEDULER | grep -v grep\' );\r\n	define( \'MARS_OMNISTAT_PREVIOUS_CMD\', \'"%s/omnistat" -previous -last 1\' );\r\n	define( \'MARS_OMNIRPT_SINGLE_SESSION_CMD\', \r\n		\'"%s/omnirpt" -report single_session -level critical -session %s -tab\' );\r\n}\r\nfile_exists( $foreign_file ) && unlink( $foreign_file );\r\n\r\nrequire_once \'events.php\';\r\nrequire_once \'database.php\';\r\nrequire_once \'actions.php\';\r\nrequire_once \'notifications.php\';\r\nrequire_once \'routines.php\';\r\nrequire_once \'specifications.php\';\r\nrequire_once \'libraries.php\';\r\nrequire_once \'devices.php\';\r\nrequire_once \'media.php\';\r\nrequire_once \'copylists.php\';\r\n\r\nclass worker {\r\n	var $id;\r\n	var $name;\r\n	var $cid;\r\n	var $params;\r\n	var $starttime;\r\n	var $endtime;\r\n	var $duration;\r\n	var $output;\r\n	var $error;\r\n	var $stdout;\r\n	var $stderr;\r\n	var $process;\r\n	var $status;\r\n\r\n	public function __construct( $id, $cid, $params = array( ) ) {\r\n		if ( empty( $params[ \'CMD\' ] ) ) return false;\r\n		$this->id = $id;\r\n		$this->name = empty( $params[ \'NAME\' ] ) ? base64_encode( $params[ \'CMD\' ] ) : $params[ \'NAME\' ];\r\n		$this->cid = $cid;\r\n		$this->params = $params;\r\n		$this->starttime = microtime( true );\r\n		$this->endtime = 0;\r\n		$this->duration = 0;\r\n		$this->output = array( );\r\n		$this->error = array( );\r\n		$this->stdout = tempnam( sys_get_temp_dir( ), \'\' );\r\n		$this->stderr = tempnam( sys_get_temp_dir( ), \'\' );\r\n		$descriptorspec = array(\r\n				1 => array( \'file\', $this->stdout, \'w\' ),\r\n				2 => array( \'file\', $this->stderr, \'w\' ),\r\n		);\r\n		$this->process = proc_open( sprintf( MARS_PROC_OPEN, $params[ \'CMD\' ] ), $descriptorspec, $pipes );\r\n		if ( !is_resource( $this->process ) ) return false;\r\n		$this->status = proc_get_status( $this->process );\r\n	}\r\n\r\n	public function done( ) {\r\n		usleep( 1 );\r\n		$this->status = proc_get_status( $this->process );\r\n		return !$this->status[ \'running\' ];\r\n	}\r\n\r\n	public function finish( ) {\r\n		$this->endtime = microtime( true );\r\n		$this->duration = round( $this->endtime - $this->starttime, 2 );\r\n		$this->status = proc_get_status( $this->process );\r\n		proc_close( $this->process );\r\n		$contents = file_get_contents( $this->stderr );\r\n		!empty( $contents ) && $this->error = explode( PHP_EOL, $contents );\r\n		$contents = file_get_contents( $this->stdout );\r\n		!empty( $contents ) && $this->output = explode( PHP_EOL, $contents );\r\n		$this->output = array_merge( $this->output, $this->error );\r\n		unlink( $this->stdout );\r\n		unlink( $this->stderr );\r\n	}\r\n}\r\n\r\nclass workers {\r\n	var $workers;\r\n	var $wid;\r\n	var $queue;\r\n	var $cid;\r\n\r\n	public function __construct( $count = 1 ) {\r\n		$this->workers = array_fill(0, $count, NULL );\r\n		$this->wid = 0;\r\n		$this->queue = array( );\r\n		$this->cid = 0;\r\n	}\r\n\r\n	public function worker( $wid = NULL ) {\r\n		$wid == NULL && $wid = $this->wid;\r\n		if ( $wid < 0 or $wid >= count( $this->workers ) ) return false;\r\n		return $this->workers[ $wid ];\r\n	}\r\n\r\n	public function working( ) {\r\n		$i = 0;\r\n		foreach( $this->workers as $worker ) {\r\n			!empty( $worker ) && $i++;\r\n		}\r\n		return $i;\r\n	}\r\n\r\n	public function idle( ) {\r\n		$i = 0;\r\n		foreach( $this->workers as $worker ) {\r\n			empty( $worker ) && $i++;\r\n		}\r\n		return $i;\r\n	}\r\n\r\n	public function waiting( ) {\r\n		return ( $this->cid < count( $this->queue ) ) and ( $this->idle( ) > 0 );\r\n	}\r\n	\r\n	\r\n	public function next( ) {\r\n		$i = $this->wid + 1;\r\n		while( $i < count( $this->workers ) and empty( $this->workers[ $i ] ) ) {\r\n			$i++;\r\n		}\r\n		if ( $i == count( $this->workers ) ) {\r\n			$i = 0;\r\n			while( $i <= $this->wid  and empty($this->workers[ $i ] ) ) {\r\n				$i++;\r\n			}\r\n		}\r\n		if ( $i < 0 or $i >= count( $this->workers ) ) return false;\r\n		$this->wid = $i;\r\n		return $i;\r\n	}\r\n\r\n	public function start( ) {\r\n		if ( !$this->waiting( ) ) return false;\r\n		$i = 0;\r\n		while( $i < count( $this->workers ) and !empty( $this->workers[ $i ] ) ) {\r\n			$i++;\r\n		}\r\n		$params = $this->queue[ $this->cid ];\r\n		$worker = new worker( $i + 1, $this->cid + 1, $params );\r\n		if ( $worker ) {\r\n			$this->workers[ $i ] = $worker;\r\n		}\r\n		$this->cid++;\r\n		return $worker;\r\n	}\r\n\r\n	public function encode( $worker = NULL ) {\r\n		$worker === NULL && $worker = $this->worker( );\r\n		return serialize( $worker );\r\n	}\r\n\r\n	public function decode( $worker ) {\r\n		return unserialize( $worker );\r\n	}\r\n\r\n	public function done( ) {\r\n		$worker = $this->worker( );\r\n		return $worker ? $worker->done( ) : false;\r\n	}\r\n	\r\n	public function finish( ) {\r\n		$worker = $this->worker( );\r\n		$this->workers[ $this->wid ] = NULL;\r\n		$worker && $worker->finish( );\r\n		return $worker;\r\n	}\r\n\r\n	public function add( $params = array( ), $priority = false ) {\r\n		foreach ( $this->queue as $queue ) {\r\n			if ( $queue[ \'CMD\' ] == $params[ \'CMD\' ] ) return false;\r\n		}\r\n		if ( $priority ) {\r\n			array_splice( $this->queue, $this->cid, 0, array( $params ) );\r\n		} else {\r\n			$this->queue[ ] = $params;\r\n		}\r\n		return true;\r\n	}\r\n}\r\n\r\nclass mars_application {\r\n	var $name = MARS_APPLICATION;\r\n	var $root;\r\n	var $duration_precision = MARS_DURATION_PRECISION;\r\n	var $paramters;\r\n	var $micro_time;\r\n	var $start_time;\r\n	var $os;\r\n	var $dp;\r\n	var $config = array();\r\n	var $database;\r\n	var $cellserver;\r\n	var $service = array();\r\n	var $mmd_local;\r\n	var $down;\r\n	var $workers;\r\n\r\n	function mars_application( $parameters ) {\r\n		$this->micro_time = microtime( true );\r\n		$this->parameters = $parameters;\r\n		$this->root = dirname( realpath( $this->parameters[ 0 ] ) );\r\n		$this->hostname = php_uname( \'n\' );\r\n		$this->php = phpversion( );\r\n		mod_mysqli( ) && $this->php .= \'i\';\r\n		$this->os = php_uname( \'s\' );\r\n		$this->workers = NULL;\r\n	}\r\n\r\n	function output( $message ) {\r\n		print ( sprintf( MARS_OUTPUT, $this->get_duration( ), $message ) ) . PHP_EOL;\r\n	}\r\n\r\n	function log( $severity, $message ) {\r\n		switch ( $severity ) {\r\n			case MARS_SEVERITY_DEBUG:\r\n				$file = MARS_LOG_DEBUG;\r\n				break;\r\n			case MARS_SEVERITY_WARNING:\r\n			case MARS_SEVERITY_ERROR:\r\n				$file = MARS_LOG_ERRORS;\r\n				break;\r\n			case MARS_SEVERITY_ACTION:\r\n			default:\r\n				$file = MARS_LOG_ACTIONS;\r\n				break;\r\n		}\r\n		$log = $this->root . DIRECTORY_SEPARATOR . $file;\r\n		if ( file_exists( $log ) and ( filesize( $log ) > ( MARS_LOG_MAX_SIZE ) ) ) {\r\n			rename( $log, sprintf( MARS_LOG_OLD, $log ) );\r\n			clearstatcache( );\r\n		}\r\n		$this->append_file( $log, sprintf( MARS_LOG, date( MARS_LOG_TIMESTAMP ), \r\n			getmypid( ), $this->get_duration( ), $message ) );\r\n		if ( isset( $this->database ) and $this->database->is_connected( ) ) {\r\n			try {\r\n				$sql = "insert into mars_log (cellserver,pid,duration,severity,message) " \r\n					. "values (\'%cellserver\',%pid,%duration,\'%severity\',\'%message\');";\r\n				$values = array( \r\n					\'cellserver\' => $this->cellserver, \r\n					\'pid\' => getmypid( ), \r\n					\'duration\' => $this->get_duration( ), \r\n					\'severity\' => $severity, \r\n					\'message\' => $this->database->escape_string( \r\n						substr( $message, 0, MARS_LOG_MESSAGE_LIMIT ) ) );\r\n				$this->database->execute_query( $sql, $values );\r\n			}\r\n			catch ( exception $e ) {\r\n				$this->output( sprintf( MARS_ERROR_WRITING, $e->getmessage( ) ) );\r\n			}\r\n		}\r\n	}\r\n\r\n	function log_action( $message ) {\r\n		if ( trim( $message ) == \'\' ) return;\r\n		$this->log( MARS_SEVERITY_ACTION, $message );\r\n		$this->output( $message );\r\n	}\r\n\r\n	function log_warning( $message ) {\r\n		if ( trim( $message ) == \'\' ) return;\r\n		$this->log( MARS_SEVERITY_WARNING, $message );\r\n		$this->output( $message );\r\n	}\r\n\r\n	function log_error( $message ) {\r\n		if ( trim( $message ) == \'\' ) return;\r\n		$this->log( MARS_SEVERITY_ERROR, $message );\r\n		$this->output( $message );\r\n	}\r\n\r\n	function debug( $message ) {\r\n		if ( $this->config[ \'DEBUG\' ] != 1 ) return;\r\n		if ( trim( $message ) == \'\' ) return;\r\n		$this->log( MARS_SEVERITY_DEBUG, $message );\r\n		$this->output( $message );\r\n	}\r\n	\r\n	function parse_decimal( $decimal ) {\r\n		return str_replace( \',\', $this->config[ \'DECIMAL\' ], $decimal );\r\n	}\r\n\r\n	function parse_date( $date ) {\r\n		$date == MARS_PERMANENT_STRING && $date = MARS_PERMANENT_DATE;\r\n		$date = str_replace( \'. \', \'.\', $date );\r\n		if ( !strtotime( $date ) ) {\r\n			return \'\';\r\n		} else {\r\n			return date( $this->config[ \'TIME_FORMAT\' ], strtotime( $date ) );\r\n		}\r\n	}\r\n\r\n	function maintenance( ) {\r\n		$result = false;\r\n		if ( !empty( $this->config[ \'MAINTENANCE_FILE\' ] ) ) {\r\n			$file = $this->config[ \'MAINTENANCE_FILE\' ];\r\n			$result = ( file_exists( $file ) or file_exists( $this->root . DIRECTORY_SEPARATOR . $file ) );\r\n		}\r\n		$result && $this->debug( \'Maintenance file present.\' );\r\n		return $result;\r\n	}\r\n	\r\n	function execute() {\r\n		try {\r\n			date_default_timezone_set( @date_default_timezone_get( ) );\r\n			$this->read_config( );\r\n			!empty( $this->config[ \'TIME_ZONE\' ] ) && date_default_timezone_set( $this->config[ \'TIME_ZONE\' ] );\r\n			$this->start_time = date( $this->config[ \'TIME_FORMAT\' ] );\r\n			$this->workers = new workers( $this->config[ \'WORKERS\' ] );\r\n			switch ( strtoupper( $this->parameters[ 1 ] ) ) {\r\n				case \'NOTIFICATION\':\r\n					$event = new mars_event( $this );\r\n					$event->execute( );\r\n					break;\r\n				case \'ROUTINE\':\r\n					$this->connect( );\r\n					$this->update_status( );\r\n					$routine = new mars_routine( $this, $this->parameters[ 2 ] );\r\n					$routine->execute( false );\r\n					break;\r\n				case \'SCHEDULER\':\r\n					$this->connect( );\r\n					$this->update_status( );\r\n					$this->scheduler( );\r\n					break;\r\n				case \'TEST\':\r\n					$this->connect( );\r\n					$this->test_installation( );\r\n					break;\r\n				default:\r\n					throw new exception( sprintf( MARS_ERROR_UNHANDLED_PARAMETER, \r\n						$this->paramters[ 1 ] ) );\r\n					break;\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->log_error( sprintf( MARS_ERROR, $this->name, $e->getmessage( ) ) );\r\n		}\r\n	}\r\n\r\n	function connect() {\r\n		$this->cellserver = $this->get_cellserver( );\r\n		list( $host, $port ) = explode( \':\', sprintf( \'%s:%s\', $this->config[ \'MYSQL_HOST\' ], MYSQL_PORT ) );\r\n		empty( $port ) && $port = 3306;\r\n		$username = $this->config[ \'MYSQL_USER\' ];\r\n		$pwd = $this->config[ \'MYSQL_PASSWORD\' ];\r\n		if ( !mod_mysql( ) ) {throw new exception( MYSQL_NO_SUPPORT );}\r\n		if ( !mod_mysqli( ) ) {\r\n			$this->database = new mysql_database( sprintf( \'%s:%s\', $host, $port ), $username, $pwd );\r\n			$this->database->select_database( $this->config[ \'MYSQL_DB\' ] );\r\n		} else {\r\n			$this->database = new mysqli_database( $host, $username, $pwd, $this->config[ \'MYSQL_DB\' ], $port );\r\n		}\r\n		$sql = sprintf( "select id,down from config_cellservers " . \r\n			"where name=\'%s\' and valid_until is null", $this->cellserver );\r\n		$this->database->execute_query( $sql );\r\n		if ( $this->database->row_count == 0 ) {throw new exception( \r\n			sprintf( MARS_ERROR_CELLSERVER_NOT_SET_UP, $this->cellserver ) );}\r\n		$this->down = $this->database->rows[ 0 ][ \'down\' ];\r\n		$this->dp = $this->get_version( );\r\n		$this->check_omnisv_services( );\r\n		$this->mmd_local = stristr( $this->service[ \'MMD\' ], MARS_MMD_LOCAL ) ? 0 : 1;\r\n		while ( execute_actions( $this, \'UPDATESCRIPT\' ) );\r\n	}\r\n	\r\n	function get_duration() {\r\n		return round( microtime( true ) - $this->micro_time, $this->duration_precision );\r\n	}\r\n\r\n	function add_config_item( $key, $default ) {\r\n		$this->config[ $key ] = isset( $this->config[ $key ] ) ? \r\n			$this->config[ $key ] : $default;\r\n	}\r\n\r\n	function check_path( $path ) {\r\n		if ( realpath( $path ) ) return realpath( $path );\r\n		if ( realpath( $this->root . DIRECTORY_SEPARATOR . $path ) ) return realpath( $this->root . DIRECTORY_SEPARATOR . $path );\r\n		if ( mkdir( $path, 0777, true ) ) return $path;\r\n		return false;\r\n	}\r\n	\r\n	function read_config() {\r\n		$config_file = $this->root . DIRECTORY_SEPARATOR . MARS_CONFIG;\r\n		if ( !file_exists( $config_file ) ) {\r\n			throw new exception( sprintf( MARS_ERROR_CONFIG_MISSING, $config_file ) );\r\n		}\r\n		$this->config = array_change_key_case( parse_ini_file( $config_file ), CASE_UPPER );\r\n		$this->config[ \'OMNI2ESL\' ] = $this->check_path( $this->config[ \'OMNI2ESL\' ] );\r\n		$ito_file = explode( DIRECTORY_SEPARATOR, $this->config[ \'ITO_FILE\' ] );\r\n		$filename = array_pop( $ito_file );\r\n		$this->config[ \'ITO_FILE\' ] = $this->check_path( implode( DIRECTORY_SEPARATOR, $ito_file ) ) . DIRECTORY_SEPARATOR . $filename;\r\n		$this->add_config_item( \'OMNI_BIN\', \r\n			$this->config[ \'OMNI_HOME\' ] . DIRECTORY_SEPARATOR . \'bin\' );\r\n		if ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n			$this->add_config_item( \'OMNI_SBIN\', \r\n			$this->config[ \'OMNI_HOME\' ] . DIRECTORY_SEPARATOR . \'bin\' );\r\n		} else {\r\n			$this->add_config_item( \'OMNI_SBIN\', \r\n			$this->config[ \'OMNI_HOME\' ] . DIRECTORY_SEPARATOR . \'sbin\' );\r\n		}\r\n		$this->add_config_item( MARS_TIMEOUT_MULTIPLIER, 1 );\r\n		$this->add_config_item( \'WORKERS\', MARS_WORKERS );\r\n	}\r\n\r\n	function cache_command( $cmdline, $timeout = 0 ) {\r\n		$main_service = MARS_DP7_MAIN_SERVICE;\r\n		!isset( $this->service[ $main_service ] ) && $main_service = MARS_DP8_MAIN_SERVICE;\r\n		!isset( $this->service[ $main_service ] ) && $main_service = \'\';\r\n		if ( isset( $this->service[ $main_service ] ) \r\n			and !stristr( $this->service[ $main_service ], MARS_SERVICE_ACTIVE ) ) {\r\n			throw new exception( sprintf( MARS_ERROR_SERVICE_NOT_RUNNING, $main_service ) );\r\n		}\r\n		$this->debug( sprintf( MARS_DEBUG_EXECUTION_STARTED, $cmdline ) );\r\n		$exec = sprintf( MARS_EXEC, $cmdline );\r\n		$errorlevel = 0;\r\n		if ( $timeout == 0 ) {\r\n			$starttime = round( microtime( true ), $this->duration_precision );\r\n			$output = array();\r\n			exec( $exec, $output, $errorlevel );\r\n			$this->debug( sprintf( MARS_DEBUG_EXECUTION_FINISHED, round( microtime( true ) - $starttime, $this->duration_precision ) ) );\r\n		} else {\r\n			$timeout = $timeout * $this->config[ MARS_TIMEOUT_MULTIPLIER ];\r\n			$descriptorspec = array( \r\n				0 => array( \r\n					"pipe", \r\n					"r" ), \r\n				1 => array( \r\n					"pipe", \r\n					"w" ), \r\n				2 => array( \r\n					"pipe", \r\n					"w" ) );\r\n			$pipes = array();\r\n			$starttime = round( microtime( true ), $this->duration_precision );\r\n			$process = proc_open( $exec, $descriptorspec, $pipes );\r\n			if ( !is_resource( $process ) ) {\r\n				$this->debug( MARS_DEBUG_EXECUTION_NO_RESOURCE );\r\n				throw new exception( sprintf( MARS_ERROR_EXEC, $cmdline ) );\r\n			}\r\n			$status = proc_get_status( $process );\r\n			$output = \'\';\r\n			do {\r\n				$timeleft = $starttime + $timeout - round( microtime( true ), $this->duration_precision );\r\n				$timeleft < 0 && $timeleft = 0;\r\n				$read = array( \r\n					$pipes[ 1 ] );\r\n				$write = $exceptions = NULL;	\r\n				stream_select( $read, $write, $exeptions, $timeleft, NULL );\r\n				if ( !empty( $read ) ) {\r\n#					$starttime = time( );\r\n					$output .= fread( $pipes[ 1 ], 8192 );\r\n				}\r\n			} while ( !feof( $pipes[ 1 ] ) && $timeleft > 0 );\r\n			$status = proc_get_status( $process );\r\n			$errorlevel = $status[ \'exitcode\' ];\r\n			$output = explode( PHP_EOL, trim( $output ) );\r\n			fclose( $pipes[ 0 ] );\r\n			fclose( $pipes[ 1 ] );\r\n			if ( $timeleft <= 0 ) {\r\n				proc_terminate( $process );\r\n				$this->debug( sprintf( MARS_DEBUG_EXECUTION_TIMED_OUT, round( microtime( true ) - $starttime, $this->duration_precision ) ) );\r\n				throw new exception( sprintf( MARS_ERROR_EXEC_TIMEOUT, $timeout, $cmdline ) );\r\n			}\r\n			proc_close( $process );\r\n			$this->debug( sprintf( MARS_DEBUG_EXECUTION_FINISHED, round( microtime( true ) - $starttime, $this->duration_precision ) ) );\r\n		}\r\n#		if ( ( $errorlevel != 0 ) and ( $errorlevel != 2 ) and ( $errorlevel != 3 ) ) {\r\n#			throw new exception( sprintf( MARS_ERROR_EXEC_ERRORLEVEL, $errorlevel, $cmdline, \r\n#				implode( PHP_EOL, $output ) ) );\r\n#		}\r\n		return $output;\r\n	}\r\n\r\n	function get_cellserver() {\r\n		if ( isset( $this->config[ \'CELLSERVER\' ] ) ) {\r\n			$name = $this->config[ \'CELLSERVER\' ];\r\n		} else {\r\n			$lines = $this->cache_command( sprintf( MARS_OMNIDBUTIL_SHOW_CELL_NAME_CMD, \r\n				$this->config[ \'OMNI_SBIN\' ] ), MARS_OMNIDBUTIL_TIMEOUT );\r\n			foreach ( $lines as $line ) {\r\n				preg_match( sprintf( \'/%s/s\', MARS_OMNIDBUTIL_SHOW_CELL_NAME ), $line, $match ) && \r\n					list( $line, $name ) = $match;\r\n			}\r\n		}\r\n		return $name;\r\n	}\r\n\r\n	function get_version() {\r\n		$lines = $this->cache_command( sprintf( MARS_OMNISV_VERSION_CMD, \r\n			$this->config[ \'OMNI_SBIN\' ] ), MARS_OMNISV_TIMEOUT );\r\n		foreach ( $lines as $line ) {\r\n			preg_match( sprintf( \'/%s/s\', MARS_OMNISV_VERSION ), $line, $match ) && \r\n				list( $line, $version, $build ) = $match;\r\n		}\r\n		$version = sprintf( "%s b%s", $version, $build );\r\n		return $version;\r\n	}\r\n\r\n	function check_omnisv_services() {\r\n		$lines = $this->cache_command( sprintf( MARS_OMNISV_STATUS_CMD, \r\n			$this->config[ \'OMNI_SBIN\' ] ), MARS_OMNISV_TIMEOUT );\r\n		foreach ( $lines as $line ) {\r\n			foreach ( explode( \',\', $this->config[ \'SERVICE_LIST\' ] ) as $service ) {\r\n				if ( stristr( $line, $service ) ) {\r\n					list ( $dummy, $status ) = explode( \':\', $line );\r\n					$this->service[ $service ] = trim( $status );\r\n				}\r\n			}\r\n		}\r\n		if ( isset( $this->config[ \'SERVICE_PRIORITY\' ] ) ) {\r\n			foreach ( $this->service as $service => $status ) {\r\n				if ( !$this->maintenance( ) and ( !stristr( $status, MARS_SERVICE_ACTIVE ) ) \r\n					and ( !stristr( $this->down, $service ) ) ) {\r\n					$message = sprintf( MARS_ERROR_SERVICE_NOT_ACTIVE, $service, $status );\r\n					$this->log_error( $message );\r\n					$this->create_ticket( $this->config[ \'SERVICE_PRIORITY\' ], \'SV1\', $message );\r\n				}\r\n			}\r\n		}\r\n	}\r\n\r\n	function update_status() {\r\n		$active = $down = array( );\r\n		if ( $this->maintenance( ) ) {\r\n			$active = array( MARS_SERVICE_MAINTENANCE );\r\n		} else {\r\n			foreach ( $this->service as $service => $status ) {\r\n				stristr( $status, MARS_SERVICE_ACTIVE ) && $active[] = $service;\r\n				stristr( $status, MARS_SERVICE_DOWN ) && $down[] = $service;\r\n			}\r\n			empty( $down ) && $active = array( MARS_SERVICE_ALL ); \r\n			empty( $active ) && $down = array( MARS_SERVICE_ALL );\r\n		}\r\n		$sql = "update config_cellservers set timezone=\'%timezone\',os=\'%os\',dp=\'%dp\',php=\'%php\'," . \r\n			"maintenance=\'%maintenance\',active=nullif(\'%active\',\'\'),down=nullif(\'%down\',\'\')," . \r\n			"mmd_local=\'%mmd_local\' where name=\'%name\';";\r\n		$values = array( \r\n			\'name\' => $this->cellserver, \r\n			\'timezone\' => date_default_timezone_get( ), \r\n			\'os\' => $this->os, \r\n			\'dp\' => $this->dp, \r\n			\'php\' => $this->php, \r\n			\'maintenance\' => $this->maintenance( ) ? 1 : 0, \r\n			\'active\' => implode( \',\', $active ), \r\n			\'down\' => implode( \',\', $down ), \r\n			\'mmd_local\' => $this->mmd_local \r\n		 );\r\n		$this->database->execute_query( $sql, $values );\r\n	}\r\n\r\n	function create_ticket( $priority = MARS_ITO_DEFAULT_PRIORITY, $text1 = \'\', $text2 = \'\', $text3 = \'\' ) {\r\n		if ( isset( $this->config[ \'ITO_FILE\' ] ) ) {\r\n			$this->log_action( sprintf( MARS_ITO_MESSAGE, $priority, $text1 ) );\r\n			$this->append_file( $this->config[ \'ITO_FILE\' ], sprintf( MARS_ITO, $priority, $text1, $text2, $text3 ) );\r\n		}\r\n	}\r\n	\r\n	function read_file( $filename ) {\r\n		$contents = file_get_contents( $filename );\r\n		if ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n			$enc = mb_detect_encoding( $contents );\r\n			if ( substr( $contents, 0, 4 ) == UCS_4BE ) $enc = \'UCS-4BE\';\r\n			if ( substr( $contents, 0, 4 ) == UCS_4LE ) $enc =\'UCS-4LE\';\r\n			if ( substr( $contents, 0, 3 ) == UTF_8B ) $enc = \'UTF-8\';\r\n			if ( substr( $contents, 0, 2 ) == UCS_2BE ) $enc = \'UCS-2BE\';\r\n			if ( substr( $contents, 0, 2 ) == UCS_2LE ) $enc = \'UCS-2LE\';\r\n			$result = ( $enc == \'\' ) ? false : iconv( $enc ,\'ASCII//IGNORE\', $contents );\r\n		} else {\r\n			$result = $contents;\r\n		}\r\n		return $result;\r\n	}\r\n	\r\n	function append_file( $filename, $line, $trimnl = true ) {\r\n		if ( $trimnl ) $line = preg_replace( \'/[\\r\\n]+/\', \' \', $line );\r\n		$file = @fopen( $filename, \'a\' );\r\n		if ( !$file ) {\r\n			throw new exception( sprintf( MARS_ERROR_CANNOT_OPEN, $filename ) );\r\n		}\r\n		if ( !fwrite( $file, $line . PHP_EOL ) ) {\r\n			throw new exception( sprintf( MARS_ERROR_CANNOT_WRITE, $filename ) );\r\n		}\r\n		if ( !fclose( $file ) ) {\r\n			throw new exception( sprintf( MARS_ERROR_CANNOT_CLOSE, $filename ) );\r\n		}\r\n	}\r\n\r\n	function scheduler() {\r\n		while ( execute_routines( $this ) or execute_notifications( $this ) );\r\n		$silentwindow = false;\r\n		if ( !empty( $this->config[ \'SILENT_WINDOW\' ] ) ) {\r\n			list ( $start, $end ) = explode( \' \', $this->config[ \'SILENT_WINDOW\' ] );\r\n			$time = strtotime( date( \'H:i\' ) );\r\n			$start = strtotime( $start );\r\n			$end = strtotime( $end );\r\n			$end < $start && $end = $end + 24 * 60 * 60;\r\n			$silentwindow = ( $time >= $start ) and ( $time < $end );\r\n		}\r\n		if ( !$this->maintenance( ) and !$silentwindow ) {\r\n			$lockfile = @fopen( $this->root . DIRECTORY_SEPARATOR . MARS_LOCKFILE, \'w\' );\r\n			if ( flock( $lockfile, LOCK_EX | LOCK_NB ) ) {\r\n				$this->debug( \'SCHEDULER start\' );\r\n				$sql = "update mars_queue set executed_on=null where cellserver=\'%cellserver\' and  executed_on is not null;";\r\n				$values = array(\r\n						\'cellserver\' => $this->cellserver\r\n				);\r\n				$this->database->execute_query( $sql, $values );\r\n				$sql = "update config_cellservers set host=\'%host\',`localtime`=\'%localtime\' where name=\'%name\';";\r\n				$values = array(\r\n					\'name\' => $this->cellserver,\r\n					\'localtime\' => date( $this->config[ \'TIME_FORMAT\' ] ),\r\n					\'host\' => sprintf( \'%s::%s\', $this->hostname, count( $this->workers->workers ) ) );\r\n				$this->database->execute_query( $sql, $values );\r\n				$permitted = true;\r\n				while ( ( $permitted and ( execute_actions( $this ) or $this->workers->waiting( ) ) ) or $this->workers->working( ) ) {\r\n					if ( $this->workers->waiting( ) ) {\r\n						$worker = $this->workers->start( );\r\n						$this->debug( sprintf( MARS_DEBUG_WORKER_START, \r\n							$worker->id, count( $this->workers->workers ), $worker->cid, count( $this->workers->queue ), $worker->params[ \'CMD\' ] ) );\r\n					} else {\r\n						if ( $this->workers->working( ) and $this->workers->done( ) ) {\r\n							$worker = $this->workers->finish( );\r\n							$this->debug( sprintf( MARS_DEBUG_WORKER_FINISH, \r\n								$worker->id, count( $this->workers->workers ), $worker->cid, count( $this->workers->queue ), $worker->duration ) );\r\n							if ( !empty( $worker->params[ \'ITEMS\' ] ) ) {\r\n								$file = $this->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $worker->name . \'.tmp\';\r\n								file_put_contents( $file, $this->workers->encode( $worker ) );\r\n								$items = $worker->params[ \'ITEMS\' ];\r\n								execute_actions( $this, $items[ \'NAME\' ], $items[ \'DATA\' ] );\r\n							}\r\n						}\r\n						$this->workers->next( );\r\n					}\r\n					( $this->maintenance( ) or $this->get_duration( ) > 3600 ) && $permitted = false;\r\n				}\r\n				$sql = "update config_cellservers set host=\'%host\',`localtime`=\'%localtime\' where name=\'%name\';";\r\n				$values = array(\r\n					\'name\' => $this->cellserver,\r\n					\'localtime\' => date( $this->config[ \'TIME_FORMAT\' ] ),\r\n					\'host\' => $this->hostname );\r\n				$this->database->execute_query( $sql, $values );\r\n				flock( $lockfile, LOCK_UN );\r\n				fclose( $lockfile );\r\n				unlink( $this->root . DIRECTORY_SEPARATOR . MARS_LOCKFILE );\r\n				$this->debug( \'SCHEDULER finish\' );\r\n			}\r\n		}\r\n	}\r\n\r\n	function test_file( $severity, $file ) {\r\n		if ( $file == \'\' ) return true;\r\n		$msg = file_exists( $file ) ? sprintf( MARS_TEST_FILE_FOUND, MARS_SEVERITY_OK, $file ) : \r\n			sprintf( MARS_TEST_FILE_NOT_FOUND, $severity, $file );\r\n		$this->output( $msg );\r\n	}\r\n\r\n	function test_installation() {\r\n		$this->output( $this->name );\r\n		$this->output( sprintf( MARS_TEST, PHP_VERSION, $this->os ) );\r\n		!mod_mysql( ) && $this->output( sprintf( MARS_TEST_MOD_NOT_SUPPORTED, MARS_SEVERITY_ERROR, \'MySQL\' ) );\r\n		!mod_mysqli( ) && $this->output( sprintf( MARS_TEST_MOD_NOT_SUPPORTED, MARS_SEVERITY_WARNING, \'MySQLi\' ) );\r\n		$this->test_file( MARS_SEVERITY_ERROR, $this->config[ \'OMNI_BIN\' ] );\r\n		$this->test_file( MARS_SEVERITY_ERROR, $this->config[ \'OMNI_SBIN\' ] );\r\n		$this->test_file( MARS_SEVERITY_ERROR, $this->config[ \'OMNI_SERVER\' ] );\r\n		$this->test_file( MARS_SEVERITY_ERROR, $this->config[ \'OMNI2ESL\' ] );\r\n		$this->test_file( MARS_SEVERITY_ERROR, $this->config[ \'BACKUPMON\' ] );\r\n		$this->test_file( MARS_SEVERITY_WARNING, $this->config[ \'ITO_FILE\' ] );\r\n		$this->output( sprintf( MARS_TEST_CELLSERVER, MARS_SEVERITY_OK, $this->cellserver ) );\r\n		$lines = $this->cache_command( sprintf( MARS_OMNISTAT_PREVIOUS_CMD, \r\n			$this->config[ \'OMNI_BIN\' ] ), MARS_OMNISTAT_TIMEOUT );\r\n		$this->output( sprintf( MARS_TEST_OMNISTAT, MARS_SEVERITY_OK ) );\r\n		$sessionid = \'N/A\';\r\n		$specification = \'N/A\';\r\n		$status = \'N/A\';\r\n		foreach ( $lines as $line ) {\r\n			if ( preg_match( "/backup.*completed/i", $line ) ) {\r\n				list ( $sessionid ) = explode( \' \', $line );\r\n			}\r\n		}\r\n		if ( $sessionid != \'N/A\' ) {\r\n			$this->output( sprintf( MARS_TEST_SESSION, MARS_SEVERITY_OK, $sessionid ) );\r\n			$lines = $this->cache_command( sprintf( MARS_OMNIRPT_SINGLE_SESSION_CMD, \r\n				$this->config[ \'OMNI_BIN\' ], $sessionid ), MARS_OMNIRPT_TIMEOUT );\r\n			$this->output( sprintf( MARS_TEST_OMNIRPT, MARS_SEVERITY_OK ) );\r\n			foreach ( $lines as $line ) {\r\n				if ( $line[ 0 ] == \'#\' ) {\r\n					continue;\r\n				}\r\n				list ( $specification, $sessionid, $type, $sessionowner, $status, $mode, \r\n					$starttime, $starttime_t, $endtime, $endtime_t,	$queuing, $duration, \r\n					$gbwritten, $media, $errors, $warnings, $pendingda, $runningda, $failedda, \r\n					$completedda, $objects, $success ) = explode( "\\t", rtrim( $line ) );\r\n				break;\r\n			}\r\n			$this->output( sprintf( MARS_TEST_SESSION_DETAILS, \r\n				$sessionid, $specification, $status ) );\r\n		} else {\r\n			$this->output( sprintf( MARS_TEST_NO_SESSION, MARS_SEVERITY_WARNING ) );\r\n		}\r\n		if ( isset( $this->database ) and $this->database->is_connected( ) ) {\r\n			$this->output( sprintf( MARS_TEST_MYSQL, MARS_SEVERITY_OK, \r\n				$this->config[ \'MYSQL_HOST\' ] ) );\r\n		} else {\r\n			$this->output( sprintf( MARS_TEST_NO_MYSQL, MARS_SEVERITY_ERROR, \r\n				$this->config[ \'MYSQL_HOST\' ], $this->database->message ) );\r\n		}\r\n	}\r\n}\r\n', '2013-01-01 00:00:00', '2017-08-21 10:14:35', NULL),
	(6, 'inc/actions.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 ACTIONS PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'ACTIONS\', \'UPDATESCRIPT,REMOVEFILE,ADDCONFIG,MODIFYCONFIG,REMOVECONFIG,ROUTINE,STARTOFCOPY,STARTOFSESSION,ENDOFCOPY,\' .\r\n		\'ENDOFSESSION,ENDOFSESSIONDEVICES,ENDOFSESSIONOBJECTS,ENDOFSESSIONMEDIA\' );\r\ndefine( \'ACTIONS_ERROR\', \'Error: %s "%s": %s\' );\r\ndefine( \'ACTIONS_ERROR_UNHANDLED\', \'Unhandled action "%s".\' );\r\ndefine( \'ACTIONS_ERROR_NO_SCRIPT\', \'No script matched pattern "%s".\' );\r\ndefine( \'ACTIONS_ERROR_CANNOT_WRITE\', \'Cannot write to file "%s".\' );\r\ndefine( \'ACTIONS_SCRIPT_UPDATED\', \'Script "%s" was updated successful.\' );\r\ndefine( \'ACTIONS_ERROR_EMPTY_FILENAME\', \'Empty file name provided.\' );\r\ndefine( \'ACTIONS_FILE_REMOVED\', \'File "%s" was removed successfuly.\' );\r\ndefine( \'ACTIONS_FILE_NOT_REMOVED\', \'File "%s" was not removed.\' );\r\ndefine( \'ACTIONS_FILE_NOT_EXISTS\', \'File "%s" does not exist.\' );\r\ndefine( \'ACTIONS_ERROR_EMPTY_KEY\', \'Empty key provided.\' );\r\ndefine( \'ACTIONS_KEY_NOT_EXISTS\', \'Config key "%s" does not exist.\' );\r\ndefine( \'ACTIONS_KEY_ADDED\', \'Config key "%s" was set to "%s" and added after key "%s".\' );\r\ndefine( \'ACTIONS_KEY_MODIFIED\', \'Config key "%s" was modified from "%s" to "%s".\' );\r\ndefine( \'ACTIONS_KEY_REMOVED\', \'Config key "%s" was removed.\' );\r\ndefine( \'ACTIONS_ERROR_EMPTY_ROUTINE\', \'Empty routine name provided.\' );\r\ndefine( \'ACTIONS_ERROR_EMPTY_SESSIONID\', \'Empty Session ID provided.\' );\r\ndefine( \'ACTIONS_OMNIDB_TIMEOUT\', 15 );\r\ndefine( \'ACTIONS_ERROR_OMNIDB_UNKNOWN_ITEM\', \'Unknown "omnidb -rpt %s" item "%s=%s".\' );\r\ndefine( \'ACTIONS_ERROR_OMNIDB_INVALID_OUTPUT\', \'Invalid "omnidb rpt" output: "%s"\' );\r\ndefine( \'ACTIONS_SESSION_STARTED\', \'Session "%s" started at %s. Specification:"%s" Type:%s Scheduled:%s\' );\r\ndefine( \'ACTIONS_SCHEDULED_SESSION_DELAY_SECONDS\', 450 );\r\ndefine( \'ACTIONS_OMNIRPT_TIMEOUT\', 15 );\r\ndefine( \'ACTIONS_ERROR_OMNIRPT_INVALID_SINGLE_SESSION_OUTPUT\', \'Invalid "omnirpt single_session" output: "%s"\' );\r\ndefine( \'ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_DEVICES_OUTPUT\', \'Invalid "omnirpt session_devices" output: "%s"\' );\r\ndefine( \'ACTIONS_ERROR_OMNIRPT_DEVICES\', \'Error retrieving devices for session "%s: (%s) : %s\' );\r\ndefine( \'ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_OBJECTS_OUTPUT\', \'Invalid "omnirpt session_objects" output: "%s"\' );\r\ndefine( \'ACTIONS_ERROR_OMNIRPT_OBJECTS\', \'Error retrieving objects for session "%s: (%s) : %s\' );\r\ndefine( \'ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_MEDIA_OUTPUT\', \'Invalid "omnirpt session_media" output: "%s"\' );\r\ndefine( \'ACTIONS_ERROR_OMNIRPT_MEDIA\', \'Error retrieving media for session "%s: (%s) : %s\' );\r\ndefine( \'ACTIONS_SESSION_RECYCLED\', \'Session "%s" (%s) was recycled.\' );\r\ndefine( \'ACTIONS_ERROR_SESSION_RECYCLED\', \'Error recycling session "%s" (%s) : %s\' );\r\ndefine( \'ACTIONS_ITO_THRESHOLD_SECONDS\', 3600 );\r\ndefine( \'ACTIONS_ITO_MESSAGE\', \'%s for %d. time\' );\r\ndefine( \'ACTIONS_ERROR_BACKUPMON\', \'Error executing "checkBackupStatus" for session "%s" (%s) : %s\' );\r\ndefine( \'ACTIONS_STARTOFSESSION_SKIPPED\', \'Processing of session "%s" start skipped.\' );\r\ndefine( \'ACTIONS_SESSION_LOG\', \r\n	\'Session "%-13s" ended at %-5s. Status:%-10s Devices:%-2s Objects:%-3s Media:%-2s ITO:%-1s BACKUPMON:%-3s Scheduled:%s"\' );\r\n\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n	define( \'ACTIONS_OMNIDB_CMD\', \'"%s\\omnidb.exe" -rpt %s -detail\' );\r\n	define( \'ACTIONS_OMNIRPT_SINGLE_SESSION_CMD\', \'"%s\\omnirpt.exe" -report single_session -session %s -level critical -tab\' );\r\n	define( \'ACTIONS_OMNIRPT_SESSION_DEVICES_CMD\', \'"%s\\omnirpt.exe" -report session_devices -session %s -tab\' );\r\n	define( \'ACTIONS_OMNIRPT_SESSION_OBJECTS_CMD\', \'"%s\\omnirpt.exe" -report session_objects -session %s -tab\' );\r\n	define( \'ACTIONS_OMNIRPT_SESSION_MEDIA_CMD\', \'"%s\\omnirpt.exe" -report session_media -session %s -tab\' );\r\n	define( \'ACTIONS_OMNIDB_CHANGE_PROTECTION_CMD\', \'"%s\\omnidb.exe" -session %s -change_protection none\' );\r\n	define( \'ACTIONS_OMNIDB_CHANGE_CATPROTECTION_CMD\', \'"%s\\omnidb.exe" -session %s -change_catprotection none\' );\r\n	define( \'ACTIONS_BACKUPMON_CMD\', \'"%s\\checkBackupStatus.exe" -postexec -nocase\' );\r\n} else {\r\n	define( \'ACTIONS_OMNIDB_CMD\', \'"%s/omnidb" -rpt %s -detail\' );\r\n	define( \'ACTIONS_OMNIRPT_SINGLE_SESSION_CMD\', \'"%s/omnirpt" -report single_session -session %s -level critical -tab\' );\r\n	define( \'ACTIONS_OMNIRPT_SESSION_DEVICES_CMD\', \'"%s/omnirpt" -report session_devices -session %s -tab\' );\r\n	define( \'ACTIONS_OMNIRPT_SESSION_OBJECTS_CMD\', \'"%s/omnirpt" -report session_objects -session %s -tab\' );\r\n	define( \'ACTIONS_OMNIRPT_SESSION_MEDIA_CMD\', \'"%s/omnirpt" -report session_media -session %s -tab\' );\r\n	define( \'ACTIONS_OMNIDB_CHANGE_PROTECTION_CMD\', \'"%s/omnidb" -session %s -change_protection none\' );\r\n	define( \'ACTIONS_OMNIDB_CHANGE_CATPROTECTION_CMD\', \'"%s/omnidb" -session %s -change_catprotection none\' );\r\n	define( \'ACTIONS_BACKUPMON_CMD\', \'"%s/checkBackupStatus" -postexec -nocase\' );\r\n}\r\n\r\nclass mars_action {\r\n	var $application;\r\n	var $items;\r\n\r\n	function mars_action( $application, $items ) {\r\n		$this->application = $application;\r\n		$this->items = array_change_key_case( $items, CASE_UPPER );\r\n	}\r\n\r\n	function execute() {\r\n		try {\r\n			$result = false;\r\n			switch ( strtoupper( $this->items[ \'NAME\' ] ) ) {\r\n				case \'UPDATESCRIPT\':\r\n					$result = $this->updatescript( );\r\n					break;\r\n				case \'REMOVEFILE\':\r\n					$result = $this->removefile( );\r\n					break;\r\n				case \'ADDCONFIG\':\r\n					$result = $this->addconfig( );\r\n					break;\r\n				case \'MODIFYCONFIG\':\r\n					$result = $this->modifyconfig( );\r\n					break;\r\n				case \'REMOVECONFIG\':\r\n					$result = $this->removeconfig( );\r\n					break;\r\n				case \'ROUTINE\':\r\n					$result = $this->routine( );\r\n					break;\r\n				case \'STARTOFCOPY\':\r\n					$result = $this->startofcopy( );\r\n					break;\r\n				case \'STARTOFSESSION\':\r\n					$result = $this->startofsession( );\r\n					break;\r\n				case \'ENDOFCOPY\':\r\n					$result = $this->endofcopy( );\r\n					break;\r\n				case \'ENDOFSESSION\':\r\n					$result = $this->endofsession( );\r\n					break;\r\n				case \'ENDOFSESSIONDEVICES\':\r\n					$result = $this->endofsessiondevices( );\r\n					break;\r\n				case \'ENDOFSESSIONOBJECTS\':\r\n					$result = $this->endofsessionobjects( );\r\n					break;\r\n				case \'ENDOFSESSIONMEDIA\':\r\n					$result = $this->endofsessionmedia( );\r\n					break;\r\n				default:\r\n					throw new exception( sprintf( ACTIONS_ERROR_UNHANDLED, $this->items[ \'NAME\' ] ) );\r\n					break;\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( ACTIONS_ERROR, $this->items[ \'NAME\' ], $this->items[ \'DATA\' ], $e->getmessage( ) ) );\r\n			$result = true;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function updatescript() {\r\n		empty( $this->items[ \'DATA\' ] ) && $this->items[ \'DATA\' ] = \'.*\';\r\n		$sql = "select * from config_scripts where (id regexp \'%data\' or name regexp \'%data\') and valid_until is null ";\r\n		if ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n			$sql .= "and name not regexp \'\\.sh$\';";\r\n		} else {\r\n			$sql .= "and name not regexp \'\\.cmd$\';";\r\n		}\r\n		$values = array( \r\n			\'data\' => $this->items[ \'DATA\' ] );\r\n		$this->application->database->execute_query( $sql, $values );\r\n		if ( $this->application->database->row_count == 0 ) {throw new exception( sprintf( ACTIONS_ERROR_NO_SCRIPT, $this->items[ \'DATA\' ] ) );}\r\n		foreach ( $this->application->database->rows as $row ) {\r\n			$row = array_change_key_case( $row, CASE_UPPER );\r\n			$code = str_replace( "\\r\\n", PHP_EOL, $row[ \'CODE\' ] );\r\n			$result = file_put_contents( $this->application->root . DIRECTORY_SEPARATOR . $row[ \'NAME\' ], $code );\r\n			if ( !$result ) {throw new exception( sprintf( ACTIONS_ERROR_CANNOT_WRITE ), $row[ \'NAME\' ] );}\r\n			$this->application->log_action( sprintf( ACTIONS_SCRIPT_UPDATED, $row[ \'NAME\' ] ) );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function removefile() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_FILENAME );}\r\n		$file = $this->application->root . DIRECTORY_SEPARATOR . $this->items[ \'DATA\' ];\r\n		$result = true;\r\n		if ( file_exists( $file ) ) {\r\n			$result = unlink( $file );\r\n			$this->application->log_action( sprintf( $result ? ACTIONS_FILE_REMOVED : ACTIONS_FILE_NOT_REMOVED, $file ) );\r\n		} else {\r\n			$this->application->log_error( sprintf( ACTIONS_FILE_NOT_EXISTS, $file ) );\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function writeconfig( $findkey, $value = \'\', $insertkey = \'\' ) {\r\n		$filename = $this->application->root . DIRECTORY_SEPARATOR . MARS_CONFIG;\r\n		$config = explode( PHP_EOL, $this->application->read_file( $filename ) );\r\n		$index = -1;\r\n		$remove = 1;\r\n		$replace = array();\r\n		$findkey = strtoupper( $findkey );\r\n		$insertkey = strtoupper( $insertkey );\r\n		foreach ( $config as $item ) {\r\n			( strpos( $item, $findkey ) === 0 ) && $index = array_search( $item, $config );\r\n		}\r\n		if ( $index == -1 ) {throw new exception( sprintf( ACTIONS_KEY_NOT_EXISTS, $findkey ) );}\r\n		if ( $value != \'\' ) {\r\n			if ( $insertkey == \'\' ) {\r\n				$replace = array( \r\n					sprintf( "%-24s=%s", $findkey, trim( $value ) ) );\r\n			} else {\r\n				$remove = 0;\r\n				$index++;\r\n				$replace = array( \r\n					sprintf( "%-24s=%s", $insertkey, trim( $value ) ) );\r\n			}\r\n		}\r\n		array_splice( $config, $index, $remove, $replace );\r\n		$result = file_put_contents( $filename, implode( PHP_EOL, $config ) );\r\n		if ( !$result ) {throw new exception( sprintf( ACTIONS_ERROR_CANNOT_WRITE, $filename ) );}\r\n	}\r\n\r\n	function addconfig() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_KEY );}\r\n		list ( $after, $key, $value ) = explode( \' \', $this->items[ \'DATA\' ], 3 );\r\n		$this->writeconfig( $after, $value, $key );\r\n		$this->application->log_action( sprintf( ACTIONS_KEY_ADDED, $key, $value, $after ) );\r\n		return true;\r\n	}\r\n\r\n	function modifyconfig() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_KEY );}\r\n		list ( $key, $value ) = explode( \' \', $this->items[ \'DATA\' ], 2 );\r\n		$old = empty( $this->application->config[ $key ] ) ? \'\' : $this->application->config[ $key ];\r\n		$this->writeconfig( $key, $value );\r\n		$this->application->log_action( sprintf( ACTIONS_KEY_MODIFIED, $key, $old, $value ) );\r\n		return true;\r\n	}\r\n\r\n	function removeconfig() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_KEY );}\r\n		$key = $this->items[ \'DATA\' ];\r\n		$this->writeconfig( $key );\r\n		$this->application->log_action( sprintf( ACTIONS_KEY_REMOVED, $key ) );\r\n		return true;\r\n	}\r\n\r\n	function routine() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_ROUTINE );}\r\n		$routine = new mars_routine( $this->application, $this->items[ \'DATA\' ] );\r\n		return $routine->execute( );\r\n	}\r\n\r\n	function startofcopy() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_SESSIONID );}\r\n		return true;\r\n	}\r\n\r\n	function was_scheduled_at( $specification, $starttime ) {\r\n		$scheduled = 0;\r\n		$started = $this->application->parse_date( $starttime );\r\n		$s = new mars_specification( $this->application, $specification );\r\n		$s->read_database( );\r\n		$nextexecution = $s->get_nextexecution( date( $started ) );\r\n		if ( $nextexecution ) {\r\n			foreach ( $nextexecution as $n ) {\r\n				$difference = strtotime( $started ) - strtotime( $n[ \'date\' ] . \' \' . $n[ \'time\' ] );\r\n				$scheduled = ( $difference >= 0 and $difference <= ACTIONS_SCHEDULED_SESSION_DELAY_SECONDS ) ? 1 : $scheduled;\r\n			}\r\n		}\r\n		return $scheduled;\r\n	}\r\n\r\n	function startofsession() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_SESSIONID );}\r\n		if ( isset( $this->application->config[ \'STARTOFSESSION_SKIP\' ] ) ) {\r\n			$message = sprintf( ACTIONS_STARTOFSESSION_SKIPPED, $this->items[ \'SESSIONID\' ] );\r\n			return true;\r\n		}\r\n		$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'SoS-%s\', $this->items[ \'DATA\' ] ) );\r\n		$command = sprintf( ACTIONS_OMNIDB_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->items[ \'DATA\' ] );\r\n		$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n		if ( !file_exists( $file ) ) {\r\n			$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $this->items ) );\r\n			return false;\r\n		}\r\n		$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file );\r\n		array_push( $lines, \'\' );\r\n		foreach ( $lines as $line ) {\r\n			$key = strtoupper( trim( substr( $line, 0, strpos( $line, \':\' ) ) ) );\r\n			$value = trim( substr( strstr( $line, \':\' ), 1 ) );\r\n			switch ( $key ) {\r\n				case \'SESSIONID\':\r\n					$sessionid = $value;\r\n					break;\r\n				case \'BACKUP SPECIFICATION\':\r\n					$specification = $value;\r\n					break;\r\n				case \'SESSION TYPE\':\r\n					$type = $value;\r\n					break;\r\n				case \'STARTED\':\r\n					$started = $value;\r\n					break;\r\n				case \'FINISHED\':\r\n					$finished = $value;\r\n					break;\r\n				case \'STATUS\':\r\n					$status = $value;\r\n					break;\r\n				case \'NUMBER OF WARNINGS\':\r\n					$warnings = $value;\r\n					break;\r\n				case \'NUMBER OF ERRORS\':\r\n					$errors = $value;\r\n					break;\r\n				case \'USER\':\r\n					$user = $value;\r\n					break;\r\n				case \'GROUP\':\r\n					$group = $value;\r\n					break;\r\n				case \'HOST\':\r\n					$host = $value;\r\n					break;\r\n				case \'SESSION SIZE\':\r\n				case \'SESSION DATA SIZE [KB]\':\r\n					$sessionsize = $value;\r\n					break;\r\n				case \'\':\r\n					break;\r\n				default:\r\n					$this->application->log_error( sprintf( ACTIONS_ERROR_OMNIDB_UNKNOWN_ITEM, $this->items[ \'DATA\' ], $key, $value ) );\r\n			}\r\n		}\r\n		if ( !isset( $sessionid ) ) {throw new exception( sprintf( ACTIONS_ERROR_OMNIDB_INVALID_OUTPUT, trim( implode( \'\', $lines ) ) ) );}\r\n		if ( $type != \'Backup\' ) {return true;}\r\n		$scheduled = $this->was_scheduled_at( $specification, $started );\r\n		$this->application->log_action( \r\n			sprintf( ACTIONS_SESSION_STARTED, $sessionid, date( \'H:i\', strtotime( $started ) ), $specification, $type, $scheduled ) );\r\n		return true;\r\n	}\r\n\r\n	function endofcopy() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_SESSIONID );}\r\n		return true;\r\n	}\r\n\r\n	function endofsession_old() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_SESSIONID );}\r\n		$name1 = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'EoS-S-%s\', $this->items[ \'DATA\' ] ) );\r\n		$command1 = sprintf( ACTIONS_OMNIRPT_SINGLE_SESSION_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->items[ \'DATA\' ] );\r\n		$file1 = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name1 . \'.tmp\';\r\n		$name2 = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'EoS-D-%s\', $this->items[ \'DATA\' ] ) );\r\n		$command2 = sprintf( ACTIONS_OMNIRPT_SESSION_DEVICES_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->items[ \'DATA\' ] );\r\n		$file2 = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name2 . \'.tmp\';\r\n		$name3 = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'EoS-O-%s\', $this->items[ \'DATA\' ] ) );\r\n		$command3 = sprintf( ACTIONS_OMNIRPT_SESSION_OBJECTS_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->items[ \'DATA\' ] );\r\n		$file3 = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name3 . \'.tmp\';\r\n		$name4 = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'EoS-M-%s\', $this->items[ \'DATA\' ] ) );\r\n		$command4 = sprintf( ACTIONS_OMNIRPT_SESSION_MEDIA_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->items[ \'DATA\' ] );\r\n		$file4 = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name4 . \'.tmp\';\r\n		if ( !file_exists( $file1 ) or !file_exists( $file2 ) or !file_exists( $file3 ) or !file_exists( $file4 ) ) {\r\n			!file_exists( $file1 ) && $this->application->workers->add( array( \'CMD\' => $command1, \'NAME\' => $name1, \'ITEMS\' => $this->items ) );\r\n			!file_exists( $file2 ) && $this->application->workers->add( array( \'CMD\' => $command2, \'NAME\' => $name2, \'ITEMS\' => $this->items ) );\r\n			!file_exists( $file3 ) && $this->application->workers->add( array( \'CMD\' => $command3, \'NAME\' => $name3, \'ITEMS\' => $this->items ) );\r\n			!file_exists( $file4 ) && $this->application->workers->add( array( \'CMD\' => $command4, \'NAME\' => $name4, \'ITEMS\' => $this->items ) );\r\n			return false;\r\n		}\r\n		$worker = $this->application->workers->decode( file_get_contents( $file1 ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file1 );\r\n		foreach ( $lines as $line ) {\r\n			if ( empty( $line ) or ( $line[ 0 ] == \'#\' ) ) continue;\r\n			@list ( $specification, $sessionid, $type, $sessionowner, $status, $mode, $starttime, $starttime_t, \r\n				$endtime, $endtime_t, $queuing, $duration, $gbwritten, $media, $errors, $warnings, $pendingda, $runningda, $failedda, $completedda, $objects, $success ) = \r\n				explode( "\\t", rtrim( $line ) );\r\n			break;\r\n		}\r\n		if ( !isset( $sessionid ) ) {throw new exception( \r\n				sprintf( ACTIONS_ERROR_OMNIRPT_INVALID_SINGLE_SESSION_OUTPUT, trim( implode( \'\', $lines ) ) ) );}\r\n		if ( $type != \'Backup\' ) {\r\n			unlink( $file2 );\r\n			unlink( $file3 );\r\n			unlink( $file4 );\r\n			return true;\r\n		}\r\n		$sessionstatus = \'failed\';\r\n		if ( stristr( $status, \'mount\' ) ) $sessionstatus = \'in M/R\';\r\n		if ( stristr( $status, \'aborted\' ) ) $sessionstatus = \'aborted\';\r\n		if ( ( $queuing == $duration ) and ( $duration !== "0:00" ) and ( $status !== "Completed" ) and ( $errors = 2 ) ) $sessionstatus = \'timed out\';\r\n		if ( stristr( $status, \'progress\' ) ) $sessionstatus = \'in progress\';\r\n		if ( $success == \'100%\' ) $sessionstatus = \'success\';\r\n		$scheduled = $this->was_scheduled_at( $specification, $this->application->parse_date( $starttime ) );\r\n		$sql = "insert into dataprotector_sessions " .\r\n			 "(cellserver,specification,sessionid,scheduled,restartof,type,sessionowner,status,mode," .\r\n			 "starttime,starttimet,endtime,endtimet,queuing,duration,gbwritten,media," .\r\n			 "errors,warnings,pendingda,runningda,failedda,completedda,objects,success) " .\r\n			 "values (\'%cellserver\',\'%specification\',\'%sessionid\',\'%scheduled\',function_restartof(\'%cellserver\',\'%sessionid\')," .\r\n			 "\'%type\',\'%sessionowner\',\'%status\',\'%mode\',\'%starttime\',\'%starttimet\',nullif(\'%endtime\',\'\'),\'%endtimet\'," .\r\n			 "\'%queuing\',\'%duration\',\'%gbwritten\',\'%media\',\'%errors\',\'%warnings\',\'%pendingda\'," .\r\n			 "\'%runningda\',\'%failedda\',\'%completedda\',\'%objects\',\'%success\') on duplicate key update " .\r\n			 "status=\'%status\',endtime=nullif(\'%endtime\',\'\'),endtimet=\'%endtimet\',duration=\'%duration\',gbwritten=\'%gbwritten\'," .\r\n			 "media=\'%media\',errors=\'%errors\',warnings=\'%warnings\',pendingda=\'%pendingda\',runningda=\'%runningda\'," .\r\n			 "failedda=\'%failedda\',completedda=\'%completedda\',objects=\'%objects\',success=\'%success\';";\r\n		$values = array( \r\n			\'cellserver\' => $this->application->cellserver, \r\n			\'specification\' => $specification, \r\n			\'sessionid\' => $sessionid, \r\n			\'scheduled\' => $scheduled, \r\n			\'type\' => $type, \r\n			\'sessionowner\' => $sessionowner, \r\n			\'status\' => $status, \r\n			\'mode\' => $mode, \r\n			\'starttime\' => $this->application->parse_date( $starttime ), \r\n			\'starttimet\' => $starttime_t, \r\n			\'endtime\' => $this->application->parse_date( $endtime ), \r\n			\'endtimet\' => $endtime_t, \r\n			\'queuing\' => $queuing, \r\n			\'duration\' => $duration, \r\n			\'gbwritten\' => $this->application->parse_decimal( $gbwritten ), \r\n			\'media\' => $media, \r\n			\'errors\' => $errors, \r\n			\'warnings\' => $warnings, \r\n			\'pendingda\' => $pendingda, \r\n			\'runningda\' => $runningda, \r\n			\'failedda\' => $failedda, \r\n			\'completedda\' => $completedda, \r\n			\'objects\' => $objects, \r\n			\'success\' => $success );\r\n		$this->application->database->execute_query( $sql, $values );\r\n		try {\r\n			$devices = 0;\r\n			$worker = $this->application->workers->decode( file_get_contents( $file2 ) );\r\n			$lines = $worker->output;\r\n			unset( $worker );\r\n			unlink( $file2 );\r\n			foreach ( $lines as $line ) {\r\n				if ( empty( $line ) or ( $line[ 0 ] == \'#\' ) ) continue;\r\n				unset( $device );\r\n				@list ( $device, $starttime, $starttime_t, $endtime, $endtime_t, $duration, $gbwritten, $perf ) = explode( "\\t", \r\n					rtrim( $line ) );\r\n				if ( !isset( $device ) or preg_match( \'/^Error/\' , $line ) ) {throw new exception( \r\n						sprintf( ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_DEVICES_OUTPUT, trim( implode( \'\', $lines ) ) ) );}\r\n				$sql = "insert into dataprotector_session_devices (cellserver,sessionid,device,starttime,starttimet," .\r\n					 "endtime,endtimet,duration,gbwritten,performance) values " .\r\n					 "(\'%cellserver\',\'%sessionid\',\'%device\',\'%starttime\',\'%starttimet\'," .\r\n					 "nullif(\'%endtime\',\'\'),\'%endtimet\',\'%duration\',\'%gbwritten\',\'%performance\') on duplicate key update " .\r\n					 "endtime=nullif(\'%endtime\',\'\'), endtimet=\'%endtimet\', duration=\'%duration\'," .\r\n					 "gbwritten=\'%gbwritten\', performance=\'%performance\';";\r\n				$values = array( \r\n					\'cellserver\' => $this->application->cellserver, \r\n					\'sessionid\' => $sessionid, \r\n					\'device\' => substr( $device, 0, 32 ), \r\n					\'starttime\' => $this->application->parse_date( $starttime ), \r\n					\'starttimet\' => $starttime_t, \r\n					\'endtime\' => $this->application->parse_date( $endtime ), \r\n					\'endtimet\' => $endtime_t, \r\n					\'duration\' => $duration, \r\n					\'gbwritten\' => $this->application->parse_decimal( $gbwritten ), \r\n					\'performance\' => $this->application->parse_decimal( $perf ) );\r\n				$this->application->database->execute_query( $sql, $values );\r\n				$devices++;\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( ACTIONS_ERROR_OMNIRPT_DEVICES, $sessionid, $specification, $e->getmessage( ) ) );\r\n		}\r\n		try {\r\n			$objects = 0;\r\n			$clients = array();\r\n			$sql = "delete from dataprotector_session_objects where cellserver=\'%cellserver\' and sessionid=\'%sessionid\';";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'sessionid\' => $sessionid );\r\n			$this->application->database->execute_query( $sql, $values );\r\n			$worker = $this->application->workers->decode( file_get_contents( $file3 ) );\r\n			$lines = $worker->output;\r\n			unset( $worker );\r\n			unlink( $file3 );\r\n			foreach ( $lines as $line ) {\r\n				if ( empty( $line ) or ( $line[ 0 ] == \'#\' ) ) continue;\r\n				unset( $object_type );\r\n				if ( preg_match( \'/Object Name/\', implode( PHP_EOL, $lines ) ) ) {\r\n					@list ( $object_type, $client, $mountpoint, $description, $objectname, $status, $mode, $starttime, $starttime_t,\r\n							$endtime, $endtime_t, $duration, $kbwritten, $files, $perf, $protection, $errors, $warnings, $device ) =\r\n							explode( "\\t", rtrim( $line ) );\r\n				} else {\r\n					@list ( $object_type, $client, $mountpoint, $description, $status, $mode, $starttime, $starttime_t, \r\n						$endtime, $endtime_t, $duration, $kbwritten, $files, $perf, $protection, $errors, $warnings, $device ) = \r\n						explode( "\\t", rtrim( $line ) );\r\n				}\r\n				if ( !isset( $object_type ) or preg_match( \'/^Error/\' , $line ) ) {throw new exception( \r\n						sprintf( ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_OBJECTS_OUTPUT, trim( implode( \'\', $lines ) ) ) );}\r\n				$sql = "insert into dataprotector_session_objects (cellserver,sessionid,type,client,mountpoint,description,status,mode," .\r\n					 "starttime,starttimet,endtime,endtimet,duration,kbwritten,files,performance,protection,errors,warnings,device) " .\r\n					 "values (\'%cellserver\',\'%sessionid\',\'%type\',\'%client\',\'%mountpoint\',\'%description\',\'%status\'," .\r\n					 "\'%mode\',\'%starttime\',\'%starttimet\',nullif(\'%endtime\',\'\'),\'%endtimet\',\'%duration\'," .\r\n					 "\'%kbwritten\',\'%files\',\'%performance\',nullif(\'%protection\',\'\'),\'%errors\',\'%warnings\',\'%device\') " .\r\n					 "on duplicate key update " .\r\n					 "status=\'%status\', endtime=nullif(\'%endtime\',\'\'), endtimet=\'%endtimet\', duration=\'%duration\', " .\r\n					 "kbwritten=\'%kbwritten\', files=\'%files\', performance=\'%performance\', protection=nullif(\'%protection\',\'\'), " .\r\n					 "errors=\'%errors\', warnings=\'%warnings\';";\r\n				$values = array( \r\n					\'cellserver\' => $this->application->cellserver, \r\n					\'sessionid\' => $sessionid, \r\n					\'type\' => $object_type, \r\n					\'client\' => substr( $client, 0, 64 ), \r\n					\'mountpoint\' => $this->application->database->escape_string( substr( $mountpoint, 0, 127 ) ), \r\n					\'description\' => $this->application->database->escape_string( substr( $description, 0, 127 ) ), \r\n					\'status\' => $status, \r\n					\'mode\' => $mode, \r\n					\'starttime\' => $this->application->parse_date( $starttime ), \r\n					\'starttimet\' => $starttime_t, \r\n					\'endtime\' => $this->application->parse_date( $endtime ), \r\n					\'endtimet\' => $endtime_t, \r\n					\'duration\' => $duration, \r\n					\'kbwritten\' => $this->application->parse_decimal( $kbwritten ), \r\n					\'files\' => $files, \r\n					\'performance\' => $this->application->parse_decimal( $perf ), \r\n					\'protection\' => $this->application->parse_date( $protection ), \r\n					\'errors\' => $errors, \r\n					\'warnings\' => $warnings, \r\n					\'device\' => substr( $device, 0, 32 ) );\r\n				$this->application->database->execute_query( $sql, $values );\r\n				$clients[ ] = array( \r\n					\'name\' => $client, \r\n					\'type\' => $object_type );\r\n				$objects++;\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( ACTIONS_ERROR_OMNIRPT_OBJECTS, $sessionid, $specification, $e->getmessage( ) ) );\r\n		}\r\n		try {\r\n			$media = 0;\r\n			$worker = $this->application->workers->decode( file_get_contents( $file4 ) );\r\n			$lines = $worker->output;\r\n			unset( $worker );\r\n			unlink( $file4 );\r\n			foreach ( $lines as $line ) {\r\n				if ( empty( $line ) or ( $line[ 0 ] == \'#\' ) ) continue;\r\n				unset( $mediumid );\r\n				@list ( $mediumid, $label, $location, $pool, $protection, $used, $total, $lastused, $lastused_t ) = \r\n					explode( "\\t", rtrim( $line ) );\r\n				if ( !isset( $mediumid ) or preg_match( \'/^Error/\' , $line ) ) {throw new exception( \r\n						sprintf( ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_MEDIA_OUTPUT, trim( implode( \'\', $lines ) ) ) );}\r\n				$sql = "insert into dataprotector_session_media (cellserver,sessionid,mediumid,label,location,pool," .\r\n					 "protection,used,total,lastused,lastusedt) values " .\r\n					 "(\'%cellserver\',\'%sessionid\',\'%mediumid\',\'%label\',\'%location\',\'%pool\'," .\r\n					 "nullif(\'%protection\',\'\'),\'%used\',\'%total\',\'%lastused\',\'%lastusedt\') on duplicate key update " .\r\n					 "protection=nullif(\'%protection\',\'\'), used=\'%used\', total=\'%total\',lastused=\'%lastused\', lastusedt=\'%lastusedt\';";\r\n				$values = array( \r\n					\'cellserver\' => $this->application->cellserver, \r\n					\'sessionid\' => $sessionid, \r\n					\'mediumid\' => $mediumid, \r\n					\'label\' => $label, \r\n					\'location\' => $location, \r\n					\'pool\' => $pool, \r\n					\'protection\' => $this->application->parse_date( $protection ), \r\n					\'used\' => $this->application->parse_decimal( $used ), \r\n					\'total\' => $this->application->parse_decimal( $total ), \r\n					\'lastused\' => $this->application->parse_date( $lastused ), \r\n					\'lastusedt\' => $lastused_t );\r\n				$this->application->database->execute_query( $sql, $values );\r\n				$media++;\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( ACTIONS_ERROR_OMNIRPT_MEDIA, $sessionid, $specification, $e->getmessage( ) ) );\r\n		}\r\n		foreach ( super_unique( $clients ) as $client ) {\r\n			$name = $client[ \'name\' ];\r\n			$type = $client[ \'type\' ];\r\n			$sql = "select ifnull(c1.name, s1.customer) as customer from dataprotector_specifications s1 " .\r\n				 "left join config_customers c1 on (\'%name\' regexp replace(c1.fqdn,\'.\',\'\\\\.\')) " .\r\n				 "where s1.cellserver=\'%cellserver\' and s1.name = \'%specification\' limit 1;";\r\n			$values = array( \r\n				\'name\' => $name, \r\n				\'specification\' => $specification, \r\n				\'cellserver\' => $this->application->cellserver );\r\n			$this->application->database->execute_query( $sql, $values );\r\n			if ( $this->application->database->row_count == 1 ) {\r\n				$customer = $this->application->database->rows[ 0 ][ \'customer\' ];\r\n			} else {\r\n				$customer = \'\';\r\n			}\r\n			$sql = "insert into dataprotector_clients (cellserver,name,type,customer,specifications,mountpoints) values " .\r\n				 "(\'%cellserver\',\'%name\',\'%type\',nullif(\'%customer\',\'\'),%specifications,%mountpoints) " .\r\n				 "on duplicate key update customer=nullif(\'%customer\',\'\');";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'name\' => $name, \r\n				\'type\' => $type, \r\n				\'customer\' => $customer, \r\n				\'specifications\' => 1, \r\n				\'mountpoints\' => $objects );\r\n			$this->application->database->execute_query( $sql, $values );\r\n		}\r\n		$sql = $sql = "update dataprotector_specifications set lastsessionid=\'%sessionid\',";\r\n		if ( $success == \'100% \' ) {\r\n			$sql .= "lastsuccessfulsessionid=\'%sessionid\',success=success+1,failure=0";\r\n		} else {\r\n			$sql .= "success=0,failure=failure+1";\r\n		}\r\n		$sql .= " where cellserver=\'%cellserver\' and name=\'%specification\';";\r\n		$values = array( \r\n			\'cellserver\' => $this->application->cellserver, \r\n			\'specification\' => $specification, \r\n			\'sessionid\' => $sessionid );\r\n		$this->application->database->execute_query( $sql, $values );\r\n		if ( ( $this->application->config[ \'RECYCLE_FAILURES\' ] ) and ( $completedda > 0 ) and ( $success != \'100%\' ) ) {\r\n			try {\r\n				$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'OMNIDB-CP-%s\', $sessionid ) );\r\n				$command = sprintf( ACTIONS_OMNIDB_CHANGE_PROTECTION_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid );\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name ) );\r\n				$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'OMNIDB-CCP-%s\', $sessionid ) );\r\n				$command = sprintf( ACTIONS_OMNIDB_CHANGE_CATPROTECTION_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid );\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name ) );\r\n				$this->application->log_action( sprintf( ACTIONS_SESSION_RECYCLED, $sessionid, $sessionstatus ) );\r\n			}\r\n			catch ( exception $e ) {\r\n				$this->application->log_error( sprintf( ACTIONS_ERROR_SESSION_RECYCLED, $sessionid, $specification, $e->getmessage( ) ) );\r\n			}\r\n		}\r\n		$ito = 0;\r\n		if ( ( $success != \'100%\' ) and\r\n			 ( strtotime( $this->application->start_time ) - strtotime( $this->application->parse_date( $endtime ) ) <\r\n			 ACTIONS_ITO_THRESHOLD_SECONDS ) ) {\r\n			$sql = "select s1.failure,r1.ticket_threshold from dataprotector_specifications s1 " .\r\n			 "left join config_retentions r1 on ((r1.customer=s1.customer or r1.customer is null) and r1.name=s1.retention) " .\r\n			 "where s1.cellserver=\'%cellserver\' and s1.name=\'%specification\' order by r1.customer desc limit 1;";\r\n		\r\n		$values = array( \r\n			\'cellserver\' => $this->application->cellserver, \r\n			\'specification\' => $specification );\r\n		$failures = $threshold = 0;\r\n		if ( $this->application->database->execute_query( $sql, $values ) ) list ( $failures, $threshold ) = $this->application->database->rows[ 0 ];\r\n		if ( $failures >= $threshold ) {\r\n			$message = sprintf( ACTIONS_ITO_MESSAGE, $sessionstatus, $failures );\r\n			$this->application->create_ticket( $this->application->config[ \'ITO_PRIORITY\' ], $sessionid, $specification, $message );\r\n			$sessionstatus .= sprintf( " (%d.)", $failures );\r\n			$ito = 1;\r\n		}\r\n	}\r\n	$backupmon = 0;\r\n	if ( $this->application->config[ \'BACKUPMON\' ] !== \'\' ) {\r\n		try {\r\n			$name = \'BACKUPMON\';\r\n			$command = sprintf( ACTIONS_BACKUPMON_CMD, $this->application->config[ \'BACKUPMON\' ] );\r\n			$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name ) );\r\n			$backupmon = 1;\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( ACTIONS_ERROR_BACKUPMON, $sessionid, $specification, $e->getmessage( ) ) );\r\n		}\r\n	}\r\n	$this->application->log_action( \r\n		sprintf( ACTIONS_SESSION_LOG, $sessionid, date( \'H:i\', strtotime( $endtime ) ), $sessionstatus, $devices, $objects, $media, $ito, \r\n			$backupmon, $scheduled ) );\r\n	return true;\r\n	}\r\n\r\n	function endofsession() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_SESSIONID );}\r\n		$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'EoS-S-%s\', $this->items[ \'DATA\' ] ) );\r\n		$command = sprintf( ACTIONS_OMNIRPT_SINGLE_SESSION_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->items[ \'DATA\' ] );\r\n		$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n		if ( !file_exists( $file ) ) {\r\n			$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $this->items ) );\r\n			return false;\r\n		}\r\n		$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file );\r\n		foreach ( $lines as $line ) {\r\n			if ( empty( $line ) or ( $line[ 0 ] == \'#\' ) ) continue;\r\n			@list ( $specification, $sessionid, $type, $sessionowner, $status, $mode, $starttime, $starttime_t,\r\n					$endtime, $endtime_t, $queuing, $duration, $gbwritten, $media, $errors, $warnings, $pendingda, $runningda, $failedda, $completedda, $objects, $success ) =\r\n					explode( "\\t", rtrim( $line ) );\r\n					break;\r\n		}\r\n		if ( !isset( $sessionid ) ) {\r\n			throw new exception(\r\n				sprintf( ACTIONS_ERROR_OMNIRPT_INVALID_SINGLE_SESSION_OUTPUT, trim( implode( \'\', $lines ) ) ) );\r\n		}\r\n		if ( $type != \'Backup\' ) {\r\n			return true;\r\n		}\r\n		$sessionstatus = \'failed\';\r\n		if ( stristr( $status, \'mount\' ) ) $sessionstatus = \'in M/R\';\r\n		if ( stristr( $status, \'aborted\' ) ) $sessionstatus = \'aborted\';\r\n		if ( ( $queuing == $duration ) and ( $duration !== "0:00" ) and ( $status !== "Completed" ) and ( $errors = 2 ) ) $sessionstatus = \'timed out\';\r\n		if ( stristr( $status, \'progress\' ) ) $sessionstatus = \'in progress\';\r\n		if ( $success == \'100%\' ) $sessionstatus = \'success\';\r\n		$scheduled = $this->was_scheduled_at( $specification, $this->application->parse_date( $starttime ) );\r\n		$sql = "insert into dataprotector_sessions " .\r\n				"(cellserver,specification,sessionid,scheduled,restartof,type,sessionowner,status,mode," .\r\n				"starttime,starttimet,endtime,endtimet,queuing,duration,gbwritten,media," .\r\n				"errors,warnings,pendingda,runningda,failedda,completedda,objects,success) " .\r\n				"values (\'%cellserver\',\'%specification\',\'%sessionid\',\'%scheduled\',function_restartof(\'%cellserver\',\'%sessionid\')," .\r\n				"\'%type\',\'%sessionowner\',\'%status\',\'%mode\',\'%starttime\',\'%starttimet\',nullif(\'%endtime\',\'\'),\'%endtimet\'," .\r\n				"\'%queuing\',\'%duration\',\'%gbwritten\',\'%media\',\'%errors\',\'%warnings\',\'%pendingda\'," .\r\n				"\'%runningda\',\'%failedda\',\'%completedda\',\'%objects\',\'%success\') on duplicate key update " .\r\n				"status=\'%status\',endtime=nullif(\'%endtime\',\'\'),endtimet=\'%endtimet\',duration=\'%duration\',gbwritten=\'%gbwritten\'," .\r\n				"media=\'%media\',errors=\'%errors\',warnings=\'%warnings\',pendingda=\'%pendingda\',runningda=\'%runningda\'," .\r\n				"failedda=\'%failedda\',completedda=\'%completedda\',objects=\'%objects\',success=\'%success\';";\r\n		$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'specification\' => $specification,\r\n				\'sessionid\' => $sessionid,\r\n				\'scheduled\' => $scheduled,\r\n				\'type\' => $type,\r\n				\'sessionowner\' => $sessionowner,\r\n				\'status\' => $status,\r\n				\'mode\' => $mode,\r\n				\'starttime\' => $this->application->parse_date( $starttime ),\r\n				\'starttimet\' => $starttime_t,\r\n				\'endtime\' => $this->application->parse_date( $endtime ),\r\n				\'endtimet\' => $endtime_t,\r\n				\'queuing\' => $queuing,\r\n				\'duration\' => $duration,\r\n				\'gbwritten\' => $this->application->parse_decimal( $gbwritten ),\r\n				\'media\' => $media,\r\n				\'errors\' => $errors,\r\n				\'warnings\' => $warnings,\r\n				\'pendingda\' => $pendingda,\r\n				\'runningda\' => $runningda,\r\n				\'failedda\' => $failedda,\r\n				\'completedda\' => $completedda,\r\n				\'objects\' => $objects,\r\n				\'success\' => $success );\r\n		$this->application->database->execute_query( $sql, $values );\r\n		$sql = $sql = "update dataprotector_specifications set lastsessionid=\'%sessionid\',";\r\n		if ( $success == \'100% \' ) {\r\n			$sql .= "lastsuccessfulsessionid=\'%sessionid\',success=success+1,failure=0";\r\n		} else {\r\n			$sql .= "success=0,failure=failure+1";\r\n		}\r\n		$sql .= " where cellserver=\'%cellserver\' and name=\'%specification\';";\r\n		$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'specification\' => $specification,\r\n				\'sessionid\' => $sessionid );\r\n		$this->application->database->execute_query( $sql, $values );\r\n		if ( ( $this->application->config[ \'RECYCLE_FAILURES\' ] ) and ( $completedda > 0 ) and ( $success != \'100%\' ) ) {\r\n			try {\r\n				$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'OMNIDB-CP-%s\', $sessionid ) );\r\n				$command = sprintf( ACTIONS_OMNIDB_CHANGE_PROTECTION_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid );\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name ) );\r\n				$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'OMNIDB-CCP-%s\', $sessionid ) );\r\n				$command = sprintf( ACTIONS_OMNIDB_CHANGE_CATPROTECTION_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid );\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name ) );\r\n				$this->application->log_action( sprintf( ACTIONS_SESSION_RECYCLED, $sessionid, $sessionstatus ) );\r\n			}\r\n			catch ( exception $e ) {\r\n				$this->application->log_error( sprintf( ACTIONS_ERROR_SESSION_RECYCLED, $sessionid, $specification, $e->getmessage( ) ) );\r\n			}\r\n		}\r\n		$ito = 0;\r\n		if ( ( $success != \'100%\' ) and \r\n			( strtotime( $this->application->start_time ) - strtotime( $this->application->parse_date( $endtime ) ) < ACTIONS_ITO_THRESHOLD_SECONDS ) ) {\r\n			$sql = "select s1.failure,r1.ticket_threshold from dataprotector_specifications s1 " .\r\n				"left join config_retentions r1 on ((r1.customer=s1.customer or r1.customer is null) and r1.name=s1.retention) " .\r\n				"where s1.cellserver=\'%cellserver\' and s1.name=\'%specification\' order by r1.customer desc limit 1;";\r\n\r\n			$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'specification\' => $specification );\r\n			$failures = $threshold = 0;\r\n			if ( $this->application->database->execute_query( $sql, $values ) ) list ( $failures, $threshold ) = $this->application->database->rows[ 0 ];\r\n			if ( $failures >= $threshold ) {\r\n				$message = sprintf( ACTIONS_ITO_MESSAGE, $sessionstatus, $failures );\r\n				$this->application->create_ticket( $this->application->config[ \'ITO_PRIORITY\' ], $sessionid, $specification, $message );\r\n				$sessionstatus .= sprintf( " (%d.)", $failures );\r\n				$ito = 1;\r\n			}\r\n		}\r\n		$backupmon = 0;\r\n		if ( $this->application->config[ \'BACKUPMON\' ] !== \'\' ) {\r\n			try {\r\n				$name = \'BACKUPMON\';\r\n				$command = sprintf( ACTIONS_BACKUPMON_CMD, $this->application->config[ \'BACKUPMON\' ] );\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name ) );\r\n				$backupmon = 1;\r\n			}\r\n			catch ( exception $e ) {\r\n				$this->application->log_error( sprintf( ACTIONS_ERROR_BACKUPMON, $sessionid, $specification, $e->getmessage( ) ) );\r\n			}\r\n		}\r\n		queue_action( $this->application, \'EndOfSessionDevices\', $sessionid );\r\n		queue_action( $this->application, \'EndOfSessionObjects\', $sessionid );\r\n		queue_action( $this->application, \'EndOfSessionMedia\', $sessionid );\r\n		$this->application->log_action(	sprintf( ACTIONS_SESSION_LOG, \r\n			$sessionid, date( \'H:i\', strtotime( $endtime ) ), $sessionstatus, \'?\', $objects, $media, $ito, $backupmon, $scheduled ) );\r\n		return true;\r\n	}\r\n\r\n	function endofsessiondevices() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_SESSIONID );}\r\n		$sessionid = $this->items[ \'DATA\' ];\r\n		$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'EoS-D-%s\', $sessionid ) );\r\n		$command = sprintf( ACTIONS_OMNIRPT_SESSION_DEVICES_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid );\r\n		$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n		if ( !file_exists( $file ) ) {\r\n			$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $this->items ) );\r\n			return false;\r\n		}\r\n		$devices = 0;\r\n		$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file );\r\n		foreach ( $lines as $line ) {\r\n			if ( empty( $line ) or ( $line[ 0 ] == \'#\' ) ) continue;\r\n			unset( $device );\r\n			@list ( $device, $starttime, $starttime_t, $endtime, $endtime_t, $duration, $gbwritten, $perf ) = explode( "\\t",\r\n					rtrim( $line ) );\r\n			if ( !isset( $device ) or preg_match( \'/^Error/\' , $line ) ) {\r\n				throw new exception( sprintf( ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_DEVICES_OUTPUT, trim( implode( \'\', $lines ) ) ) );\r\n			}\r\n			$sql = "insert into dataprotector_session_devices (cellserver,sessionid,device,starttime,starttimet," .\r\n				"endtime,endtimet,duration,gbwritten,performance) values " .\r\n				"(\'%cellserver\',\'%sessionid\',\'%device\',\'%starttime\',\'%starttimet\'," .\r\n				"nullif(\'%endtime\',\'\'),\'%endtimet\',\'%duration\',\'%gbwritten\',\'%performance\') on duplicate key update " .\r\n				"endtime=nullif(\'%endtime\',\'\'), endtimet=\'%endtimet\', duration=\'%duration\'," .\r\n				"gbwritten=\'%gbwritten\', performance=\'%performance\';";\r\n			$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'sessionid\' => $sessionid,\r\n				\'device\' => substr( $device, 0, 32 ),\r\n				\'starttime\' => $this->application->parse_date( $starttime ),\r\n				\'starttimet\' => $starttime_t,\r\n				\'endtime\' => $this->application->parse_date( $endtime ),\r\n				\'endtimet\' => $endtime_t,\r\n				\'duration\' => $duration,\r\n				\'gbwritten\' => $this->application->parse_decimal( $gbwritten ),\r\n				\'performance\' => $this->application->parse_decimal( $perf ) );\r\n			$this->application->database->execute_query( $sql, $values );\r\n			$devices++;\r\n		}\r\n		$this->application->log_action(	sprintf( \'Session "%s" used %s devices\', $sessionid, $devices ) );\r\n		return true;\r\n	}\r\n\r\n	function endofsessionobjects() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_SESSIONID );}\r\n		$sessionid = $this->items[ \'DATA\' ];\r\n		$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'EoS-O-%s\', $sessionid ) );\r\n		$command = sprintf( ACTIONS_OMNIRPT_SESSION_OBJECTS_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid );\r\n		$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n		if ( !file_exists( $file ) ) {\r\n			$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $this->items ) );\r\n			return false;\r\n		}\r\n		$objects = 0;\r\n		$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file );\r\n		$clients = array();\r\n		$sql = "delete from dataprotector_session_objects where cellserver=\'%cellserver\' and sessionid=\'%sessionid\';";\r\n		$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'sessionid\' => $sessionid );\r\n		$this->application->database->execute_query( $sql, $values );\r\n		foreach ( $lines as $line ) {\r\n			if ( empty( $line ) or ( $line[ 0 ] == \'#\' ) ) continue;\r\n			unset( $object_type );\r\n			if ( preg_match( \'/Object Name/\', implode( PHP_EOL, $lines ) ) ) {\r\n				@list ( $object_type, $client, $mountpoint, $description, $objectname, $status, $mode, $starttime, $starttime_t,\r\n					$endtime, $endtime_t, $duration, $kbwritten, $files, $perf, $protection, $errors, $warnings, $device ) =\r\n					explode( "\\t", rtrim( $line ) );\r\n			} else {\r\n				@list ( $object_type, $client, $mountpoint, $description, $status, $mode, $starttime, $starttime_t,\r\n					$endtime, $endtime_t, $duration, $kbwritten, $files, $perf, $protection, $errors, $warnings, $device ) =\r\n					explode( "\\t", rtrim( $line ) );\r\n			}\r\n			if ( !isset( $object_type ) or preg_match( \'/^Error/\' , $line ) ) {\r\n				throw new exception( sprintf( ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_OBJECTS_OUTPUT, trim( implode( \'\', $lines ) ) ) );\r\n			}\r\n			$sql = "insert into dataprotector_session_objects (cellserver,sessionid,type,client,mountpoint,description,status,mode," .\r\n				"starttime,starttimet,endtime,endtimet,duration,kbwritten,files,performance,protection,errors,warnings,device) " .\r\n				"values (\'%cellserver\',\'%sessionid\',\'%type\',\'%client\',\'%mountpoint\',\'%description\',\'%status\'," .\r\n				"\'%mode\',\'%starttime\',\'%starttimet\',nullif(\'%endtime\',\'\'),\'%endtimet\',\'%duration\'," .\r\n				"\'%kbwritten\',\'%files\',\'%performance\',nullif(\'%protection\',\'\'),\'%errors\',\'%warnings\',\'%device\') " .\r\n				"on duplicate key update " .\r\n				"status=\'%status\', endtime=nullif(\'%endtime\',\'\'), endtimet=\'%endtimet\', duration=\'%duration\', " .\r\n				"kbwritten=\'%kbwritten\', files=\'%files\', performance=\'%performance\', protection=nullif(\'%protection\',\'\'), " .\r\n				"errors=\'%errors\', warnings=\'%warnings\';";\r\n			$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'sessionid\' => $sessionid,\r\n				\'type\' => $object_type,\r\n				\'client\' => substr( $client, 0, 64 ),\r\n				\'mountpoint\' => $this->application->database->escape_string( substr( $mountpoint, 0, 127 ) ),\r\n				\'description\' => $this->application->database->escape_string( substr( $description, 0, 127 ) ),\r\n				\'status\' => $status,\r\n				\'mode\' => $mode,\r\n				\'starttime\' => $this->application->parse_date( $starttime ),\r\n				\'starttimet\' => $starttime_t,\r\n				\'endtime\' => $this->application->parse_date( $endtime ),\r\n				\'endtimet\' => $endtime_t,\r\n				\'duration\' => $duration,\r\n				\'kbwritten\' => $this->application->parse_decimal( $kbwritten ),\r\n				\'files\' => $files,\r\n				\'performance\' => $this->application->parse_decimal( $perf ),\r\n				\'protection\' => $this->application->parse_date( $protection ),\r\n				\'errors\' => $errors,\r\n				\'warnings\' => $warnings,\r\n				\'device\' => substr( $device, 0, 32 ) );\r\n			$this->application->database->execute_query( $sql, $values );\r\n			$clients[ ] = array(\r\n					\'name\' => $client,\r\n					\'type\' => $object_type );\r\n			$objects++;\r\n		}\r\n		foreach ( super_unique( $clients ) as $client ) {\r\n			$name = $client[ \'name\' ];\r\n			$type = $client[ \'type\' ];\r\n			$sql = "select ifnull(c1.name, s1.customer) as customer from dataprotector_sessions s " .\r\n					"left join dataprotector_specifications s1 on ( s1.cellserver=s.cellserver and s1.name = s.specification )" .\r\n					"left join config_customers c1 on (\'%name\' regexp replace(c1.fqdn,\'.\',\'\\\\.\')) " .\r\n					"where s.cellserver=\'%cellserver\' and s.sessionid = \'%sessionid\' limit 1;";\r\n			$values = array(\r\n					\'name\' => $name,\r\n					\'sessionid\' => $sessionid,\r\n					\'cellserver\' => $this->application->cellserver );\r\n			$this->application->database->execute_query( $sql, $values );\r\n			if ( $this->application->database->row_count == 1 ) {\r\n				$customer = $this->application->database->rows[ 0 ][ \'customer\' ];\r\n			} else {\r\n				$customer = \'\';\r\n			}\r\n			$sql = "insert into dataprotector_clients (cellserver,name,type,customer,specifications,mountpoints) values " .\r\n					"(\'%cellserver\',\'%name\',\'%type\',nullif(\'%customer\',\'\'),%specifications,%mountpoints) " .\r\n					"on duplicate key update customer=nullif(\'%customer\',\'\');";\r\n			$values = array(\r\n					\'cellserver\' => $this->application->cellserver,\r\n					\'name\' => $name,\r\n					\'type\' => $type,\r\n					\'customer\' => $customer,\r\n					\'specifications\' => 1,\r\n					\'mountpoints\' => $objects );\r\n			$this->application->database->execute_query( $sql, $values );\r\n		}\r\n		$this->application->log_action(	sprintf( \'Session "%s" had %s objects\', $sessionid, $objects ) );\r\n		return true;\r\n	}\r\n		\r\n	function endofsessionmedia() {\r\n		if ( empty( $this->items[ \'DATA\' ] ) ) {throw new exception( ACTIONS_ERROR_EMPTY_SESSIONID );}\r\n		$sessionid = $this->items[ \'DATA\' ];\r\n		$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'EoS-M-%s\', $sessionid ) );\r\n		$command = sprintf( ACTIONS_OMNIRPT_SESSION_MEDIA_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid );\r\n		$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n		if ( !file_exists( $file ) ) {\r\n			$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $this->items ) );\r\n			return false;\r\n		}\r\n		$media = 0;\r\n		$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file );\r\n		$clients = array();\r\n		$sql = "delete from dataprotector_session_objects where cellserver=\'%cellserver\' and sessionid=\'%sessionid\';";\r\n		$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'sessionid\' => $sessionid );\r\n		$this->application->database->execute_query( $sql, $values );\r\n		foreach ( $lines as $line ) {\r\n			if ( empty( $line ) or ( $line[ 0 ] == \'#\' ) ) continue;\r\n			unset( $mediumid );\r\n			@list ( $mediumid, $label, $location, $pool, $protection, $used, $total, $lastused, $lastused_t ) =\r\n			explode( "\\t", rtrim( $line ) );\r\n			if ( !isset( $mediumid ) or preg_match( \'/^Error/\' , $line ) ) {\r\n				throw new exception( sprintf( ACTIONS_ERROR_OMNIRPT_INVALID_SESSION_MEDIA_OUTPUT, trim( implode( \'\', $lines ) ) ) );\r\n			}\r\n			$sql = "insert into dataprotector_session_media (cellserver,sessionid,mediumid,label,location,pool," .\r\n				"protection,used,total,lastused,lastusedt) values " .\r\n				"(\'%cellserver\',\'%sessionid\',\'%mediumid\',\'%label\',\'%location\',\'%pool\'," .\r\n				"nullif(\'%protection\',\'\'),\'%used\',\'%total\',\'%lastused\',\'%lastusedt\') on duplicate key update " .\r\n				"protection=nullif(\'%protection\',\'\'), used=\'%used\', total=\'%total\',lastused=\'%lastused\', lastusedt=\'%lastusedt\';";\r\n			$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'sessionid\' => $sessionid,\r\n				\'mediumid\' => $mediumid,\r\n				\'label\' => $label,\r\n				\'location\' => $location,\r\n				\'pool\' => $pool,\r\n				\'protection\' => $this->application->parse_date( $protection ),\r\n				\'used\' => $this->application->parse_decimal( $used ),\r\n				\'total\' => $this->application->parse_decimal( $total ),\r\n				\'lastused\' => $this->application->parse_date( $lastused ),\r\n				\'lastusedt\' => $lastused_t );\r\n			$this->application->database->execute_query( $sql, $values );\r\n			$media++;\r\n		}\r\n		$this->application->log_action(	sprintf( \'Session "%s" used %s media\', $sessionid, $media ) );\r\n		return true;\r\n	}\r\n}\r\n\r\n\r\nfunction super_unique($array) {\r\n	$result = array_map("unserialize", array_unique(array_map("serialize", $array)));\r\n	foreach ($result as $key => $value) {\r\n		if ( is_array($value) ) {\r\n			$result[$key] = super_unique($value);\r\n		}\r\n	}\r\n	return $result;\r\n}\r\n\r\nfunction execute_actions( $application, $name = \'\', $data = \'\' ) {\r\n\r\n	$sql = "select if(name regexp \'UPDATE|ENDOFSESSION$\',1,if(data regexp \'OMNISTAT|LOCKED\',3,2)) as prio, " . \r\n		"id,timestamp,cellserver,name,data,valid_from,valid_until,executed_on " .\r\n		"from mars_queue where cellserver=\'%cellserver\' and valid_from<=\'%now\' " .\r\n		"and ((valid_until is null) or (valid_until>=\'%time\')) " . \r\n		"and ((name=\'%name\') or (\'%name\'=\'\' and executed_on is null)) " . \r\n		"and ((data=\'%data\') or (\'%data\'=\'\' and executed_on is null)) " .\r\n		"order by prio,timestamp limit 1;";\r\n	$values = array( \r\n		\'cellserver\' => $application->cellserver,\r\n		\'time\' => $application->start_time, \r\n		\'now\' => date( $application->config[ \'TIME_FORMAT\' ] ),\r\n		\'name\' => $name,\r\n		\'data\' => $data\r\n	);\r\n	$application->database->execute_query( $sql, $values );\r\n	$rows = $application->database->row_count;\r\n	if ( $rows == 1 ) {\r\n		$row = $application->database->rows[ 0 ];\r\n		$id = $row[ \'id\' ];\r\n		$sql = "update mars_queue set executed_on=\'%now\' where id=\'%id\';";\r\n		$values = array( \r\n			\'now\' => date( $application->config[ \'TIME_FORMAT\' ] ),\r\n			\'id\' => $id );\r\n		$application->database->execute_query( $sql, $values );\r\n		$action = new mars_action( $application, $row );\r\n		if ( $action->execute( ) ) {\r\n			$sql = "delete from mars_queue where id=\'%id\';";\r\n			$values = array( \r\n				\'now\' => date( $application->config[ \'TIME_FORMAT\' ] ),\r\n				\'id\' => $id );\r\n			$application->database->execute_query( $sql, $values );\r\n		}\r\n	}\r\n	return $rows;\r\n}\r\n\r\nfunction queue_action( $application, $name, $data, $delay = 0, $valid = 0 ) {\r\n	$valid_from = ( $delay == 0 ) ? $application->start_time : date( $application->config[ \'TIME_FORMAT\' ], \r\n		strtotime( sprintf( \'+%d minutes\', $delay ), strtotime( $application->start_time ) ) );\r\n	$valid_until = ( $valid == 0 ) ? \'\' : date( $application->config[ \'TIME_FORMAT\' ], \r\n		strtotime( sprintf( \'+%d minutes\', $valid ), strtotime( $application->start_time ) ) );\r\n	$sql = "insert into mars_queue (timestamp, cellserver, name, data, valid_from, valid_until ) " .\r\n		 "values (\'%timestamp\', \'%cellserver\', \'%name\', \'%data\', \'%valid_from\', nullif( \'%valid_until\', \'\' ) ) " .\r\n		 "on duplicate key update valid_from=nullif(\'%valid_from\',\'\'), valid_until=nullif(\'%valid_until\',\'\'), executed_on=null";\r\n	$values = array( \r\n		\'timestamp\' => date( $application->config[ \'TIME_FORMAT\' ] ), \r\n		\'cellserver\' => $application->cellserver, \r\n		\'name\' => $name, \r\n		\'data\' => $data, \r\n		\'valid_from\' => $valid_from, \r\n		\'valid_until\' => $valid_until );\r\n	$application->database->execute_query( $sql, $values );\r\n	return true;\r\n}\r\n', '2013-01-01 00:00:00', '2017-01-27 13:11:58', NULL),
	(7, 'inc/database.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 MYSQL DATABASE MANAGEMENT PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'DATABASE_NAME\', \'Generic SQL\' );\r\ndefine( \'DATABASE_ERROR\', \'%s. %s error %s: "%s"\' );\r\ndefine( \'DATABASE_NOT_CONNECTED\', \'Database not connected\' );\r\ndefine( \'DATABASE_INFO\', \'%s database\' );\r\ndefine( \'DATABASE_CONNECTED\', \'%s database "%s@%s" connected.\' );\r\ndefine( \'DATABASE_DURATION_PRECISION\', 3 );\r\ndefine( \'DATABASE_SELECTED\', \'Database "%s" selected.\' );\r\ndefine( \'DATABASE_CHARSET_SET\', \'Charset "%s" set.\' );\r\ndefine( \'DATABASE_STRING_ESCAPED\', \'String "%s" escaped.\' );\r\ndefine( \'DATABASE_QUERY_EXECUTED\', \'Query #%s executed.\' );\r\ndefine( \'DATABASE_QUERY_FREE\', \'Query #%s results released.\' );\r\n\r\ndefine( \'MYSQL_NO_SUPPORT\', \'MySQL support not installed in PHP.\' );\r\ndefine( \'MYSQL_NAME\', \'MySQL\' );\r\ndefine( \'MYSQL_HOST\', \'127.0.0.1\' );\r\ndefine( \'MYSQL_PORT\', \'3306\' );\r\ndefine( \'MYSQL_USER\', \'root\' );\r\ndefine( \'MYSQL_PASSWORD\', \'\' );\r\ndefine( \'MYSQL_DATABASE\', \'mysql\' );\r\ndefine( \'MYSQL_ERROR\', \'%s. %s error %s: "%s" (%s. try) in "%s".\' );\r\ndefine( \'MYSQL_DATABASE_INFO\', \'%s database %s on %s\' );\r\ndefine( \'MYSQL_DATABASE_NOT_SELECTED\', \'Database not selected\' );\r\ndefine( \'MYSQL_CHARSET_NOT_SET\', \'Charset not set\' );\r\ndefine( \'MYSQL_STRING_NOT_ESCAPED\', \'String not escaped\' );\r\ndefine( \'MYSQL_QUERY_NOT_EXECUTED\', \'Query not executed\' );\r\ndefine( \'MYSQL_QUERY_NOT_FREE\', \'Query results not freed\' );\r\ndefine( \'MYSQL_ROWS_SELECTED\', \'Rows selected: %s\' );\r\ndefine( \'MYSQL_RETRY_ERRORS\', serialize( array( \r\n	1205, \r\n	1213 ) ) );\r\ndefine( \'MYSQL_RETRY_DELAY\', 100000 );\r\ndefine( \'MYSQL_RETRY_MAX\', 3 );\r\ndefine( \'MYSQL_START_TRANSACTION\', \'START TRANSACTION;\');\r\ndefine( \'MYSQL_COMMIT\', \'COMMIT;\');\r\n\r\ndefine( \'MYSQLI_NO_SUPPORT\', \'MySQLi support not installed in PHP.\' );\r\ndefine( \'MYSQLI_NAME\', \'MySQLi\' );\r\ndefine( \'MYSQLI_STRING\', \'string\' );\r\ndefine( \'MYSQLI_INT\', \'int\' );\r\ndefine( \'MYSQLI_REAL\', \'real\' );\r\ndefine( \'MYSQLI_TIMESTAMP\', \'timestamp\' );\r\ndefine( \'MYSQLI_DATETIME\', \'datetime\' );\r\ndefine( \'MYSQLI_BLOB\', \'blob\' );\r\ndefine( \'MYSQLI_OTHER\', \'other\' );\r\n\r\nclass sql_database {\r\n	var $class_name = DATABASE_NAME;\r\n	var $host;\r\n	var $user;\r\n	var $password;\r\n	var $database;\r\n	var $handler;\r\n	var $db_info;\r\n	var $error;\r\n	var $message;\r\n	var $charset;\r\n	var $queries;\r\n	var $durations;\r\n	var $sql;\r\n	var $query;\r\n	var $field_count;\r\n	var $fields;\r\n	var $row_count;\r\n	var $rows;\r\n	var $insert_id;\r\n	var $duration;\r\n	var $query_info;\r\n\r\n	function sql_database( $host = \'\', $user = \'\', $password = \'\' ) {\r\n		$this->host = $host;\r\n		$this->user = $user;\r\n		$this->password = $password;\r\n		$this->database = \'\';\r\n		$this->handler = null;\r\n		$this->db_info = sprintf( DATABASE_INFO, $this->class_name );\r\n		$this->error = 0;\r\n		$this->message = sprintf( DATABASE_CONNECTED, $this->class_name, $this->user, $this->host );\r\n		$this->charset = \'\';\r\n		$this->queries = 0;\r\n		$this->durations = 0;\r\n		$this->sql = \'\';\r\n		$this->query = null;\r\n		$this->field_count = 0;\r\n		$this->fields = array();\r\n		$this->row_count = 0;\r\n		$this->rows = array();\r\n		$this->insert_id = 0;\r\n		$this->duration = 0;\r\n		$this->query_info = \'\';\r\n	}\r\n\r\n	function is_connected() {\r\n		return is_resource( $this->handler );\r\n	}\r\n\r\n	function select_database( $database = \'\' ) {\r\n		if ( !$this->is_connected( ) ) {throw new exception( \r\n				sprintf( DATABASE_ERROR, DATABASE_NOT_CONNECTED, $this->class_name, $this->error, $this->message ) );}\r\n		$this->database = $database;\r\n		$this->error = 0;\r\n		$this->message = sprintf( DATABASE_SELECTED, $this->database );\r\n		$this->charset = \'\';\r\n		$this->sql = \'\';\r\n		$this->query = null;\r\n		$this->field_count = 0;\r\n		$this->fields = array();\r\n		$this->row_count = 0;\r\n		$this->rows = array();\r\n		$this->insert_id = 0;\r\n		$this->duration = 0;\r\n		$this->query_info = \'\';\r\n	}\r\n\r\n	function set_charset( $charset = \'\' ) {\r\n		if ( !$this->is_connected( ) ) {throw new exception( \r\n				sprintf( DATABASE_ERROR, DATABASE_NOT_CONNECTED, $this->class_name, $this->error, $this->message ) );}\r\n		$this->charset = $charset;\r\n		$this->error = 0;\r\n		$this->message = sprintf( DATABASE_CHARSET_SET, $this->charset );\r\n		$this->sql = \'\';\r\n		$this->query = null;\r\n		$this->field_count = 0;\r\n		$this->fields = array();\r\n		$this->row_count = 0;\r\n		$this->rows = array();\r\n		$this->insert_id = 0;\r\n		$this->duration = 0;\r\n		$this->query_info = \'\';\r\n	}\r\n\r\n	function escape_string( $string = \'\' ) {\r\n		if ( !$this->is_connected( ) ) {throw new exception( \r\n				sprintf( DATABASE_ERROR, DATABASE_NOT_CONNECTED, $this->class_name, $this->error, $this->message ) );}\r\n		$this->error = 0;\r\n		$this->message = sprintf( DATABASE_STRING_ESCAPED, $string );\r\n		return $string;\r\n	}\r\n\r\n	function execute_query( $sql = \'\' ) {\r\n		if ( !$this->is_connected( ) ) {throw new exception( \r\n				sprintf( DATABASE_ERROR, DATABASE_NOT_CONNECTED, $this->class_name, $this->error, $this->message ) );}\r\n		$this->queries++;\r\n		$this->sql = $sql;\r\n		$this->query = null;\r\n		$this->error = 0;\r\n		$this->message = sprintf( DATABASE_QUERY_EXECUTED, $this->queries );\r\n		$this->field_count = 0;\r\n		$this->fields = array();\r\n		$this->row_count = 0;\r\n		$this->rows = array();\r\n		$this->insert_id = 0;\r\n		$this->duration = microtime( true );\r\n		$this->query_info = \'\';\r\n	}\r\n\r\n	function free_query() {\r\n		if ( !$this->is_connected( ) ) {throw new exception( \r\n				sprintf( DATABASE_ERROR, DATABASE_NOT_CONNECTED, $this->class_name, $this->error, $this->message ) );}\r\n		$this->sql = \'\';\r\n		$this->query = null;\r\n		$this->error = 0;\r\n		$this->message = sprintf( DATABASE_QUERY_FREE, $this->queries );\r\n		$this->field_count = 0;\r\n		$this->fields = array();\r\n		$this->row_count = 0;\r\n		$this->rows = array();\r\n		$this->insert_id = 0;\r\n		$this->duration = 0;\r\n		$this->query_info = \'\';\r\n	}\r\n}\r\n\r\nclass mysql_database extends sql_database {\r\n	var $class_name = MYSQL_NAME;\r\n\r\n	function mysql_database( $host = MYSQL_HOST, $user = MYSQL_USER, $password = MYSQL_PASSWORD ) {\r\n		if ( !mod_mysql( ) ) throw new exception( MYSQL_NO_SUPPORT );\r\n		parent::sql_database( $host, $user, $password );\r\n		$this->handler = mysql_connect( $this->host, $this->user, $this->password );\r\n		if ( !$this->is_connected( ) ) {\r\n			$this->handler = null;\r\n			$this->db_info = $this->message;\r\n			$this->error = mysql_errno( );\r\n			$this->message = trim( mysql_error( ) );\r\n			throw new exception( sprintf( DATABASE_ERROR, DATABASE_NOT_CONNECTED, $this->class_name, $this->error, $this->message ) );\r\n			return false;\r\n		}\r\n		$this->db_info = sprintf( MYSQL_DATABASE_INFO, $this->class_name, mysql_get_server_info( $this->handler ), \r\n			mysql_get_host_info( $this->handler ) );\r\n		return true;\r\n	}\r\n\r\n	function select_database( $database = \'\' ) {\r\n		parent::select_database( $database );\r\n		if ( !mysql_select_db( $database, $this->handler ) ) {\r\n			$this->database = \'\';\r\n			$this->error = mysql_errno( $this->handler );\r\n			$this->message = trim( mysql_error( $this->handler ) );\r\n			throw new exception( sprintf( DATABASE_ERROR, MYSQL_DATABASE_NOT_SELECTED, $this->class_name, $this->error, $this->message ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function set_charset( $charset = \'\' ) {\r\n		parent::set_charset( $charset );\r\n		if ( !mysql_set_charset( $charset, $this->handler ) ) {\r\n			$this->charset = \'\';\r\n			$this->error = mysql_errno( $this->handler );\r\n			$this->message = trim( mysql_error( $this->handler ) );\r\n			throw new exception( sprintf( DATABASE_ERROR, MYSQL_CHARSET_NOT_SET, $this->class_name, $this->error, $this->message ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function escape_string( $string = \'\' ) {\r\n		$result = mysql_real_escape_string( parent::escape_string( $string ), $this->handler );\r\n		if ( $result === false ) {\r\n			$this->error = mysql_errno( $this->handler );\r\n			$this->message = trim( mysql_error( $this->handler ) );\r\n			throw new exception( sprintf( DATABASE_ERROR, MYSQL_STRING_NOT_ESCAPED, $this->class_name, $this->error, $this->message ) );\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function execute_query( $sql = \'\', $values = array( ) ) {\r\n		krsort( $values );\r\n		foreach ( $values as $key => $value ) {\r\n			$sql = str_replace( \'%\' . $key, $value, $sql );\r\n		}\r\n		parent::execute_query( $sql );\r\n		$try = 0;\r\n		while ( $this->query === null ) {\r\n			usleep( $try * MYSQL_RETRY_DELAY );\r\n			$try++;\r\n			$this->query = mysql_query( $this->sql, $this->handler );\r\n			!$this->query and ( $try < MYSQL_RETRY_MAX ) and\r\n				 in_array( mysql_errno( $this->handler ), unserialize( MYSQL_RETRY_ERRORS ) ) && $this->query = null;\r\n		}\r\n		if ( !$this->query ) {\r\n			$this->duration = 0;\r\n			$this->error = mysql_errno( $this->handler );\r\n			$this->message = trim( mysql_error( $this->handler ) );\r\n			throw new exception( \r\n				sprintf( MYSQL_ERROR, MYSQL_QUERY_NOT_EXECUTED, $this->class_name, $this->error, $this->message, $try, $this->sql ) );\r\n			return false;\r\n		}\r\n		if ( is_resource( $this->query ) ) {\r\n			$this->field_count = mysql_num_fields( $this->query );\r\n			while ( $field = mysql_fetch_field( $this->query ) ) {\r\n				$this->fields[ ] = $field;\r\n			}\r\n			$this->row_count = mysql_num_rows( $this->query );\r\n			while ( $row = mysql_fetch_array( $this->query ) ) {\r\n				$this->rows[ ] = $row;\r\n			}\r\n			$this->query_info = sprintf( MYSQL_ROWS_SELECTED, $this->row_count );\r\n		} else {\r\n			$this->query_info = mysql_info( $this->handler );\r\n			$this->row_count = mysql_affected_rows( $this->handler );\r\n			$this->insert_id = mysql_insert_id( $this->handler );\r\n		}\r\n		$this->duration = round( microtime( true ) - $this->duration, DATABASE_DURATION_PRECISION );\r\n		$this->durations = $this->durations + $this->duration;\r\n		return $this->row_count;\r\n	}\r\n\r\n	function start_transaction() {\r\n		$this->execute_query( MYSQL_START_TRANSACTION );\r\n	}\r\n	\r\n	function commit() {\r\n		$this->execute_query( MYSQL_COMMIT );\r\n	}\r\n	\r\n	function free_query() {\r\n		$query = $this->query;\r\n		parent::free_query( );\r\n		if ( is_resource( $query ) and !mysql_free_result( $query ) ) {\r\n			$this->error = mysql_errno( $this->handler );\r\n			$this->message = trim( mysql_error( $this->handler ) );\r\n			throw new exception( sprintf( DATABASE_ERROR, MYSQL_QUERY_NOT_FREE, $this->class_name, $this->error, $this->message ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n}\r\n\r\nclass mysqli_database extends sql_database {\r\n	var $class_name = MYSQLI_NAME;\r\n	var $port;\r\n\r\n	function mysqli_database( $host = MYSQL_HOST, $user = MYSQL_USER, $password = MYSQL_PASSWORD, $database = MYSQL_DATABASE, $port = MYSQL_PORT ) {\r\n		if ( !mod_mysqli( ) ) throw new exception( MYSQLI_NO_SUPPORT );\r\n		parent::sql_database( $host, $user, $password );\r\n		$this->database = $database;\r\n		$this->port = $port;\r\n		$this->handler = @new mysqli( $this->host, $this->user, $this->password, $database, $port );\r\n		if ( !$this->is_connected( ) ) {\r\n			$this->db_info = $this->message;\r\n			if ( version_compare( phpversion( ), \'5.3.0\', \'>=\') ) {\r\n				$this->error = $this->handler->errno;\r\n				$this->message = trim( $this->handler->error );\r\n			} else {\r\n				$this->error = mysqli_connect_errno( );\r\n				$this->message = trim( mysqli_connect_error( ) );\r\n			}\r\n			throw new exception( sprintf( DATABASE_ERROR, DATABASE_NOT_CONNECTED, $this->class_name, $this->error, $this->message ) );\r\n			$this->handler = null;\r\n			return false;\r\n		}\r\n		$this->db_info = sprintf( MYSQL_DATABASE_INFO, $this->class_name, $this->handler->client_info,\r\n				$this->handler->host_info );\r\n		return true;\r\n	}\r\n\r\n	function is_connected() {\r\n		if ( version_compare( phpversion( ), \'5.3.0\', \'>=\') ) {\r\n			return !$this->handler->connect_error;\r\n		} else {\r\n			return !mysqli_connect_error( );\r\n		}\r\n	}\r\n	\r\n	function select_database( $database = \'\' ) {\r\n		parent::select_database( $database );\r\n		if ( !$this->handler->select_db( $database ) ) {\r\n			$this->database = \'\';\r\n			$this->error = $this->handler->errno;\r\n			$this->message = trim( $this->handler->error );\r\n			throw new exception( sprintf( DATABASE_ERROR, MYSQL_DATABASE_NOT_SELECTED, $this->class_name, $this->error, $this->message ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function set_charset( $charset = \'\' ) {\r\n		parent::set_charset( $charset );\r\n		if ( !$this->handler->set_charset( $charset ) ) {\r\n			$this->charset = \'\';\r\n			$this->error = $this->handler->errno;\r\n			$this->message = trim( $this->handler->error );\r\n			throw new exception( sprintf( DATABASE_ERROR, MYSQL_CHARSET_NOT_SET, $this->class_name, $this->error, $this->message ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function escape_string( $string = \'\' ) {\r\n		$result = $this->handler->escape_string( parent::escape_string( $string ) );\r\n		if ( $result === false ) {\r\n			$this->error = $this->handler->errno;\r\n			$this->message = trim( $this->handler->error );\r\n			throw new exception( sprintf( DATABASE_ERROR, MYSQL_STRING_NOT_ESCAPED, $this->class_name, $this->error, $this->message ) );\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function execute_query( $sql = \'\', $values = array( ) ) {\r\n		krsort( $values );\r\n		foreach ( $values as $key => $value ) {\r\n			$sql = str_replace( \'%\' . $key, $value, $sql );\r\n		}\r\n		parent::execute_query( $sql );\r\n		$try = 0;\r\n		while ( $this->query === null ) {\r\n			usleep( $try * MYSQL_RETRY_DELAY );\r\n			$try++;\r\n			$this->query = $this->handler->query( $this->sql );\r\n			!$this->query and ( $try < MYSQL_RETRY_MAX ) and\r\n			in_array( $this->handler->errno, unserialize( MYSQL_RETRY_ERRORS ) ) && $this->query = null;\r\n		}\r\n		if ( !$this->query ) {\r\n			$this->duration = 0;\r\n			$this->error = $this->handler->errno;\r\n			$this->message = trim( $this->handler->error );\r\n			throw new exception(\r\n					sprintf( MYSQL_ERROR, MYSQL_QUERY_NOT_EXECUTED, $this->class_name, $this->error, $this->message, $try, $this->sql ) );\r\n			return false;\r\n		}\r\n		if ( is_object( $this->query ) ) {\r\n			$this->field_count = $this->query->field_count;\r\n			while ( $field = $this->query->fetch_field( ) ) {\r\n				$field->typeid = $field->type;\r\n				switch ( $field->typeid ) {\r\n					case MYSQLI_TYPE_CHAR:\r\n					case MYSQLI_TYPE_STRING: \r\n					case MYSQLI_TYPE_VAR_STRING:\r\n						$field->type = MYSQLI_STRING; break; \r\n					case MYSQLI_TYPE_SHORT:\r\n					case MYSQLI_TYPE_LONG:\r\n					case MYSQLI_TYPE_LONGLONG:\r\n					case MYSQLI_TYPE_INT24:\r\n						$field->type = MYSQLI_INT; break;\r\n					case MYSQLI_TYPE_FLOAT:\r\n					case MYSQLI_TYPE_DOUBLE:\r\n					case MYSQLI_TYPE_DECIMAL:\r\n					case MYSQLI_TYPE_NEWDECIMAL:\r\n						$field->type = MYSQLI_REAL;break;\r\n					case MYSQLI_TYPE_TIMESTAMP:\r\n						$field->type = MYSQLI_TIMESTAMP; break;\r\n					case MYSQLI_TYPE_YEAR:\r\n					case MYSQLI_TYPE_DATE:\r\n					case MYSQLI_TYPE_TIME:\r\n					case MYSQLI_TYPE_DATETIME:\r\n					case MYSQLI_TYPE_NEWDATE:\r\n						$field->type = MYSQLI_DATETIME; break;\r\n					case MYSQLI_TYPE_TINY_BLOB:\r\n					case MYSQLI_TYPE_MEDIUM_BLOB:\r\n					case MYSQLI_TYPE_LONG_BLOB:\r\n					case MYSQLI_TYPE_BLOB:\r\n						$field->type = MYSQLI_BLOB; break;\r\n					case MYSQLI_TYPE_NULL:\r\n					case MYSQLI_TYPE_INTERVAL:\r\n					case MYSQLI_TYPE_SET:\r\n					case MYSQLI_TYPE_GEOMETRY:\r\n					case MYSQLI_TYPE_BIT:\r\n					default:\r\n						$field->type = MYSQLI_OTHER;\r\n				}\r\n				$this->fields[ ] = $field;\r\n			}\r\n			$this->row_count = $this->query->num_rows;\r\n			while ( $row = $this->query->fetch_array( ) ) {\r\n				$this->rows[ ] = $row;\r\n			}\r\n			$this->query_info = sprintf( MYSQL_ROWS_SELECTED, $this->row_count );\r\n			$this->query->free();\r\n		} else {\r\n			$this->query_info = $this->handler->info;\r\n			$this->row_count = $this->handler->affected_rows;\r\n			$this->insert_id = $this->handler->insert_id;\r\n		}\r\n		$this->duration = round( microtime( true ) - $this->duration, DATABASE_DURATION_PRECISION );\r\n		$this->durations = $this->durations + $this->duration;\r\n		return $this->row_count;\r\n	}\r\n\r\n	function start_transaction() {\r\n		$this->handler->autocommit( FALSE );\r\n	}\r\n\r\n	function commit() {\r\n		$this->handler->commit( );\r\n		$this->handler->autocommit( TRUE );\r\n	}\r\n\r\n	function rollback() {\r\n		$this->handler->rollback( );\r\n		$this->handler->autocommit( TRUE );\r\n	}\r\n	\r\n}\r\n\r\nfunction mod_mysql() {\r\n	return function_exists( \'mysql_connect\' );\r\n}\r\n\r\nfunction mod_mysqli() {\r\n	return class_exists( \'mysqli\' );\r\n}\r\n', '2013-01-01 00:00:00', '2016-02-18 09:33:20', NULL),
	(8, 'inc/notifications.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 NOTIFICATIONS PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'NOTIFICATIONS\', \r\n	// DP7 (FILELIBRARYDISKUSAGE, IDBFCNEEDED, IDBSPACELOW, UXMEDIAAGENTWARNING)\r\n	\'ALARM,CSASTARTSESSIONFAILED,DEVICEERROR,ENDOFCOPY,ENDOFSESSION,HEALTHCHECKFAILED,DBCORRUPTED,DBPURGENEEDED,DBSPACELOW\' .\r\n		 \'DBTABLESPACELOW,LICENSEWILLEXPIRE,LICENSEWARNING,MAILSLOTSFULL,MOUNTREQUEST,NOTENOUGHFREEMEDIA,SESSIONERROR\' .\r\n		 \'STARTOFCOPY,STARTOFSESSION,UNEXPECTEDEVENTS,USERCHECKFAILED\' . \r\n	// DP8\r\n		\',DBBACKUPNEEDED\' );\r\ndefine( \'NOTIFICATIONS_QUEUE\', \'queue\' );\r\ndefine( \'NOTIFICATIONS_HISTORY\', \'history\' );\r\ndefine( \'NOTIFICATIONS_TMP\', \'tmp\' );\r\ndefine( \'NOTIFICATIONS_INVALID\', \'Invalid notification "%s".\' );\r\ndefine( \'NOTIFICATIONS_UNHANDLED\', \'Unhandled notification (see "%s").\' );\r\ndefine( \'NOTIFICATIONS_ERROR\', \'Error: %s: %s\' );\r\ndefine( \'NOTIFICATIONS_ALARM_PREFIX\', \'AM1\' );\r\ndefine( \'NOTIFICATIONS_ALARM\', \'Alarm "%s".\' );\r\ndefine( \'NOTIFICATIONS_CSASTARTSESSIONFAILED_PREFIX\', \'SS1\' );\r\ndefine( \'NOTIFICATIONS_CSASTARTSESSIONFAILED\', \'CSA Start of session "%s" failed.\' );\r\ndefine( \'NOTIFICATIONS_DEVICEERROR_PREFIX\', \'DE1\' );\r\ndefine( \'NOTIFICATIONS_DEVICEERROR\', \'Device error on device "%s".\' );\r\ndefine( \'NOTIFICATIONS_ENDOFCOPY\', \'Copy session "%s" ended.\' );\r\ndefine( \'NOTIFICATIONS_ENDOFSESSION\', \'Session "%s" ended.\' );\r\ndefine( \'NOTIFICATIONS_HEALTHCHECKFAILED_PREFIX\', \'HC1\' );\r\ndefine( \'NOTIFICATIONS_HEALTHCHECKFAILED\', \'Healthcheck has failed with message "%s".\' );\r\ndefine( \'NOTIFICATIONS_DBCORRUPTED_PREFIX\', \'DC1\' );\r\ndefine( \'NOTIFICATIONS_DBCORRUPTED\', \'Error message "%s": Database part "%s" is corrupted.\' );\r\ndefine( \'NOTIFICATIONS_DBSPACELOW_PREFIX\', \'DS1\' );\r\ndefine( \'NOTIFICATIONS_DBSPACELOW\', \'Free space available for Internal Database is low.\' );\r\ndefine( \'NOTIFICATIONS_DBPURGENEEDED_PREFIX\', \'DP1\' );\r\ndefine( \'NOTIFICATIONS_DBPURGENEEDED\', \'Filename purge should be run for the IDB.\' );\r\ndefine( \'NOTIFICATIONS_DBTABLESPACELOW_PREFIX\', \'TS1\' );\r\ndefine( \'NOTIFICATIONS_DBTABLESPACELOW\', \'IDB tablespace "%s" reached %s percent.\' );\r\ndefine( \'NOTIFICATIONS_LICENSEWILLEXPIRE_PREFIX\', \'LE1\' );\r\ndefine( \'NOTIFICATIONS_LICENSEWILLEXPIRE\', \'License will expire  in %s days.\' );\r\ndefine( \'NOTIFICATIONS_LICENSEWARNING_PREFIX\', \'LW1\' );\r\ndefine( \'NOTIFICATIONS_LICENSEWARNING\', \'%s license(s) need to be purchased for category "%s".\' );\r\ndefine( \'NOTIFICATIONS_MAILSLOTSFULL_PREFIX\', \'MS1\' );\r\ndefine( \'NOTIFICATIONS_MAILSLOTSFULL\', \'Mail slots of device "%s" are full.\' );\r\ndefine( \'NOTIFICATIONS_MOUNTREQUEST_PREFIX\', \'MR1\' );\r\ndefine( \'NOTIFICATIONS_MOUNTREQUEST\', \'Mount Request from session "%s" on device "%s" for pool "%s".\' );\r\ndefine( \'NOTIFICATIONS_NOTENOUGHFREEMEDIA_PREFIX\', \'FM1\' );\r\ndefine( \'NOTIFICATIONS_NOTENOUGHFREEMEDIA\', \'Free media in pool "%s" reached %s\' );\r\ndefine( \'NOTIFICATIONS_SESSIONERROR_PREFIX\', \'SE1\' );\r\ndefine( \'NOTIFICATIONS_SESSIONERROR\', \'Session "%s" ("%s") has %s errors\' );\r\ndefine( \'NOTIFICATIONS_STARTOFCOPY\', \'Copy session "%s" started.\' );\r\ndefine( \'NOTIFICATIONS_STARTOFSESSION_PARSING_ERROR\', \'Parsing error #%s in "%s" of "%s" ("%s").\' );\r\ndefine( \'NOTIFICATIONS_STARTOFSESSION\', \'Session "%s" started.\' );\r\ndefine( \'NOTIFICATIONS_STARTOFSESSION_SKIPPED\', \'Processing of session "%s" start skipped.\' );\r\ndefine( \'NOTIFICATIONS_UNEXPECTEDEVENTS_PREFIX\', \'UE1\' );\r\ndefine( \'NOTIFICATIONS_UNEXPECTEDEVENTS\', \'Error: Unexpected events occured (%s).\' );\r\ndefine( \'NOTIFICATIONS_USERCHECKFAILED_PREFIX\', \'UC1\' );\r\ndefine( \'NOTIFICATIONS_USERCHECKFAILED\', \'Error %s: "%s".\' );\r\ndefine( \'NOTIFICATIONS_DBBACKUPNEEDED_PREFIX\', \'DB1\' );\r\ndefine( \'NOTIFICATIONS_DBBACKUPNEEDED\', \'Error: Database backup is needed. Last backup time:%s Number of incremental backups: %s\' );\r\n\r\nclass mars_notification {\r\n	var $application;\r\n	var $file;\r\n	var $name;\r\n	var $items;\r\n\r\n	function mars_notification( $application, $file ) {\r\n		$this->application = $application;\r\n		$this->file = $file;\r\n		$this->items = array();\r\n		$lines = defined( \'INI_SCANNER_RAW\' ) ? parse_ini_file( $this->file, FALSE, INI_SCANNER_RAW ) : parse_ini_file( $this->file, FALSE ) ;\r\n		foreach ( $lines as $key => $value ) {\r\n			$this->items[ strtoupper( $key ) ] = trim( str_replace( "\'", \'\', $value ) );\r\n		}\r\n		if ( !isset( $this->items[ \'NOTIFICATION\' ] ) ) {\r\n			$this->items[ \'NOTIFICATION\' ] = \'\';\r\n			$this->application->log_error( sprintf( NOTIFICATIONS_INVALID, basename( $this->file ) ) );\r\n		}\r\n		$this->name = strtoupper( $this->items[ \'NOTIFICATION\' ] );\r\n	}\r\n\r\n	function execute() {\r\n		try {\r\n			$result = false;\r\n			switch ( $this->name ) {\r\n				case \'\':\r\n					$result = true;\r\n					break;\r\n				// DP07\r\n				case \'ALARM\':\r\n					$result = $this->alarm( );\r\n					break;\r\n				case \'CSASTARTSESSIONFAILED\':\r\n					$result = $this->csastartsessionfailed( );\r\n					break;\r\n				case \'DEVICEERROR\':\r\n					$result = $this->deviceerror( );\r\n					break;\r\n				case \'ENDOFCOPY\':\r\n					$result = $this->endofcopy( );\r\n					break;\r\n				case \'ENDOFSESSION\':\r\n					$result = $this->endofsession( );\r\n					break;\r\n				case \'HEALTHCHECKFAILED\':\r\n					$result = $this->healthcheckfailed( );\r\n					break;\r\n				case \'DBCORRUPTED\':\r\n					$result = $this->dbcorrupted( );\r\n					break;\r\n				case \'DBSPACELOW\':\r\n					$result = $this->dbspacelow( );\r\n					break;\r\n					case \'DBPURGENEEDED\':\r\n					$result = $this->dbpurgeneeded( );\r\n					break;\r\n				case \'DBTABLESPACELOW\':\r\n					$result = $this->dbtablespacelow( );\r\n					break;\r\n				case \'LICENSEWARNING\':\r\n					$result = $this->licensewarning( );\r\n					break;\r\n				case \'LICENSEWILLEXPIRE\':\r\n					$result = $this->licensewillexpire( );\r\n					break;\r\n				case \'MAILSLOTSFULL\':\r\n					$result = $this->mailslotsfull( );\r\n					break;\r\n				case \'MOUNTREQUEST\':\r\n					$result = $this->mountrequest( );\r\n					break;\r\n				case \'NOTENOUGHFREEMEDIA\':\r\n					$result = $this->notenoughfreemedia( );\r\n					break;\r\n				case \'SESSIONERROR\':\r\n					$result = $this->sessionerror( );\r\n					break;\r\n				case \'STARTOFCOPY\':\r\n					$result = $this->startofcopy( );\r\n					break;\r\n				case \'STARTOFSESSION\':\r\n					$result = $this->startofsession( );\r\n					break;\r\n				case \'UNEXPECTEDEVENTS\':\r\n					$result = $this->unexpectedevents( );\r\n					break;\r\n				case \'USERCHECKFAILED\':\r\n					$result = $this->usercheckfailed( );\r\n					break;\r\n				// DP08\r\n				case \'DBBACKUPNEEDED\':\r\n					$result = $this->dbbackupneeded( );\r\n					break;\r\n				default:\r\n					throw new exception( sprintf( NOTIFICATIONS_UNHANDLED, basename( $this->file ) ) );\r\n					break;\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( NOTIFICATIONS_ERROR, $this->name, $e->getmessage( ) ) );\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function alarm() {\r\n		if ( isset( $this->application->config[ \'ALARM_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_ALARM, $this->items[ \'ALARMMSG\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'ALARM_PRIORITY\' ], NOTIFICATIONS_ALARM_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function csastartsessionfailed() {\r\n		if ( isset( $this->application->config[ \'CSASSFAILED_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_CSASTARTSESSIONFAILED, $this->items[ \'DATALIST\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'CSASSFAILED_PRIORITY\' ], \r\n				NOTIFICATIONS_CSASTARTSESSIONFAILED_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function deviceerror() {\r\n		if ( isset( $this->application->config[ \'DEVICEERROR_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_DEVICEERROR, $this->items[ \'DEVICENAME\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'DEVICEERROR_PRIORITY\' ], NOTIFICATIONS_DEVICEERROR_PREFIX, \r\n				$message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function endofcopy() {\r\n		$message = sprintf( NOTIFICATIONS_ENDOFCOPY, $this->items[ \'SESSIONID\' ] );\r\n		return true;\r\n	}\r\n\r\n	function endofsession() {\r\n		if ( isset( $this->items[ \'SESSIONTYPE\' ] ) and ( $this->items[ \'SESSIONTYPE\' ] == 16 ) ) {return $this->endofcopy( );}\r\n		$message = sprintf( NOTIFICATIONS_ENDOFSESSION, $this->items[ \'SESSIONID\' ] );\r\n		queue_action( $this->application, $this->items[ \'NOTIFICATION\' ], $this->items[ \'SESSIONID\' ] );\r\n		return true;\r\n	}\r\n\r\n	function healthcheckfailed() {\r\n		if ( isset( $this->application->config[ \'HEALTHCHECKFAILED_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_HEALTHCHECKFAILED, $this->items[ \'HEALTHCHECKMSG\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'HEALTHCHECKFAILED_PRIORITY\' ], \r\n				NOTIFICATIONS_HEALTHCHECKFAILED_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function dbcorrupted() {\r\n		if ( isset( $this->application->config[ \'DBCORRUPTED_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_DBCORRUPTED, $this->items[ \'DBERRORMESSAGE\' ], $this->items[ \'DBPARTCORRUPTED\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'DBCORRUPTED_PRIORITY\' ], NOTIFICATIONS_DBCORRUPTED_PREFIX, \r\n				$message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function dbspacelow() {\r\n		if ( isset( $this->application->config[ \'DBSPACELOW_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_DBSPACELOW );\r\n			$this->application->create_ticket( $this->application->config[ \'DBSPACELOW_PRIORITY\' ], NOTIFICATIONS_DBSPACELOW_PREFIX, \r\n				$message );\r\n		}\r\n		return true;\r\n	}\r\n	\r\n	function dbpurgeneeded() {\r\n		if ( isset( $this->application->config[ \'DBPURGENEEDED_PRIORITY\' ] ) ) {\r\n			$message = NOTIFICATIONS_DBPURGENEEDED;\r\n			$this->application->create_ticket( $this->application->config[ \'DBPURGENEEDED_PRIORITY\' ], NOTIFICATIONS_DBPURGENEEDED_PREFIX, \r\n				$message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function dbtablespacelow() {\r\n		if ( isset( $this->application->config[ \'TABLESPACELOW_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_DBTABLESPACELOW, $this->items[ \'TBLSPACENAME\' ], $this->items[ \'TBLSPACEOCCUPIED\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'TABLESPACELOW_PRIORITY\' ], \r\n				NOTIFICATIONS_DBTABLESPACELOW_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function licensewillexpire() {\r\n		if ( isset( $this->application->config[ \'LICENSEWILLEXPIRE_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_LICENSEWILLEXPIRE, $this->items[ \'LICEXPIREDAYS\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'LICENSEWILLEXPIRE_PRIORITY\' ], \r\n				NOTIFICATIONS_LICENSEWILLEXPIRE_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function licensewarning() {\r\n		if ( isset( $this->application->config[ \'LICENSEWARNING_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_LICENSEWARNING, $this->items[ \'LICQUANTITY\' ], $this->items[ \'LICCATEGORY\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'LICENSEWARNING_PRIORITY\' ], \r\n				NOTIFICATIONS_LICENSEWARNING_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function mailslotsfull() {\r\n		if ( isset( $this->application->config[ \'MAILSLOTSFULL_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_MAILSLOTSFULL, $this->items[ \'DEVICENAME\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'MAILSLOTSFULL_PRIORITY\' ], NOTIFICATIONS_MAILSLOTSFULL_PREFIX, \r\n				$message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function mountrequest() {\r\n		if ( isset( $this->application->config[ \'MOUNTREQUEST_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_MOUNTREQUEST, $this->items[ \'SESSIONID\' ], $this->items[ \'DEVICENAME\' ], \r\n				$this->items[ \'MEDIAPOOL\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'MOUNTREQUEST_PRIORITY\' ], NOTIFICATIONS_MOUNTREQUEST_PREFIX, \r\n				$message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function notenoughfreemedia() {\r\n		if ( ( !$this->application->mmd_local ) ) return true;\r\n		if ( preg_match( sprintf( \'/%s/i\', $this->application->config[ \'FREEMEDIA_IGNORE_POOL\' ] ), $this->items[ \'MEDIAPOOL\' ] ) ) return true;\r\n		if ( isset( $this->application->config[ \'FREEMEDIA_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_NOTENOUGHFREEMEDIA, $this->items[ \'MEDIAPOOL\' ], $this->items[ \'NUMFREEMEDIA\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'FREEMEDIA_PRIORITY\' ], NOTIFICATIONS_NOTENOUGHFREEMEDIA_PREFIX, \r\n				$message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function sessionerror() {\r\n		if ( isset( $this->application->config[ \'SESSIONERROR_PRIORITY\' ] ) and $this->items[ \'NUMBACKUPERRORS\' ] > 0 ) {\r\n			$message = sprintf( NOTIFICATIONS_SESSIONERROR, $this->items[ \'SESSIONID\' ], $this->items[ \'DATALIST\' ], \r\n				$this->items[ \'NUMBACKUPERRORS\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'SESSIONERROR_PRIORITY\' ], NOTIFICATIONS_SESSIONERROR_PREFIX, \r\n				$message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function startofcopy() {\r\n		$message = sprintf( NOTIFICATIONS_STARTOFCOPY, $this->items[ \'SESSIONID\' ] );\r\n		return true;\r\n	}\r\n\r\n	function startofsession() {\r\n		if ( isset( $this->items[ \'SESSIONTYPE\' ] ) and ( $this->items[ \'SESSIONTYPE\' ] == 16 ) ) {return $this->startofcopy( );}\r\n		if ( isset( $this->application->config[ \'STARTOFSESSION_SKIP\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_STARTOFSESSION_SKIPPED, $this->items[ \'SESSIONID\' ] );\r\n			return true;\r\n		}\r\n		if ( isset( $this->items[ \'PARSING_ERROR\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_STARTOFSESSION_PARSING_ERROR, $this->items[ \'PARSING_ERROR\' ], \r\n				$this->items[ \'NOTIFICATION\' ], $this->items[ \'SESSIONID\' ], $this->items[ \'DATALIST\' ] );\r\n			throw new exception( $message );\r\n			break;\r\n		}\r\n		$message = sprintf( NOTIFICATIONS_STARTOFSESSION, $this->items[ \'SESSIONID\' ] );\r\n		queue_action( $this->application, $this->name, $this->items[ \'SESSIONID\' ] );\r\n		return true;\r\n	}\r\n\r\n	function unexpectedevents() {\r\n		if ( isset( $this->application->config[ \'UNEXPECTEDEVENTS_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_UNEXPECTEDEVENTS, $this->items[ \'NUMEVENTS\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'UNEXPECTEDEVENTS_PRIORITY\' ], \r\n				NOTIFICATIONS_UNEXPECTEDEVENTS_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function usercheckfailed() {\r\n		if ( isset( $this->application->config[ \'USERCHECKFAILED_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_USERCHECKFAILED, $this->items[ \'COMMANDERCODE\' ], $this->items[ \'COMMANDERMSG\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'USERCHECKFAILED_PRIORITY\' ], \r\n				NOTIFICATIONS_USERCHECKFAILED_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function dbbackupneeded() {\r\n		if ( isset( $this->application->config[ \'DBBACKUPNEEDED_PRIORITY\' ] ) ) {\r\n			$message = sprintf( NOTIFICATIONS_DBBACKUPNEEDED, $this->items[ \'LASTBCKPTIME\' ], $this->items[ \'NUMOFINCRIDBBACKUPS\' ] );\r\n			$this->application->create_ticket( $this->application->config[ \'DBBACKUPNEEDED_PRIORITY\' ], \r\n				NOTIFICATIONS_DBBACKUPNEEDED_PREFIX, $message );\r\n		}\r\n		return true;\r\n	}\r\n}\r\n\r\nfunction execute_notifications( $application ) {\r\n	$files = glob( $application->root . DIRECTORY_SEPARATOR . NOTIFICATIONS_QUEUE . DIRECTORY_SEPARATOR . \'*\' );\r\n	sort( $files );\r\n	$i = 0;\r\n	foreach ( $files as $file ) {\r\n		$notification = new mars_notification( $application, $file );\r\n		if ( $notification->execute( ) ) {\r\n			unlink( $file );\r\n		} else {\r\n			$tmp = str_replace( NOTIFICATIONS_QUEUE, NOTIFICATIONS_TMP, dirname( $file ) )\r\n				. DIRECTORY_SEPARATOR .	substr( basename( $file ), 0, 6 ) . \'.\' . NOTIFICATIONS_TMP;\r\n			rename( $file, $tmp );\r\n		}\r\n		clearstatcache( );\r\n		$i++;\r\n	}\r\n	return $i;\r\n}\r\n', '2013-01-01 00:00:00', '2017-01-27 10:47:52', NULL),
	(9, 'inc/routines.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 ROUTINES PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'ROUTINES\', \'LIBRARIES,DEVICES,MEDIA,SPECIFICATIONS,OMNI2ESL,CHECK_BACKUPS,LOCKED_OBJECTS,OMNISTAT\' );\r\ndefine( \'ROUTINES_ERROR\', \'Error: %s: %s\' );\r\ndefine( \'ROUTINES_ERROR_UNHANDLED\', \'Unhandled routine "%s".\' );\r\ndefine( \'ROUTINES_OMNISTAT_TIMEOUT\', 15 );\r\ndefine( \'ROUTINES_CHECK_BACKUPS_TYPE\', \'backup\' );\r\ndefine( \'ROUTINES_CHECK_BACKUPS_SESSIONS_ACTIVE\', \'progress|mount|queuing\' );\r\ndefine( \'ROUTINES_CHECK_BACKUPS_DAYS\', 3 );\r\ndefine( \'ROUTINES_CHECK_BACKUPS_LOG\', \'CHECK BACKUPS: %s missing, %s without status, %s with different status, %s/%s/%s without devices/objects/media details.\' );\r\ndefine( \'ROUTINES_OMNIDBUTIL_TIMEOUT\', 15 );\r\ndefine( \'ROUTINES_ERROR_LOCKED_OBJECTS_UNKNOWN_ITEM\', \'Unknown "omnidbutil show_locked_devs" item "%s"="%s".\' );\r\ndefine( \'ROUTINES_LOCKED_OBJECTS_LOG\', \'LOCKED OBJECTS: %s inserted, %s updated, %s removed.\' );\r\ndefine( \'ROUTINES_OMNISTAT_DETAILS\', \'OMNISTAT_DETAILS\' );\r\ndefine( \'ROUTINES_OMNISTAT_DEVICES_ACTIVE\', \'mount|running|reading|writing\' );\r\ndefine( \'ROUTINES_OMNISTAT_OBJECTS_ACTIVE\', \'pending|running\' );\r\ndefine( \'ROUTINES_ERROR_OMNISTAT_DETAILS\', \'Error reading "omnistat -details" for session "%s" : "%s".\' );\r\ndefine( \'ROUTINES_ERROR_OMNISTAT_UNKNOWN_ITEM\', \'Unknown "omnistat" item "%s"="%s".\' );\r\ndefine( \'ROUTINES_OMNISTAT_LOG\', \'RUNNING SESSIONS: %s inserted, %s updated, %s removed.\' );\r\ndefine( \'ROUTINES_ERROR_OMNISTAT_DETAILS_EMPTY\', \'Empty report.\' );\r\ndefine( \'ROUTINES_ERROR_OMNISTAT_DETAILS_INVALID\', \'Invalid report: "%s".\' );\r\ndefine( \'ROUTINES_ERROR_OMNISTAT_DETAILS_UNKNOWN_ITEM\', \'Unknown item "%s"="%s".\' );\r\n\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n	define( \'ROUTINES_OMNISTAT_PREV_CMD\', \'"%s\\omnistat.exe" -previous -last %s\' );\r\n	define( \'ROUTINES_OMNIDBUTIL_SHOW_LOCKED_DEVS_CMD\', \'"%s\\omnidbutil.exe" -show_locked_devs -all\' );\r\n	define( \'ROUTINES_OMNISTAT_DETAIL_CMD\', \'"%s\\omnistat.exe" -detail\' );\r\n	define( \'ROUTINES_OMNISTAT_SESSION_DETAIL_CMD\', \'"%s\\omnistat.exe" -session %s -detail\' );\r\n} else {\r\n	define( \'ROUTINES_OMNISTAT_PREV_CMD\', \'"%s/omnistat" -previous -last %s\' );\r\n	define( \'ROUTINES_OMNIDBUTIL_SHOW_LOCKED_DEVS_CMD\', \'"%s/omnidbutil" -show_locked_devs -all\' );\r\n	define( \'ROUTINES_OMNISTAT_DETAIL_CMD\', \'"%s/omnistat" -detail\' );\r\n	define( \'ROUTINES_OMNISTAT_SESSION_DETAIL_CMD\', \'"%s/omnistat" -session %s -detail\' );\r\n}\r\n\r\nclass mars_routine {\r\n	var $application;\r\n	var $name;\r\n\r\n	function mars_routine( $application, $name ) {\r\n		$this->application = $application;\r\n		$this->name = strtoupper( $name );\r\n	}\r\n\r\n	function execute( $action = true ) {\r\n		try {\r\n			$result = false;\r\n			switch ( strtoupper( $this->name ) ) {\r\n				case \'LIBRARIES\':\r\n					$result = $this->libraries( $action );\r\n					break;\r\n				case \'DEVICES\':\r\n					$result = $this->devices( $action );\r\n					break;\r\n				case \'MEDIA\':\r\n					$result = $this->media( $action );\r\n					break;\r\n				case \'POOLS\':\r\n					$result = $this->pools( $action );\r\n					break;\r\n				case \'SPECIFICATIONS\':\r\n					$result = $this->specifications( $action ) && $this->copylists( $action );\r\n					break;\r\n				case \'OMNI2ESL\':\r\n					$result = $this->omni2esl( $action );\r\n					break;\r\n				case \'CHECK_BACKUPS\':\r\n					$result = $this->check_backups( $action );\r\n					break;\r\n				case \'LOCKED_OBJECTS\':\r\n					$result = $this->locked_objects( $action );\r\n					break;\r\n				case \'OMNISTAT\':\r\n					$result = $this->omnistat( $action );\r\n					break;\r\n				default:\r\n					if ( strpos( $this->name, \'OMNISTAT:\' ) === 0 ) {\r\n						list( $name, $sessionid ) = explode( \':\', $this->name );\r\n						$result = $this->omnistat_details( $sessionid, $action );\r\n					} else throw new exception( sprintf( ROUTINES_ERROR_UNHANDLED, $this->name ) );\r\n					break;\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( ROUTINES_ERROR, $this->name, $e->getmessage( ) ) );\r\n			$result = true;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function libraries( $action ) {\r\n		$result = true;\r\n		if ( $this->application->mmd_local ) $result = read_libraries( $this->application, $action );\r\n		return $result;\r\n	}\r\n\r\n	function devices( $action ) {\r\n		$result = true;\r\n		if ( $this->application->mmd_local ) $result = read_devices( $this->application, $action );\r\n		return $result;\r\n	}\r\n\r\n	function media( $action ) {\r\n		$result = true;\r\n		if ( $this->application->mmd_local ) $result = read_media( $this->application, $action );\r\n		return $result;\r\n	}\r\n\r\n	function pools( $action ) {\r\n		$result = true;\r\n		if ( $this->application->mmd_local ) $result = read_pools( $this->application, $action );\r\n		return $result;\r\n	}\r\n	\r\n	function specifications( $action ) {\r\n		read_specifications( $this->application );\r\n		return true;\r\n	}\r\n\r\n	function copylists( $action ) {\r\n		read_copylists( $this->application );\r\n		return true;\r\n	}\r\n	\r\n	function omni2esl( $action ) {\r\n#		if ( is_dir( $this->application->config[ \'OMNI2ESL\' ] ) ) omni2esl( $this->application );\r\n		omni2esl( $this->application );\r\n		return true;\r\n	}\r\n\r\n	function check_backups( $action ) {\r\n		if ( $action ) {\r\n			$name = \'OMNISTAT-PREV\';\r\n			$command = sprintf( ROUTINES_OMNISTAT_PREV_CMD, $this->application->config[ \'OMNI_BIN\' ], ROUTINES_CHECK_BACKUPS_DAYS );\r\n			$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n			$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => $this->name );\r\n			if ( !file_exists( $file ) ) {\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true );\r\n				return false;\r\n			}\r\n			$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n			$lines = $worker->output;\r\n			unset( $worker );\r\n			unlink( $file );\r\n		} else {\r\n			$lines = $this->application->cache_command(\r\n				sprintf( ROUTINES_OMNISTAT_PREV_CMD, $this->application->config[ \'OMNI_BIN\' ], ROUTINES_CHECK_BACKUPS_DAYS ),\r\n				ROUTINES_OMNISTAT_TIMEOUT );\r\n		}\r\n		$m = $d = $n = $wd = $wo = $wm = 0;\r\n		foreach ( $lines as $line ) {\r\n			if ( !preg_match( sprintf( \'/%s/i\', ROUTINES_CHECK_BACKUPS_TYPE ), $line ) ) continue;\r\n			if ( preg_match( sprintf( \'/%s/i\', ROUTINES_CHECK_BACKUPS_SESSIONS_ACTIVE ), $line ) ) continue;\r\n			list ( $sessionid, $type, $status, $owner, $dummy ) = sscanf( $line, \'%s %s %s %s %s\' );\r\n			if ( $status == \'In\' ) {\r\n				$status = sprintf( \'%s %s\', $status, $owner );\r\n				$owner = $dummy;\r\n			}\r\n			$sql = "select status from _sessions where cellserver=\'%cellserver\' and sessionid=\'%sessionid\';";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'sessionid\' => $sessionid );\r\n			$result = $this->application->database->execute_query( $sql, $values );\r\n			if ( $result == 0 ) {\r\n				queue_action( $this->application, \'ENDOFSESSION\', $sessionid );\r\n				$m++;\r\n			} else {\r\n				$row = $this->application->database->rows[ 0 ];\r\n				if ( is_null( $row[ \'status\' ] ) ) {\r\n					queue_action( $this->application, \'ENDOFSESSION\', $sessionid );\r\n					$n++;\r\n				} else {\r\n					if ( str_replace( \'/\', \'\', $row[ \'status\' ] ) != str_replace( \'/\', \'\', $status ) ) {\r\n						queue_action( $this->application, \'ENDOFSESSION\', $sessionid );\r\n						$d++;\r\n					}\r\n				}\r\n			}\r\n		}\r\n		$values = array(\r\n				\'cellserver\' => $this->application->cellserver,\r\n				\'sessionid\' => $sessionid,\r\n				\'last\' => ROUTINES_CHECK_BACKUPS_DAYS,\r\n				\'skip\' => ROUTINES_CHECK_BACKUPS_SESSIONS_ACTIVE );\r\n		$sql = "select s1.sessionid from _sessions s1 where s1.cellserver=\'%cellserver\' " .\r\n				"and s1.starttime>date_sub(now(),interval %last day) " .\r\n				"and status not regexp \'%skip\' and s1.gbwritten>0 " .\r\n				"and not exists (select id from dataprotector_session_devices s2 where s1.cellserver=s2.cellserver and s1.sessionid=s2.sessionid);";\r\n		$this->application->database->execute_query( $sql, $values );\r\n		foreach ( $this->application->database->rows as $row ) {\r\n			queue_action( $this->application, \'ENDOFSESSIONDEVICES\', $row[ \'sessionid\' ] );\r\n			$wd++;\r\n		}\r\n		$sql = "select s1.sessionid from _sessions s1 where s1.cellserver=\'%cellserver\' " .\r\n			 "and s1.starttime>date_sub(now(),interval %last day) " .\r\n			 "and status not regexp \'%skip\' and s1.objects>0 " .\r\n			 "and not exists (select id from dataprotector_session_objects s2 where s1.cellserver=s2.cellserver and s1.sessionid=s2.sessionid);";\r\n		$this->application->database->execute_query( $sql, $values );\r\n		foreach ( $this->application->database->rows as $row ) {\r\n			queue_action( $this->application, \'ENDOFSESSIONOBJECTS\', $row[ \'sessionid\' ] );\r\n			$wo++;\r\n		}\r\n		$sql = "select s1.sessionid from _sessions s1 where s1.cellserver=\'%cellserver\' " .\r\n			 "and s1.starttime>date_sub(now(),interval %last day) " . \r\n			 "and status not regexp \'%skip\' and s1.media>0 " .\r\n			 "and not exists (select id from dataprotector_session_media s2 where s1.cellserver=s2.cellserver and s1.sessionid=s2.sessionid);";\r\n		$this->application->database->execute_query( $sql, $values );\r\n		foreach ( $this->application->database->rows as $row ) {\r\n			queue_action( $this->application, \'ENDOFSESSIONMEDIA\', $row[ \'sessionid\' ] );\r\n			$wm++;\r\n		}\r\n		$message = sprintf( ROUTINES_CHECK_BACKUPS_LOG, $m, $n, $d, $wd, $wo, $wm );\r\n		( $m + $n + $d + $wd +$wo + $wm > 0 ) && $this->application->log_action( $message );\r\n		return true;\r\n	}\r\n\r\n	function locked_objects( $action ) {\r\n		if ( $action ) {\r\n			$name = \'OMNIDBUTIL-LOCKED_DEVS\';\r\n			$command = sprintf( ROUTINES_OMNIDBUTIL_SHOW_LOCKED_DEVS_CMD, $this->application->config[ \'OMNI_SBIN\' ] );\r\n			$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n			$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => $this->name );\r\n			if ( !file_exists( $file ) ) {\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true );\r\n				return false;\r\n			}\r\n			$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n			$lines = $worker->output;\r\n			unset( $worker );\r\n			unlink( $file );\r\n		} else {\r\n			$lines = $this->application->cache_command(\r\n				sprintf( ROUTINES_OMNIDBUTIL_SHOW_LOCKED_DEVS_CMD, $this->application->config[ \'OMNI_SBIN\' ] ), ROUTINES_OMNIDBUTIL_TIMEOUT );\r\n		}\r\n		array_shift( $lines );\r\n		array_shift( $lines );\r\n		array_push( $lines, \'\' );\r\n		$u = $i = 0;\r\n		$location = $label = \'\';\r\n		foreach ( $lines as $line ) {\r\n			$key = strtoupper( trim( substr( $line, 0, strpos( $line, \':\' ) ) ) );\r\n			$value = trim( substr( strstr( $line, \':\' ), 1 ) );\r\n			switch ( $key ) {\r\n				case \'TYPE\':\r\n					$type = $value;\r\n					break;\r\n				case \'NAME/ID\':\r\n					$name = $value;\r\n					break;\r\n				case \'PID\':\r\n					$pid = $value;\r\n					break;\r\n				case \'HOST\':\r\n					$host = $value;\r\n					break;\r\n				case \'LOCATION\':\r\n					$location = $value;\r\n					break;\r\n				case \'LABEL\':\r\n					$label = $value;\r\n					break;\r\n				case \'\':\r\n					if ( !isset( $name ) or !isset( $host ) ) break;\r\n					if ( $host != $this->application->cellserver ) break;\r\n					$sql = "insert into dataprotector_locked_objects (type,name,pid,host,location,label,updated_on) " .\r\n						 "values (\'%type\', \'%name\', \'%pid\', \'%host\', \'%location\', \'%label\', \'%updated_on\') on duplicate key update pid=\'%pid\', location=\'%location\', label=\'%label\', updated_on=\'%updated_on\';";\r\n					$values = array( \r\n						\'type\' => $type, \r\n						\'name\' => $name, \r\n						\'pid\' => $pid, \r\n						\'host\' => $host, \r\n						\'location\' => $location, \r\n						\'label\' => $label, \r\n						\'updated_on\' => $this->application->start_time );\r\n					$result = $this->application->database->execute_query( $sql, $values );\r\n					( $result == 1 ) && $i++;\r\n					( $result == 2 ) && $u++;\r\n					$location = $label = \'\';\r\n					break;\r\n				default:\r\n					$this->application->log_error( sprintf( ROUTINES_ERROR_LOCKED_OBJECTS_UNKNOWN_ITEM, $key, $value ) );\r\n			}\r\n		}\r\n		$sql = "delete from dataprotector_locked_objects where host=\'%host\' and updated_on<\'%updated_on\';";\r\n		$values = array( \r\n			\'host\' => $this->application->cellserver, \r\n			\'updated_on\' => $this->application->start_time );\r\n		$d = $this->application->database->execute_query( $sql, $values );\r\n		$message = sprintf( ROUTINES_LOCKED_OBJECTS_LOG, $i, $u, $d );\r\n		( $i + $u + $d > 0 ) && $this->application->log_action( $message );\r\n		return true;\r\n	}\r\n\r\n	function omnistat( $action ) {\r\n		if ( $action ) {\r\n			$name = \'OMNISTAT\';\r\n			$command = sprintf( ROUTINES_OMNISTAT_DETAIL_CMD, $this->application->config[ \'OMNI_BIN\' ] );\r\n			$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n			$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => $this->name );\r\n			if ( !file_exists( $file ) ) {\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true );\r\n				return false;\r\n			}\r\n			$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n			$lines = $worker->output;\r\n			unset( $worker );\r\n			unlink( $file );\r\n		} else {\r\n			$lines = $this->application->cache_command( \r\n				sprintf( ROUTINES_OMNISTAT_DETAIL_CMD, $this->application->config[ \'OMNI_BIN\' ] ), ROUTINES_OMNISTAT_TIMEOUT );\r\n		}\r\n		array_push( $lines, \'\' );\r\n		$u = $i = 0;\r\n		foreach ( $lines as $line ) {\r\n			$key = strtoupper( trim( substr( $line, 0, strpos( $line, \':\' ) ) ) );\r\n			$value = trim( substr( strstr( $line, \':\' ), 1 ) );\r\n			switch ( $key ) {\r\n				case \'SESSIONID\':\r\n					$sessionid = $value;\r\n					break;\r\n				case \'SESSION TYPE\':\r\n					$type = $value;\r\n					break;\r\n				case \'SESSION STATUS\':\r\n					$status = $value;\r\n					break;\r\n				case \'USER.GROUP@HOST\':\r\n					$sessionowner = $value;\r\n					break;\r\n				case \'SESSION STARTED\':\r\n					$starttime = $value;\r\n					break;\r\n				case \'BACKUP SPECIFICATION\':\r\n					$specification = $value;\r\n					break;\r\n				case \'\':\r\n					if ( !isset( $sessionid ) ) break;\r\n					$sql = "insert into dataprotector_omnistat " .\r\n						 "(cellserver,sessionid,type,status,sessionowner,starttime,specification,updated_on) " .\r\n						 "values (\'%cellserver\',\'%sessionid\',\'%type\',\'%status\'," .\r\n						 "\'%sessionowner\',\'%starttime\',\'%specification\',\'%updated_on\') on duplicate key " . \r\n						 "update status=\'%status\', updated_on=\'%updated_on\';";\r\n					$values = array( \r\n						\'cellserver\' => $this->application->cellserver, \r\n						\'sessionid\' => $sessionid, \r\n						\'type\' => $type, \r\n						\'status\' => $status, \r\n						\'sessionowner\' => $sessionowner, \r\n						\'starttime\' => $this->application->parse_date( $starttime ), \r\n						\'specification\' => $specification, \r\n						\'updated_on\' => $this->application->start_time );\r\n					$result = $this->application->database->execute_query( $sql, $values );\r\n					( $result == 1 ) && $i++;\r\n					( $result == 2 ) && $u++;\r\n					if( ( $type != \'Media\' ) and \r\n						( empty( $config[ ROUTINES_OMNISTAT_DETAILS ] ) or stristr( $config[ ROUTINES_OMNISTAT_DETAILS ], $type ) ) ) \r\n					try {\r\n						$this->omnistat_details( $sessionid, $action );\r\n					}\r\n					catch ( exception $e ) {\r\n						$this->application->log_warning( sprintf( ROUTINES_ERROR_OMNISTAT_DETAILS, $sessionid, $e->getmessage( ) ) );\r\n					}\r\n					$values = array( \r\n						\'cellserver\' => $this->application->cellserver, \r\n						\'sessionid\' => $sessionid, \r\n						\'skip_devices\' => ROUTINES_OMNISTAT_DEVICES_ACTIVE, \r\n						\'skip_objects\' => ROUTINES_OMNISTAT_OBJECTS_ACTIVE );\r\n					$sql = "select count(id) as devices,sum(status regexp \'%skip_devices\') as active_devices," .\r\n						 "sum(ifnull(done,0)) as done from dataprotector_omnistat_devices where cellserver=\'%cellserver\' and sessionid=\'%sessionid\';";\r\n					$this->application->database->execute_query( $sql, $values );\r\n					list ( $devices, $active_devices, $done ) = $this->application->database->rows[ 0 ];\r\n					$sql = "select count(id) as objects,sum(status regexp \'%skip_objects\') as active_objects," .\r\n						 "sum(ifnull(total_files,0)) as total_files,sum(ifnull(processed_files,0)) as processed_files," .\r\n						 "sum(ifnull(total_size,0)) as total_size,sum(ifnull(processed_size,0)) as processed_size from dataprotector_omnistat_objects where cellserver=\'%cellserver\' and sessionid=\'%sessionid\';";\r\n					$this->application->database->execute_query( $sql, $values );\r\n					list ( $objects, $active_objects, $total_files, $processed_files, $total_size, $processed_size ) = $this->application->database->rows[ 0 ];\r\n					$sql = "update dataprotector_omnistat set devices=nullif(\'%devices\',\'\')," .\r\n						"ad_delta=ifnull(nullif(\'%active_devices\',\'\'),0)-ifnull(active_devices,0)," .\r\n						"active_devices=nullif(\'%active_devices\',\'\'),done_delta=ifnull(nullif(\'%done\',\'\'),0)-ifnull(done,0)," .\r\n						"done=nullif(\'%done\',\'\'),objects=nullif(\'%objects\',\'\')," .\r\n						"ao_delta=ifnull(nullif(\'%active_objects\',\'\'),0)-ifnull(active_objects,0)," .\r\n						"active_objects=nullif(\'%active_objects\',\'\'),total_files=nullif(\'%total_files\',\'\')," .\r\n						"pf_delta=ifnull(nullif(\'%processed_files\',\'\'),0)-ifnull(processed_files,0)," .\r\n						"processed_files=nullif(\'%processed_files\',\'\'),total_size=nullif(\'%total_size\',\'\')," .\r\n						"ps_delta=ifnull(nullif(\'%processed_size\',\'\'),0)-ifnull(processed_size,0),processed_size=nullif(\'%processed_size\',\'\')," .\r\n						"updated_on=\'%updated_on\' where cellserver=\'%cellserver\' and sessionid=\'%sessionid\';";\r\n					$values = array( \r\n						\'devices\' => $devices, \r\n						\'active_devices\' => $active_devices, \r\n						\'done\' => $done, \r\n						\'objects\' => $objects, \r\n						\'active_objects\' => $active_objects, \r\n						\'total_files\' => $total_files, \r\n						\'processed_files\' => $processed_files, \r\n						\'total_size\' => $total_size, \r\n						\'processed_size\' => $processed_size, \r\n						\'cellserver\' => $this->application->cellserver, \r\n						\'sessionid\' => $sessionid,\r\n						\'updated_on\' => $this->application->start_time );\r\n					$this->application->database->execute_query( $sql, $values );\r\n					break;\r\n				default:\r\n					$this->application->log_error( sprintf( ROUTINES_ERROR_OMNISTAT_UNKNOWN_ITEM, $key, $value ) );\r\n				}\r\n		}\r\n		$sql = "delete from dataprotector_omnistat where cellserver=\'%cellserver\' and updated_on<\'%updated_on\';";\r\n		$values = array( \r\n			\'cellserver\' => $this->application->cellserver, \r\n			\'updated_on\' => $this->application->start_time );\r\n		$d = $this->application->database->execute_query( $sql, $values );\r\n		$message = sprintf( ROUTINES_OMNISTAT_LOG, $i, $u, $d );\r\n		( $i + $u + $d > 0 ) && $this->application->log_action( $message );\r\n		return true;\r\n	}\r\n\r\n	function omnistat_details( $sessionid, $action ) {\r\n		if ( $action ) {\r\n			$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'OMNISTAT-%s\', $sessionid ) );\r\n			$command = sprintf( ROUTINES_OMNISTAT_SESSION_DETAIL_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid );\r\n			$file = $this->application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n			$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => sprintf( \'OMNISTAT:%s\', $sessionid ) );\r\n			if ( !file_exists( $file ) ) {\r\n				$this->application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true ) &&\r\n				queue_action( $this->application, $items[ \'NAME\' ], $items[ \'DATA\' ] );\r\n				return false;\r\n			}\r\n			$worker = $this->application->workers->decode( file_get_contents( $file ) );\r\n			$lines = $worker->output;\r\n			empty( $lines[ 0 ] ) && array_shift( $lines );\r\n			unset( $worker );\r\n			unlink( $file );\r\n		} else {\r\n			$lines = $this->application->cache_command( \r\n				sprintf( ROUTINES_OMNISTAT_SESSION_DETAIL_CMD, $this->application->config[ \'OMNI_BIN\' ], $sessionid ), ROUTINES_OMNISTAT_TIMEOUT );\r\n		}\r\n		array_push( $lines, \'\' );\r\n		if ( strpos( $lines[ 0 ], \'not running\' ) ) return true;\r\n		if ( strpos( $lines[ 0 ], \'name\' ) === false ) {\r\n			if ( implode( \'\', $lines ) == \'\' ) throw new exception( ROUTINES_ERROR_OMNISTAT_DETAILS_EMPTY );\r\n			throw new exception( sprintf( ROUTINES_ERROR_OMNISTAT_DETAILS_INVALID, implode( \'\', $lines ) ) );\r\n		}\r\n		$total_files = $processed_files = $total_size = \'\';\r\n		foreach ( $lines as $line ) {\r\n			$key = strtoupper( trim( substr( $line, 0, strpos( $line, \':\' ) ) ) );\r\n			$value = trim( substr( strstr( $line, \':\' ), 1 ) );\r\n			switch ( $key ) {\r\n				case \'DEVICE NAME\':\r\n					$devicename = $value;\r\n					unset( $objectname );\r\n					break;\r\n				case \'HOST\':\r\n					$host = $value;\r\n					break;\r\n				case \'STARTED\':\r\n					$started = $value;\r\n					break;\r\n				case \'FINISHED\':\r\n					$finished = $value;\r\n					break;\r\n				case \'DONE\':\r\n					list ( $done ) = sscanf( $value, "%d" );\r\n					break;\r\n				case \'PHYSICAL DEVICE\':\r\n					$physical_device = $value;\r\n					break;\r\n				case \'STATUS\':\r\n					$status = $value;\r\n					break;\r\n				case \'OBJECT NAME\':\r\n					$objectname = $value;\r\n					unset( $devicename );\r\n					break;\r\n				case \'SESSIONID\':\r\n					$restore_sessionid = $value;\r\n					break;\r\n				case \'OBJECT TYPE\':\r\n				case \'TYPE\':\r\n					$type = $value;\r\n					break;\r\n				case \'BACKUP STARTED\':\r\n					$backup_started = $value;\r\n					break;\r\n				case \'RESTORE STARTED\':\r\n				case \'STARTED\':\r\n					$started = $value;\r\n					break;\r\n				case \'FINISHED\':\r\n					$finished = $value;\r\n					break;\r\n				case \'LEVEL\':\r\n				case \'RUNLEVEL\':\r\n					$runlevel = $value;\r\n					break;\r\n				case \'WARNINGS\':\r\n					$warnings = $value;\r\n					break;\r\n				case \'ERRORS\':\r\n					$errors = $value;\r\n					break;\r\n				case \'TOTAL FILES\':\r\n					$total_files = $value;\r\n					break;\r\n				case \'PROCESSED FILES\':\r\n					$processed_files = $value;\r\n					break;\r\n				case \'TOTAL SIZE\':\r\n					list ( $total_size ) = sscanf( $value, "%d" );\r\n					break;\r\n				case \'PROCESSED SIZE\':\r\n					list ( $processed_size ) = sscanf( $value, "%d" );\r\n					break;\r\n				case \'DEVICE\':\r\n					$device = $value;\r\n					break;\r\n				case \'\':\r\n					$sql = \'\';\r\n					if ( isset( $devicename ) ) {\r\n						$sql = "insert into dataprotector_omnistat_devices (cellserver,sessionid,name,host,started,finished,done," .\r\n							 "physical_device,status,updated_on) values (\'%cellserver\',\'%sessionid\',\'%name\',\'%host\'," .\r\n							 "nullif(\'%started\',\'\'),nullif(\'%finished\',\'\'),nullif(\'%done\',\'\')," .\r\n							 "nullif(\'%physical_device\',\'\'),nullif(\'%status\',\'\'),\'%updated_on\') on duplicate key " .\r\n							 "update finished=nullif(\'%finished\',\'\'),done=nullif(\'%done\',\'\'),status=nullif(\'%status\',\'\'),updated_on=\'%updated_on\';";\r\n						$values = array( \r\n							\'cellserver\' => $this->application->cellserver, \r\n							\'sessionid\' => $sessionid, \r\n							\'name\' => $devicename, \r\n							\'host\' => $host, \r\n							\'started\' => $this->application->parse_date( $started ), \r\n							\'finished\' => $this->application->parse_date( $finished ), \r\n							\'done\' => $done, \r\n							\'physical_device\' => $physical_device, \r\n							\'status\' => $status, \r\n							\'updated_on\' => $this->application->start_time );\r\n					}\r\n					if ( isset( $objectname ) ) {\r\n						$sql = "insert into dataprotector_omnistat_objects (cellserver,sessionid,name,type,started,finished,runlevel," .\r\n							 "warnings,errors,total_files,processed_files,total_size,processed_size,device,status,updated_on) " .\r\n							 "values (\'%cellserver\',\'%sessionid\',\'%name\',\'%type\'," .\r\n							 "nullif(\'%started\',\'\'),nullif(\'%finished\',\'\'),nullif(\'%runlevel\',\'\')," .\r\n							 "nullif(\'%warnings\',\'\'),nullif(\'%errors\',\'\'),nullif(\'%total_files\',\'\'),nullif(\'%processed_files\',\'\')," .\r\n							 "nullif(\'%total_size\',\'\'),nullif(\'%processed_size\',\'\')," .\r\n							 "nullif(\'%device\',\'\'),nullif(\'%status\',\'\'),\'%updated_on\') on duplicate key " .\r\n							 "update finished=nullif(\'%finished\',\'\'),warnings=nullif(\'%warnings\',\'\')," .\r\n							 "errors=nullif(\'%errors\',\'\'),total_files=nullif(\'%total_files\',\'\')," .\r\n							 "processed_files=nullif(\'%processed_files\',\'\')," .\r\n							 "total_size=nullif(\'%total_size\',\'\'),processed_size=nullif(\'%processed_size\',\'\')," .\r\n							 "device=nullif(\'%device\',\'\'),status=nullif(\'%status\',\'\'),updated_on=\'%updated_on\';";\r\n						$values = array( \r\n							\'cellserver\' => $this->application->cellserver, \r\n							\'sessionid\' => $sessionid, \r\n							\'name\' => substr( $this->application->database->escape_string( $objectname ), 0, 200 ), \r\n							\'type\' => $type, \r\n							\'started\' => $this->application->parse_date( $started ), \r\n							\'finished\' => $this->application->parse_date( $finished ), \r\n							\'runlevel\' => $runlevel, \r\n							\'warnings\' => $warnings, \r\n							\'errors\' => $errors, \r\n							\'total_files\' => $total_files, \r\n							\'processed_files\' => $processed_files, \r\n							\'total_size\' => $total_size, \r\n							\'processed_size\' => $processed_size, \r\n							\'device\' => $device, \r\n							\'status\' => $status, \r\n							\'updated_on\' => $this->application->start_time );\r\n					}\r\n					$sql != \'\' && $this->application->database->execute_query( $sql, $values );\r\n					break;\r\n				default:\r\n					$this->application->log_error( sprintf( ROUTINES_ERROR_OMNISTAT_DETAILS_UNKNOWN_ITEM, $sessionid, $key, $value ) );\r\n			}\r\n		}\r\n		return true;\r\n	}\r\n}\r\n\r\nfunction execute_routines( $application ) {\r\n	foreach ( explode( \',\', ROUTINES ) as $routine ) {\r\n		list ( $start, $interval ) = array_map( \'trim\', \r\n			explode( \'+\', sprintf( \'%s+1440\', $application->config[ sprintf( \'ROUTINE_%s\', $routine ) ] ) ) );\r\n		( $start == \'\' ) && $start = \'0:00\';\r\n		$passed = round( ( strtotime( $application->start_time ) - strtotime( sprintf( \'%s %s\', date( \'Y-m-d\' ), $start ) ) ) / 60 );\r\n		( ( $passed % $interval ) == 0 ) && queue_action( $application, \'ROUTINE\', $routine, 0, $interval );\r\n	}\r\n}\r\n', '2013-01-01 00:00:00', '2017-07-28 11:30:57', NULL),
	(10, 'inc/specifications.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 SPECIFICATIONS PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'SPECIFICATIONS_INTEGRATIONS\', \r\n	\'DB2,E2010,Enabler,HANA,IDB,Informix,Lotus,Mailbox,MSESE,MSExchange,MSSharePoint,MSSPS,MSSQL,MSVSSW,Oracle8,SAP,SAPDB,Stream,Sybase,VEAgent,VMWare\' );\r\ndefine( \'SPECIFICATIONS_DATALIST_PATTERN\', \r\n	"(?P<comment>^#.*?\\n)|(?P<key>^\\s*?[A-Z]+)|(?:{(?P<items>(?:(?>[^{}]+)|(?R))*?)})|(?P<option>-\\w+)|(?P<value>\\S+)" );\r\ndefine( \'SPECIFICATIONS_SCHEDULE_PATTERN\', "(?P<option>\\"?-\\w+)|(?P<value>\\S+)" );\r\ndefine( \'SPECIFICATIONS_HOSTNAME_PATTERN\', "\\"%[^\\"]\\" %[^:]:\\"%[^\\"]" );\r\ndefine( \'SPECIFICATIONS_PERMANENT_STRING\', \'Permanent\' );\r\ndefine( \'SPECIFICATIONS_FILESYSTEM\', \'FS\' );\r\ndefine( \'SPECIFICATIONS_DATALISTS\', \'datalists\' );\r\ndefine( \'SPECIFICATIONS_SCHEDULES\', \'schedules\' );\r\ndefine( \'SPECIFICATIONS_BARLISTS\', \'barlists\' );\r\ndefine( \'SPECIFICATIONS_BARSCHEDULES\', \'barschedules\' );\r\ndefine( \'SPECIFICATIONS_ERROR\', \'Error in specification "%s": %s\' );\r\ndefine( \'SPECIFICATIONS_ERROR_NOT_EXISTS\', \'Missing specification file for schedule file "%s".\' );\r\ndefine( \'SPECIFICATIONS_TYPE\', serialize( array( \r\n	\'DATALIST\', \r\n	\'BARLIST\' ) ) );\r\ndefine( \'SPECIFICATIONS_ERROR_INVALID\', \'Specification "%s" is not valid.\' );\r\ndefine( \'SPECIFICATIONS_ERROR_NO_HOST\', \'Error in specification "%s": Host definition missing.\' );\r\ndefine( \'SPECIFICATIONS_ERROR_MISSING_SCHEDULE\', \'Error in specification "%s": Schedule file does not exist.\' );\r\ndefine( \'SPECIFICATIONS_ERROR_READING\', \'Error reading "%s": %s\' );\r\ndefine( \'SPECIFICATIONS_ERROR_WRITE_DATALIST\', \'Cannot write to specification file "%s".\' );\r\ndefine( \'SPECIFICATIONS_ERROR_WRITE_SCHEDULE\', \'Cannot write to schedule file "%s".\' );\r\ndefine( \'SPECIFICATIONS_ERROR_WRITING\', \'Error writing "%s": %s\' );\r\ndefine( \'SPECIFICATIONS_ERROR_NOT_IN_DB\', \'Specification "%s" not found in database.\' );\r\ndefine( \'SPECIFICATIONS_LOG\', \'SPECIFICATIONS: %s inserted, %s updated, %s removed.\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_FOLDER_NOT_EXISTS\', \'Folder "%s" does not exist.\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_ALWAYS\', \'Always\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_NEVER\', \'Never\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_FULL\', \'Full\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_INCR\', \'Incr\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_NONRESTARTABLE\', \'offline\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_INFO1\', \'#Automatic upload for backup information to ESL\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_INFO2\', \'#Generated by MARS 3.0 @ \' . @date( \'d.m.Y H:i\' ) );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_HEADER\', \r\n	\'System Name,Backup Method,Backup Name,Backup Scheduler,Tape Check Time,Backup Start Time,Backup Type,Service Tier,\' . \r\n		\'Scheduling Mon,Scheduling Tue,Scheduling Wed,Scheduling Thu,Scheduling Fri,Scheduling Sat,Scheduling Sun,Scheduling On Demand,\' .\r\n		\'Restartable?,Restart Window,Backup Device,Backup Retention,Recovery Instructions,Comments\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL\', \'"%s","DataProtector","%s","omniback","15:00","%s","%s","%s","%s","%s","%s","%s","%s","%s","%s","1","%s","12h","%s","%s","",""\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_CLIENT_HEADER\', \'System Name,Backup Method,Backup Name,Client System Name\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_CLIENT\', \'"%s","DataProtector","%s","%s"\' );\r\ndefine( \'SPECIFICATIONS_OMNI2ESL_LOG\', \'OMNI2ESL: %s specifications exported.\' );\r\n\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n	define( \'SPECIFICATIONS_OMNI2ESL_FILE\', \'%s\\esl_omni_obcheck.txt\' );\r\n	define( \'SPECIFICATIONS_OMNI2ESL_CLIENT_FILE\', \'%s\\esl_omni_obcheck_client.txt\' );\r\n} else {\r\n	define( \'SPECIFICATIONS_OMNI2ESL_FILE\', \'%s/esl_omni_obcheck.txt\' );\r\n	define( \'SPECIFICATIONS_OMNI2ESL_CLIENT_FILE\', \'%s/esl_omni_obcheck_client.txt\' );\r\n}\r\n\r\nclass mars_specification {\r\n	var $application;\r\n	var $fullname;\r\n	var $integration;\r\n	var $name;\r\n	var $dpgroup;\r\n	var $specification_file;\r\n	var $schedule_file;\r\n	var $specification_modified;\r\n	var $schedule_modified;\r\n	var $specification;\r\n	var $parsed_specification;\r\n	var $schedule;\r\n	var $parsed_schedule;\r\n	var $hostnames;\r\n	var $devices;\r\n	var $protection;\r\n	var $periodicity;\r\n	var $nextexecution;\r\n\r\n	function mars_specification( $application, $name, $specification = \'\', $schedule = \'\' ) {\r\n		$this->application = $application;\r\n		$this->fullname = $name;\r\n		$this->integration = \'\';\r\n		$this->name = $name;\r\n		if ( strpos( $this->name, \' \' ) ) {\r\n			$integ = substr( $this->name, 0, strpos( $this->name, \' \' ) );\r\n			if ( in_array( $integ, explode( \',\', SPECIFICATIONS_INTEGRATIONS ) ) ) {\r\n				$this->integration = $integ;\r\n				$this->name = substr( $this->name, strlen( $this->integration ) + 1 );\r\n			}\r\n		}\r\n		$this->dpgroup = \'\';\r\n		$this->specification_file = \'\';\r\n		$this->schedule_file = \'\';\r\n		$this->specification_modified = \'\';\r\n		$this->schedule_modified = \'\';\r\n		$this->specification = $specification;\r\n		$this->schedule = $schedule;\r\n		$this->parsed_specification = \'\';\r\n		$this->parsed_schedule = \'\';\r\n		$this->hostnames = array();\r\n		$this->devices = array();\r\n		$this->protection = SPECIFICATIONS_PERMANENT_STRING;\r\n		$this->periodicity = -1;\r\n		$this->nextexecution = array();\r\n	}\r\n\r\n	function read_file() {\r\n		try {\r\n			if ( $this->integration == \'\' ) {\r\n				$specifications_subdir = SPECIFICATIONS_DATALISTS;\r\n				$schedules_subdir = SPECIFICATIONS_SCHEDULES;\r\n			} else {\r\n				$specifications_subdir = SPECIFICATIONS_BARLISTS . DIRECTORY_SEPARATOR . strtolower( $this->integration );\r\n				$schedules_subdir = SPECIFICATIONS_BARSCHEDULES . DIRECTORY_SEPARATOR . strtolower( $this->integration );\r\n			}\r\n			$this->specification_file = $this->application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR \r\n				. $specifications_subdir . DIRECTORY_SEPARATOR . $this->name;\r\n			$this->specification_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->specification_file );\r\n			$this->schedule_file = $this->application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR \r\n				. $schedules_subdir . DIRECTORY_SEPARATOR . $this->name;\r\n			$this->schedule_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->schedule_file );\r\n			if ( !file_exists( $this->specification_file ) ) {throw new exception( \r\n					sprintf( SPECIFICATIONS_ERROR_NOT_EXISTS, $this->schedule_file ) );}\r\n			$this->specification_modified = date( $this->application->config[ \'TIME_FORMAT\' ], filemtime( $this->specification_file ) );\r\n			$this->specification = $this->application->read_file( $this->specification_file );\r\n			if ( !in_array( trim( substr( $this->specification, 0, 8 ) ), unserialize( SPECIFICATIONS_TYPE ) ) ) {throw new exception( \r\n				sprintf( SPECIFICATIONS_ERROR_INVALID, $this->specification_file ) );}\r\n			$this->parse_specification( );\r\n			if ( count( $this->hostnames ) == 0 ) {\r\n				$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_NO_HOST, $this->specification_file ) );\r\n			}\r\n			if ( file_exists( $this->schedule_file ) ) {\r\n				$this->schedule_modified = date( $this->application->config[ \'TIME_FORMAT\' ], filemtime( $this->schedule_file ) );\r\n				$this->schedule = $this->application->read_file( $this->schedule_file );\r\n				$this->parse_schedule( );\r\n				$this->periodicity = -1;\r\n				$this->nextexecution = $this->get_nextexecution( );\r\n				if ( $this->nextexecution ) {\r\n					$nextexecution = $this->get_nextexecution( sprintf( "%s +1 day", $this->nextexecution[ 0 ][ \'date\' ] ) );\r\n					$this->periodicity = \r\n						( strtotime( $nextexecution[ 0 ][ \'date\' ] ) - strtotime( $this->nextexecution[ 0 ][ \'date\' ] ) ) / ( 24 * 60 * 60 );\r\n				}\r\n			} else {\r\n#				$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_MISSING_SCHEDULE, $this->schedule_file ) );\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( SPECIFICATIONS_ERROR, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function write_file() {\r\n		try {\r\n			if ( $this->integration == \'\' ) {\r\n				$specifications_subdir = SPECIFICATIONS_DATALISTS;\r\n				$schedules_subdir = SPECIFICATIONS_SCHEDULES;\r\n			} else {\r\n				$specifications_subdir = SPECIFICATIONS_BARLISTS . DIRECTORY_SEPARATOR . strtolower( $this->integration );\r\n				$schedules_subdir = SPECIFICATIONS_BARSCHEDULES . DIRECTORY_SEPARATOR . strtolower( $this->integration );\r\n			}\r\n			$this->specification_file = $this->application->config[ \'OMNI_SERVER\' ] \r\n				. DIRECTORY_SEPARATOR . $specification_subdir . DIRECTORY_SEPARATOR . $this->name;\r\n			$this->specification_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->specification_file );\r\n			$this->schedule_file = $this->application->config[ \'OMNI_SERVER\' ] \r\n				. DIRECTORY_SEPARATOR . $schedule_subdir . DIRECTORY_SEPARATOR . $this->name;\r\n			$this->schedule_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->schedule_file );\r\n			if ( !file_put_contents( $this->specification_file, $this->specification ) ) {throw new exception( \r\n					sprintf( SPECIFICATIONS_ERROR_WRITE_DATALIST, $this->specification_file ) );}\r\n			if ( !file_put_contents( $this->schedule_file, $this->schedule ) ) {throw new exception( \r\n					sprintf( SPECIFICATIONS_ERROR_WRITE_SCHEDULE, $this->schedule_file ) );}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_WRITING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function read_database() {\r\n		try {\r\n			$this->specification_file = \'\';\r\n			$this->schedule_file = \'\';\r\n			$this->specification_modified = \'\';\r\n			$this->schedule_modified = \'\';\r\n			$sql = "select * from dataprotector_specifications where cellserver=\'%cellserver\' and name=\'%name\' limit 1;";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'name\' => $this->fullname );\r\n			if ( $this->application->database->execute_query( $sql, $values ) == 0 ) {throw new exception( \r\n					sprintf( SPECIFICATIONS_ERROR_NOT_IN_DB, $this->fullname ) );}\r\n			$this->integration = $this->application->database->rows[ 0 ][ \'type\' ];\r\n			$this->integration == SPECIFICATIONS_FILESYSTEM && $this->integration = \'\';\r\n			$this->specification = $this->application->database->rows[ 0 ][ \'specification\' ];\r\n			$this->schedule = $this->application->database->rows[ 0 ][ \'schedule\' ];\r\n			$this->parse_specification( );\r\n			$this->periodicity = -1;\r\n			$this->nextexecution = $this->get_nextexecution( );\r\n			if ( $this->nextexecution ) {\r\n				$nextexecution = $this->get_nextexecution( sprintf( "%s +1 day", $this->nextexecution[ 0 ][ \'date\' ] ) );\r\n				$this->periodicity = ( strtotime( $nextexecution[ 0 ][ \'date\' ] ) - strtotime( $this->nextexecution[ 0 ][ \'date\' ] ) ) /\r\n					 ( 24 * 60 * 60 );\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_READING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function write_database() {\r\n		$result = false;\r\n		try {\r\n			$nextexecution = \'\';\r\n			if ( $this->nextexecution ) {\r\n				$nextexecution = date( $this->application->config[ \'TIME_FORMAT\' ], \r\n					strtotime( sprintf( \'%s %s\', $this->nextexecution[ 0 ][ \'date\' ], $this->nextexecution[ 0 ][ \'time\' ] ) ) );\r\n			}\r\n			;\r\n			$sql = "select name from config_customers where \'%name\' regexp specification and valid_until is null limit 1;";\r\n			$values = array( \r\n				\'name\' => $this->fullname );\r\n			if ( $this->application->database->execute_query( $sql, $values ) == 1 ) {\r\n				$customer = $this->application->database->rows[ 0 ][ \'name\' ];\r\n			} else {\r\n				$customer = \'\';\r\n			}\r\n			$sql = "select name from config_retentions where (customer=\'%customer\' or customer is null) " .\r\n				 "and (\'%name\' regexp specification or specification is null) and valid_until is null " .\r\n				 "order by customer,ifnull(specification,\'{general}\') limit 1;";\r\n			$values = array( \r\n				\'customer\' => $customer, \r\n				\'name\' => $this->fullname );\r\n			if ( $this->application->database->execute_query( $sql, $values ) == 1 ) {\r\n				$retention = $this->application->database->rows[ 0 ][ \'name\' ];\r\n			} else {\r\n				$retention = \'\';\r\n			}\r\n			$sql = "select \r\n				@s:=(select ifnull(max(starttime),0) from _sessions where cellserver=s1.cellserver and specification=s1.specification and status not regexp \'progress\' and bsr=100),\r\n				@f:=(select ifnull(max(starttime),0) from _sessions where cellserver=s1.cellserver and specification=s1.specification and status not regexp \'progress\' and bsr<100),\r\n				count(s1.sessionid) as sessions,\r\n				max(if(s1.starttime=greatest(@s,@f),s1.sessionid,null)) as lastsessionid,\r\n				max(if(s1.starttime=@s,s1.sessionid,null)) as lastsuccessfulsessionid,\r\n				ifnull(sum(if(s1.bsr<100 and s1.starttime>@s,1,0)),0) as failure,\r\n				ifnull(sum(if(s1.bsr=100 and s1.starttime>@f,1,0)),0) as success\r\n				from _sessions s1 where s1.cellserver=\'%cellserver\' and s1.specification=\'%specification\';";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'specification\' => $this->fullname );\r\n			$result = $this->application->database->execute_query( $sql, $values );\r\n			if ( $this->application->database->row_count == 1 ) {\r\n				list ( $s,$f,$sessions,$lastsessionid,$lastsuccessfulsessionid, $failure, $success ) = $this->application->database->rows[ 0 ];\r\n			} else {\r\n				$lastsessionid = \'\';\r\n				$lastsuccessfulsessionid = \'\';\r\n				$success = $failure = 0;\r\n			}\r\n			$sql = "insert into dataprotector_specifications " .\r\n				 "(cellserver,name,type,customer,retention,specification_modified,specification," .\r\n				 "schedule_modified,schedule,hosts,hostnames,nextexecution,periodicity,protection," .\r\n				 "dpgroup,lastsessionid,lastsuccessfulsessionid,success,failure) " .\r\n				 "values(\'%cellserver\',\'%name\',\'%type\',nullif(\'%customer\',\'\'),nullif(\'%retention\',\'\')," .\r\n				 "nullif(\'%specification_modified\',\'\'),\'%specification\'," .\r\n				 "nullif(\'%schedule_modified\',\'\'),nullif(\'%schedule\',\'\'),\'%hosts\',\'%hostnames\'," .\r\n				 "nullif(\'%nextexecution\',\'\'),\'%periodicity\',\'%protection\',nullif(\'%dpgroup\',\'\')," . \r\n				 "nullif(\'%lastsessionid\',\'\'),nullif(\'%lastsuccessfulsessionid\',\'\'),\'%success\',\'%failure\') " .\r\n				 "on duplicate key update type=\'%type\',customer=nullif(\'%customer\',\'\'),retention=nullif(\'%retention\',\'\')," .\r\n				 "specification_modified=nullif(\'%specification_modified\',\'\'),specification=\'%specification\'," .\r\n				 "schedule_modified=nullif(\'%schedule_modified\',\'\'),schedule=nullif(\'%schedule\',\'\'), " .\r\n				 "hosts=\'%hosts\',hostnames=\'%hostnames\',nextexecution=nullif(\'%nextexecution\',\'\')," .\r\n				 "dpgroup=nullif(\'%dpgroup\',\'\'),periodicity=\'%periodicity\',protection=\'%protection\'," . \r\n				 "lastsessionid=nullif(\'%lastsessionid\',\'\'),lastsuccessfulsessionid=nullif(\'%lastsuccessfulsessionid\',\'\')," .\r\n				 "success=\'%success\',failure=\'%failure\',updated_on=\'%updated_on\',valid_until=null;";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'name\' => $this->fullname, \r\n				\'type\' => empty( $this->integration ) ? SPECIFICATIONS_FILESYSTEM : $this->integration, \r\n				\'customer\' => $customer, \r\n				\'retention\' => $retention, \r\n				\'specification_modified\' => $this->specification_modified, \r\n				\'specification\' => $this->application->database->escape_string( $this->specification ), \r\n				\'schedule_modified\' => $this->schedule_modified, \r\n				\'schedule\' => $this->application->database->escape_string( $this->schedule ), \r\n				\'hosts\' => count( $this->hostnames ), \r\n				\'hostnames\' => implode( ",", $this->hostnames ), \r\n				\'nextexecution\' => $nextexecution, \r\n				\'periodicity\' => $this->periodicity, \r\n				\'protection\' => $this->protection,\r\n				\'dpgroup\' => $this->dpgroup,\r\n				\'lastsessionid\' => $lastsessionid, \r\n				\'lastsuccessfulsessionid\' => $lastsuccessfulsessionid, \r\n				\'success\' => $success, \r\n				\'failure\' => $failure, \r\n				\'updated_on\' => $this->application->start_time );\r\n			$result = $this->application->database->execute_query( $sql, $values );\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( SPECIFICATIONS_ERROR_WRITING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function parse( $text ) {\r\n		$result = array();\r\n		$match = array();\r\n		$tokens = preg_match_all( \'/\' . SPECIFICATIONS_DATALIST_PATTERN . \'/m\', $text, $match );\r\n		$i = 0;\r\n		$key = \'\';\r\n		$option = \'\';\r\n		$value = \'\';\r\n		while ( $i <= $tokens ) {\r\n			if ( $i == $tokens ) {\r\n				$action1 = \'key\';\r\n				$action2 = \'#\';\r\n			} else {\r\n				foreach ( array( \r\n					\'comment\', \r\n					\'key\', \r\n					\'option\', \r\n					\'value\', \r\n					\'items\' ) as $j ) {\r\n					( $match[ $j ][ $i ] != \'\' ) && $action1 = $j;\r\n				}\r\n				$action2 = trim( $match[ $action1 ][ $i ] );\r\n			}\r\n			switch ( $action1 ) {\r\n				case \'key\':\r\n					if ( ( $key == $action2 ) or ( isset( $result[ $key . \'-S\' ] ) ) ) {\r\n						$result[ $key . \'-S\' ][ ] = $result[ $key ];\r\n						unset( $result[ $key ] );\r\n					}\r\n					$key = strtoupper( $action2 );\r\n					$option = \'\';\r\n					$value = \'\';\r\n					$key != \'#\' && $result[ $key ] = $value;\r\n					break;\r\n				case \'option\':\r\n					if ( $option == \'\' ) {\r\n						if ( $key != \'\' and !is_array( $result[ $key ] ) ) {\r\n							$result[ $key ] = ( $result[ $key ] == \'\' ? array() : array( \r\n								\'name\' => $result[ $key ] ) );\r\n						}\r\n					}\r\n					$option = substr( $action2, 1 );\r\n					$value = \'\';\r\n					if ( $key == \'\' ) {\r\n						$result[ $option ] = $value;\r\n					} else {\r\n						$result[ $key ][ $option ] = $value;\r\n					}\r\n					break;\r\n				case \'value\':\r\n					$value = trim( $value . \' \' . $action2 );\r\n					if ( $option == \'\' ) {\r\n						$result[ $key ] = $value;\r\n					} else {\r\n						if ( $key == \'\' ) {\r\n							$result[ $option ] = $value;\r\n						} else {\r\n							$result[ $key ][ $option ] = $value;\r\n						}\r\n					}\r\n					( $option == \'protect\' ) && $this->protection = $value;\r\n					break;\r\n				case \'items\':\r\n					if ( ( $key != \'\' ) and !is_array( $result[ $key ] ) ) {\r\n						$result[ $key ] = ( $result[ $key ] == \'\' ? array() : array( \r\n							\'name\' => $result[ $key ] ) );\r\n						$result[ $key ][ \'items\' ] = $this->parse( $action2 );\r\n					} else {\r\n						$result[ \'items\' ] = $this->parse( $action2 );\r\n					}\r\n					break;\r\n			}\r\n			$i++;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function parse_specification() {\r\n		if ( is_array( $this->parsed_specification ) ) return $this->parsed_specification;\r\n		$specification = $this->parse( $this->specification );\r\n		\r\n		$keys = array_keys( $specification );\r\n		foreach ( $keys as $key => $value ) {\r\n			$keys[ $key ] = str_replace( \'-S\', \'\', $value );\r\n		}\r\n		$this->parsed_specification = array_combine( $keys, $specification );\r\n		!empty( $this->parsed_specification[ \'GROUP\' ] ) && $this->dpgroup = str_replace( \'"\', \'\', $this->parsed_specification[ \'GROUP\' ] );\r\n		foreach ( $this->parsed_specification[ \'DEVICE\' ] as $device ) {\r\n			isset( $device[ \'name\' ] ) && $this->devices[ ] = $device[ \'name\' ];\r\n		}\r\n		$this->devices = array_unique( $this->devices );\r\n		foreach ( array( \r\n			\'HOST\', \r\n			\'CLIENT\', \r\n			\'WINFS\', \r\n			\'FILESYSTEM\', \r\n			\'OMNIDB\' ) as $hosttype ) {\r\n			if ( !isset( $this->parsed_specification[ $hosttype ] ) ) continue;\r\n			$hosts = isset( $this->parsed_specification[ $hosttype ][ 0 ] ) ? $this->parsed_specification[ $hosttype ] : array( \r\n				$this->parsed_specification[ $hosttype ] );\r\n			foreach ( $hosts as $host ) {\r\n				list ( $description, $hostname, $mountpoint ) = sscanf( $host[ \'name\' ], SPECIFICATIONS_HOSTNAME_PATTERN );\r\n				$this->hostnames[ ] = $hostname;\r\n			}\r\n		}\r\n		$this->hostnames = array_unique( $this->hostnames );\r\n		return $this->parsed_specification;\r\n	}\r\n\r\n	function parse_schedule() {\r\n		if ( is_array( $this->parsed_schedule ) ) return $this->parsed_schedule;\r\n		$schedule = array();\r\n		$match = array();\r\n		$tokens = preg_match_all( \'/\' . SPECIFICATIONS_SCHEDULE_PATTERN . \'/m\', $this->schedule, $match );\r\n		$i = 0;\r\n		$option = \'\';\r\n		$value = \'\';\r\n		$item = array();\r\n		while ( $i < $tokens ) {\r\n			foreach ( array( \r\n				\'option\', \r\n				\'value\' ) as $j ) {\r\n				( $match[ $j ][ $i ] != \'\' ) && $action1 = $j;\r\n			}\r\n			$action2 = trim( $match[ $action1 ][ $i ] );\r\n			switch ( $action1 ) {\r\n				case \'option\':\r\n					$option = substr( $action2, 1 );\r\n					$value = \'\';\r\n					$item[ $option ] = $value;\r\n					break;\r\n				case \'value\':\r\n					$value = trim( $value . \' \' . $action2 );\r\n					$item[ $option ] = $value;\r\n					if ( $option == \'at\' ) {\r\n						$schedule[ ] = $item;\r\n						$item = array();\r\n					}\r\n					break;\r\n			}\r\n			$i++;\r\n		}\r\n		$this->parsed_schedule = $schedule;\r\n		return $this->parsed_schedule;\r\n	}\r\n\r\n	function is_scheduled( $date = \'today\' ) {\r\n		try {\r\n			$result = false;\r\n			$schedule = $this->parse_schedule( );\r\n			$date = date( \'Y-m-d\', strtotime( $date ) );\r\n			list ( $yday, $weekday, $day, $month, $year ) = explode( \' \', date( \'z D j M Y\', strtotime( $date ) ) );\r\n			foreach ( $schedule as $item ) {\r\n				if ( isset( $item[ \'disabled\' ] ) ) {\r\n					$result = false;\r\n					break;\r\n				}\r\n				if ( isset( $item[ \'every\' ] ) and isset( $item[ \'4day\' ] ) and in_array( $weekday, explode( \' \', $item[ \'4day\' ] ) ) ) {\r\n					$firstday = date( \'z\', strtotime( sprintf( \'%s Jan %s\', $item[ \'4day\' ], $year ) ) );\r\n					if ( ( ( $yday - $firstday ) % 28 ) == 0 ) {\r\n						list ( $mode, $value ) = each( $item );\r\n						$result[ ] = array(\r\n								\'mode\' => trim( $mode . \' \' . $value ),\r\n								\'date\' => $date,\r\n								\'time\' => $item[ \'at\' ] );\r\n					}\r\n				}\r\n				if ( isset( $item[ \'starting\' ] ) and isset( $item[ \'every\' ] ) and isset( $item[ \'day\' ] ) and\r\n					( isset( $item[ \'2month\' ] ) or isset( $item[ \'3month\' ] ) or isset( $item[ \'4month\' ] ) \r\n					or isset( $item[ \'6month\' ] ) or isset( $item[ \'12month\' ] ) ) ) {\r\n						$emonth = 1;\r\n						isset( $item[ \'2month\' ] )  && $emonth = 2;\r\n						isset( $item[ \'3month\' ] )  && $emonth = 3;\r\n						isset( $item[ \'4month\' ] ) && $emonth = 4; \r\n						isset( $item[ \'6month\' ] )  && $emonth = 6;\r\n						isset( $item[ \'12month\' ] ) && $emonth = 12;\r\n						$months = array( );\r\n						list( $sday, $smonth,$syear ) = explode( \' \', $item[ \'starting\' ] );\r\n						for ( $m = 0; $m < 12; $m++) {\r\n							( $smonth + $m - 1 ) % $emonth == 0 && \r\n								$months[ ] = date(\'M\', strtotime( sprintf( \'+%d months\', $m ), 0 ) );\r\n						}\r\n				} else {\r\n					unset( $months );\r\n				}\r\n				if ( isset( $item[ \'every\' ] ) and isset( $item[ \'day\' ] ) and ( ( $item[ \'day\' ] == \'\' ) or ( $item[ \'day\' ] == $day )\r\n					or in_array( $day, explode( \' \', $item[ \'day\' ] ) ) or in_array( $weekday, explode( \' \', $item[ \'day\' ] ) ) )\r\n					and ( !isset( $item[ \'month\' ] ) or ( $item[ \'month\' ] == $month ) or( in_array( $month, explode( \' \', $item[ \'month\' ] ) ) ) )\r\n					and ( !isset( $months ) or in_array( $month,  $months ) ) ) {\r\n						list ( $mode, $value ) = each( $item );\r\n						$result[ ] = array(\r\n							\'mode\' => trim( $mode . \' \' . $value ),\r\n							\'date\' => $date,\r\n							\'time\' => $item[ \'at\' ] );\r\n				}\r\n				if ( isset( $item[ \'only\' ] ) and $item[ \'only\' ] == $year and $item[ \'day\' ] == $day and $item[ \'month\' ] == $month ) {\r\n					list ( $mode, $value ) = each( $item );\r\n					$result[ ] = array(\r\n						\'mode\' => trim( $mode . \' \' . $value ),\r\n						\'date\' => $date,\r\n						\'time\' => $item[ \'at\' ] );\r\n				}\r\n				if ( isset( $item[ \'exclude\' ] ) and ( !isset( $item[ \'year\' ] ) or $item[ \'year\' ] == $year )\r\n					and	( isset( $item[ \'month\' ] ) and $item[ \'month\' ] == $month )\r\n					and ( isset( $item[ \'day\' ] ) and $item[ \'day\' ] == $day ) ) {\r\n						$result = false;\r\n				}\r\n				if ( isset( $item[ \'exclude\' ] ) and !isset( $item[ \'year\' ] ) and !isset( $item[ \'month\' ] ) and ( isset( $item[ \'day\' ] )\r\n					and ( in_array( $day, explode( \' \', $item[ \'day\' ] ) ) ) or in_array( $weekday, explode( \' \', $item[ \'day\' ] ) ) ) ) {\r\n						$result = false;\r\n				}\r\n				if ( isset( $item[ \'exclude\' ] ) and !isset( $item[ \'year\' ] ) and !isset( $item[ \'month\' ] )\r\n					and isset( $item[ \'4day\' ] ) and in_array( $weekday, explode( \' \', $item[ \'4day\' ] ) ) ) {\r\n						$firstday = date( \'z\', strtotime( sprintf( \'%s Jan %s\', $item[ \'4day\' ], $year ) ) );\r\n						if ( ( ( $yday - $firstday ) % 28 ) == 0 ) {\r\n							$result = false;\r\n						}\r\n				}\r\n		}\r\n	}\r\n	catch ( exception $e ) {\r\n		$this->application->log_error( $e->getmessage( ) );\r\n	}\r\n		return $result;\r\n	}\r\n\r\n	function get_nextexecution( $date = \'today\' ) {\r\n		$i = 1;\r\n		$result = $this->is_scheduled( $date );\r\n		while ( $i < 365 and !$result ) {\r\n			$result = $this->is_scheduled( sprintf( \'%s +%d day\', $date, $i ) );\r\n			$i++;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function omni2esl( $client = false ) {\r\n		$this->parse_specification( );\r\n		$name = sprintf( \'%s%s%s\', strtolower( $this->integration ), ( $this->integration == \'\' ? \'\' : \'/\' ), $this->name );\r\n		if ( $client ) {\r\n			$lines = array();\r\n			foreach ( $this->hostnames as $host ) {\r\n				$lines[ ] = sprintf( SPECIFICATIONS_OMNI2ESL_CLIENT, $this->application->cellserver, $name, $host );\r\n			}\r\n			return $lines;\r\n		}\r\n		$nextexecution = $this->get_nextexecution( );\r\n		$starttime = ( $nextexecution and isset( $nextexecution[ 0 ][ \'time\' ] ) ) ? $nextexecution[ 0 ][ \'time\' ] : \'\';\r\n		$device = count( $this->devices ) ==  0 ? \'\' : trim( str_replace( \'"\', \'\', $this->devices[ 0 ] ) );\r\n		$retention = $this->protection;\r\n		if ( stristr( $retention, \' \' ) ) {\r\n			list ( $interval, $value ) = explode( \' \', $retention );\r\n			$retention = sprintf( \'%s %s\', $value, substr( $interval, 0, 1 ) );\r\n		}\r\n		$every = \'\';\r\n		$mode = \'\';\r\n		foreach ( $this->parse_schedule( ) as $item ) {\r\n			if ( isset( $item[ \'every\' ] ) ) $every = $item[ \'day\' ];\r\n			$mode = isset( $item[ \'full\' ] ) ? SPECIFICATIONS_OMNI2ESL_FULL : SPECIFICATIONS_OMNI2ESL_INCR;\r\n		}\r\n		$managed = 1;\r\n		$reportable = 1;\r\n		$days = array();\r\n		foreach ( array( \r\n			\'Mon\', \r\n			\'Tue\', \r\n			\'Wed\', \r\n			\'Thu\', \r\n			\'Fri\', \r\n			\'Sat\', \r\n			\'Sun\' ) as $day ) {\r\n			$days[ $day ] = stristr( $every, $day ) ? 1 : 0;\r\n		}\r\n		$min = $max = 0;\r\n		if ( isset( $this->parsed_specification[ \'DYNAMIC\' ] ) ) list ( $min, $max ) = explode( \' \', \r\n			$this->parsed_specification[ \'DYNAMIC\' ] );\r\n		$restartable = stristr( $this->name, SPECIFICATIONS_OMNI2ESL_NONRESTARTABLE ) ? SPECIFICATIONS_OMNI2ESL_NEVER : SPECIFICATIONS_OMNI2ESL_ALWAYS;\r\n		$line = sprintf( SPECIFICATIONS_OMNI2ESL, $this->application->cellserver, $name, $starttime, $mode, "98%",\r\n			$days[ \'Mon\' ], $days[ \'Tue\' ], $days[ \'Wed\' ], $days[ \'Thu\' ], $days[ \'Fri\' ], $days[ \'Sat\' ], $days[ \'Sun\' ], $restartable, $device, $retention );\r\n		return $line;\r\n	}\r\n}\r\n\r\nfunction read_specifications( $application ) {\r\n	$integs = explode( \',\', SPECIFICATIONS_INTEGRATIONS );\r\n	$lines = array();\r\n	$files = array_merge( glob( $application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR . SPECIFICATIONS_DATALISTS . DIRECTORY_SEPARATOR .\'*\' ), \r\n		glob( $application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR . SPECIFICATIONS_SCHEDULES . DIRECTORY_SEPARATOR . \'*\' ) );\r\n	foreach ( $files as $file ) {\r\n		if ( is_file( $file ) ) $lines[ ] = basename( $file );\r\n	}\r\n	foreach ( $integs as $integ ) {\r\n		$specificationdir = $application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR \r\n			. SPECIFICATIONS_BARLISTS . DIRECTORY_SEPARATOR . strtolower( $integ );\r\n		$scheduledir = $application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR \r\n			. SPECIFICATIONS_BARSCHEDULES . DIRECTORY_SEPARATOR . strtolower( $integ );\r\n		$files = array_merge( glob( $scheduledir . DIRECTORY_SEPARATOR . \'*\' ), glob( $specificationdir . DIRECTORY_SEPARATOR . \'*\' ) );\r\n		$files = array_merge( glob( $scheduledir . DIRECTORY_SEPARATOR . \'*\' ), glob( $specificationdir . DIRECTORY_SEPARATOR . \'*\' ) );\r\n		foreach ( $files as $file ) {\r\n			if ( is_file( $file ) ) $lines[ ] = sprintf( \'%s %s\', $integ, basename( $file ) );\r\n		}\r\n		$lines = array_unique( $lines );\r\n	}\r\n	$i = $u = 0;\r\n	foreach ( $lines as $line ) {\r\n		$specification = new mars_specification( $application, $line );\r\n		if ( $specification->read_file( ) ) {\r\n			$result = $specification->write_database( );\r\n			( $result == 1 ) && $i++;\r\n			( $result == 2 ) && $u++;\r\n		}\r\n	}\r\n	$sql = "update dataprotector_specifications set valid_until=updated_on where id in (select id from (" .\r\n		 "select id from dataprotector_specifications where cellserver=\'%cellserver\' " .\r\n		 "and updated_on<\'%updated_on\' and valid_until is null) d order by id);";\r\n	$values = array( \r\n		\'cellserver\' => $application->cellserver, \r\n		\'updated_on\' => $application->start_time );\r\n	$d = $application->database->execute_query( $sql, $values );\r\n	$message = sprintf( SPECIFICATIONS_LOG, $i, $u, $d );\r\n	$application->log_action( $message );\r\n	return true;\r\n}\r\n\r\nfunction omni2esl( $application ) {\r\n	if ( !is_dir( $application->config[ \'OMNI2ESL\' ] ) ) {\r\n		$application->log_action( sprintf( SPECIFICATIONS_OMNI2ESL_FOLDER_NOT_EXISTS, $application->config[ \'OMNI2ESL\' ] ) );\r\n		return false;\r\n	}\r\n	$eslomni = sprintf( SPECIFICATIONS_OMNI2ESL_FILE, $application->config[ \'OMNI2ESL\' ] );\r\n	$eslomniclient = sprintf( SPECIFICATIONS_OMNI2ESL_CLIENT_FILE, $application->config[ \'OMNI2ESL\' ] );\r\n	file_exists( $eslomni ) && unlink( $eslomni );\r\n	file_exists( $eslomniclient ) && unlink( $eslomniclient );\r\n	$application->append_file( $eslomni, SPECIFICATIONS_OMNI2ESL_INFO1 );\r\n	$application->append_file( $eslomni, SPECIFICATIONS_OMNI2ESL_INFO2 );\r\n	$application->append_file( $eslomni, SPECIFICATIONS_OMNI2ESL_HEADER );\r\n	$application->append_file( $eslomniclient, SPECIFICATIONS_OMNI2ESL_INFO1 );\r\n	$application->append_file( $eslomniclient, SPECIFICATIONS_OMNI2ESL_INFO2 );\r\n	$application->append_file( $eslomniclient, SPECIFICATIONS_OMNI2ESL_CLIENT_HEADER );\r\n	$sql = "select name from dataprotector_specifications where cellserver=\'%cellserver\' and valid_until is null order by name;";\r\n	$values = array( \r\n		\'cellserver\' => $application->cellserver );\r\n	$application->database->execute_query( $sql, $values );\r\n	$i = 0;\r\n	foreach ( $application->database->rows as $row ) {\r\n		$specification = new mars_specification( $application, $row[ \'name\' ] );\r\n		$specification->read_database( );\r\n		$line = $specification->omni2esl( );\r\n		$application->append_file( $eslomni, $line );\r\n		foreach ( $specification->omni2esl( true ) as $line ) {\r\n			$application->append_file( $eslomniclient, $line );\r\n		}\r\n		$i++;\r\n	}\r\n	$message = sprintf( SPECIFICATIONS_OMNI2ESL_LOG, $i );\r\n	$application->log_action( $message );\r\n	return true;\r\n}\r\n\r\n', '2013-01-01 00:00:00', '2017-09-05 09:29:03', NULL),
	(11, 'inc/libraries.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 LIBRARIES PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'LIBRARIES_OMNIDOWNLOAD_TIMEOUT\', 30 );\r\ndefine( \'LIBRARIES_ERROR_INVALID\', \'Library "%s" is invalid.\' );\r\ndefine( \'LIBRARIES_ERROR_READING\', \'Error reading "%s": %s\' );\r\ndefine( \'LIBRARIES_ERROR_WRITING\', \'Error writing "%s": %s\' );\r\ndefine( \'LIBRARIES_ERROR_NOT_IN_DB\', \'Library "%s" not found in database.\' );\r\ndefine( \'LIBRARIES_PATTERN\', "^-?(?P<key>\\s*?\\w+)|(?:{(?P<items>(?:(?>[^{}]+)|(?R))*?)})|(?P<option>-\\w+)|(?P<value>\\S+)" );\r\ndefine( \'LIBRARIES_LOG\', \'LIBRARIES: %s inserted, %s updated, %s removed.\' );\r\n\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n	define( \'LIBRARIES_OMNIDOWNLOAD_LIST_LIBRARIES_CMD\', \'"%s\\omnidownload.exe" -list_libraries -detail\' );\r\n	define( \'LIBRARIES_OMNIDOWNLOAD_LIBRARY_CMD\', \'"%s\\omnidownload.exe" -library "%s"\' );\r\n	define( \'LIBRARIES_OMNIUPLOAD_LIBRARY_CMD\', \'"%s\\omniupload.exe" -modify_library "%s"\' );\r\n} else {\r\n	define( \'LIBRARIES_OMNIDOWNLOAD_LIST_LIBRARIES_CMD\', \'"%s/omnidownload" -list_libraries -detail\' );\r\n	define( \'LIBRARIES_OMNIDOWNLOAD_LIBRARY_CMD\', \'"%s/omnidownload" -library "%s"\' );\r\n	define( \'LIBRARIES_OMNIUPLOAD_LIBRARY_CMD\', \'"%s/omniupload" -modify_library "%s"\' );\r\n}\r\n\r\nclass mars_library {\r\n	var $application;\r\n	var $name;\r\n	var $definition;\r\n	var $parsed_definition;\r\n\r\n	function mars_library( $application, $name, $definition = \'\' ) {\r\n		$this->application = $application;\r\n		$this->name = $name;\r\n		$this->definition = $definition;\r\n		$this->parsed_definition = \'\';\r\n	}\r\n\r\n	function omnidownload() {\r\n		try {\r\n			$lines = $this->application->cache_command( \r\n				sprintf( LIBRARIES_OMNIDOWNLOAD_LIBRARY_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->name ), \r\n				LIBRARIES_OMNIDOWNLOAD_TIMEOUT );\r\n			$this->definition = implode( PHP_EOL, $lines );\r\n			$this->parse( );\r\n			if ( !isset( $this->parsed_definition[ \'NAME\' ] ) ) {throw new exception( sprintf( LIBRARIES_ERROR_INVALID, $this->name ) );}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( LIBRARIES_ERROR_READING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function omniupload() {\r\n		try {\r\n			$lines = $this->application->cache_command( \r\n				sprintf( LIBRARIES_OMNIUPLOAD_LIBRARY_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->name ), \r\n				LIBRARIES_OMNIDOWNLOAD_TIMEOUT );\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( LIBRARIES_ERROR_WRITING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function read_database() {\r\n		try {\r\n			$this->definition = \'\';\r\n			$sql = "select definition from dataprotector_libraries where cellserver=\'%cellserver\' and name=\'%name\' limit 1;";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'name\' => $this->name );\r\n			if ( $this->application->database->execute_query( $sql, $values ) == 0 ) {throw new exception( \r\n					sprintf( LIBRARIES_ERROR_NOT_IN_DB, $this->name ) );}\r\n			$this->definition = $this->application->database->rows[ 0 ][ \'definition\' ];\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( LIBRARIES_ERROR_READING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function write_database() {\r\n		$result = false;\r\n		try {\r\n			$library = $this->parse( );\r\n			$sql = "insert into dataprotector_libraries (name,definition,description,host,ioctlserial,control,mgmtconsoleurl,updated_by,updated_on) " .\r\n				 "values (\'%name\',\'%definition\',\'%description\',\'%host\',\'%ioctlserial\',\'%control\',\'%mgmtconsoleurl\',\'%updated_by\',\'%updated_on\') " .\r\n				 "on duplicate key update definition=\'%definition\',description=\'%description\',host=\'%host\'," .\r\n				 "ioctlserial=\'%ioctlserial\',control=\'%control\',mgmtconsoleurl=\'%mgmtconsoleurl\',updated_on=\'%updated_on\',valid_until=null;";\r\n			$values = array( \r\n				\'name\' => $this->name, \r\n				\'definition\' => $this->application->database->escape_string( $this->definition ), \r\n				\'description\' => $this->application->database->escape_string( $library[ \'DESCRIPTION\' ] ), \r\n				\'host\' => $library[ \'HOST\' ], \r\n				\'ioctlserial\' => str_replace( \'"\', \'\', $library[ \'IOCTLSERIAL\' ] ), \r\n				\'control\' => str_replace( \'"\', \'\', $library[ \'CONTROL\' ] ), \r\n				\'mgmtconsoleurl\' => str_replace( \'"\', \'\', $library[ \'MGMTCONSOLEURL\' ] ), \r\n				\'updated_by\' => $this->application->cellserver, \r\n				\'updated_on\' => $this->application->start_time );\r\n			$result = $this->application->database->execute_query( $sql, $values );\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( LIBRARIES_ERROR_WRITING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function parse() {\r\n		if ( is_array( $this->parsed_definition ) ) return $this->parsed_definition;\r\n		$result = array();\r\n		$match = array();\r\n		$tokens = preg_match_all( \'/\' . LIBRARIES_PATTERN . \'/m\', $this->definition, $match );\r\n		$i = 0;\r\n		$key = \'\';\r\n		$option = \'\';\r\n		$value = \'\';\r\n		while ( $i <= $tokens ) {\r\n			if ( $i == $tokens ) {\r\n				$action1 = \'key\';\r\n				$action2 = \'#\';\r\n			} else {\r\n				foreach ( array( \r\n					\'key\', \r\n					\'option\', \r\n					\'value\' ) as $j ) {\r\n					( $match[ $j ][ $i ] != \'\' ) && $action1 = $j;\r\n				}\r\n				$action2 = trim( $match[ $action1 ][ $i ] );\r\n			}\r\n			switch ( $action1 ) {\r\n				case \'key\':\r\n					if ( ( $key == $action2 ) or ( isset( $result[ $key . \'-S\' ] ) ) ) {\r\n						$result[ $key . \'-S\' ][ ] = $result[ $key ];\r\n						unset( $result[ $key ] );\r\n					}\r\n					$key = strtoupper( $action2 );\r\n					$option = \'\';\r\n					$value = \'\';\r\n					$key != \'#\' && $result[ $key ] = $value;\r\n					break;\r\n				case \'option\':\r\n					if ( $option == \'\' ) {\r\n						if ( $key != \'\' and !is_array( $result[ $key ] ) ) {\r\n							$result[ $key ] = ( $result[ $key ] == \'\' ? array() : array( \r\n								\'name\' => $result[ $key ] ) );\r\n						}\r\n					}\r\n					$option = substr( $action2, 1 );\r\n					$value = \'\';\r\n					if ( $key == \'\' ) {\r\n						$result[ $option ] = $value;\r\n					} else {\r\n						$result[ $key ][ $option ] = $value;\r\n					}\r\n					break;\r\n				case \'value\':\r\n					$value = trim( $value . \' \' . $action2 );\r\n					if ( $option == \'\' ) {\r\n						$result[ $key ] = $value;\r\n					} else {\r\n						if ( $key == \'\' ) {\r\n							$result[ $option ] = $value;\r\n						} else {\r\n							$result[ $key ][ $option ] = $value;\r\n						}\r\n					}\r\n					break;\r\n			}\r\n			$i++;\r\n		}\r\n		$this->parsed_definition = $result;\r\n		return $this->parsed_definition;\r\n	}\r\n}\r\n\r\nfunction read_libraries( $application, $action = true ) {\r\n	if ( $action ) {\r\n		$name = \'OMNIDOWNLOAD-LIBRARIES\';\r\n		$command = sprintf( LIBRARIES_OMNIDOWNLOAD_LIST_LIBRARIES_CMD, $application->config[ \'OMNI_BIN\' ] );\r\n		$file = $application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n		$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => \'LIBRARIES\' );\r\n		if ( !file_exists( $file ) ) {\r\n			$application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true );\r\n			return false;\r\n		}\r\n		$worker = $application->workers->decode( file_get_contents( $file ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file );\r\n	} else {\r\n		$lines = $application->cache_command( sprintf( LIBRARIES_OMNIDOWNLOAD_LIST_LIBRARIES_CMD, $application->config[ \'OMNI_BIN\' ] ), \r\n			LIBRARIES_OMNIDOWNLOAD_TIMEOUT );\r\n	}\r\n	$application->database->start_transaction();\r\n	$i = $u = 0;\r\n	$name = \'\';\r\n	foreach ( $lines as $line ) {\r\n		if ( preg_match( \'/^NAME/\', $line ) ) {\r\n			list ( $name ) = sscanf( $line, \'NAME %s\' );\r\n			$name = trim( str_replace( \'"\', \'\', $name ) );\r\n			$definition = array();\r\n		}\r\n		if ( preg_match( \'/^=/\', $line ) ) {\r\n			try {\r\n				$library = new mars_library( $application, $name, implode( PHP_EOL, $definition ) );\r\n				if ( $library->parse( ) ) {\r\n					$result = $library->write_database( );\r\n					( $result == 1 ) && $i++;\r\n					( $result == 2 ) && $u++;\r\n				}\r\n			}\r\n			catch ( exception $e ) {\r\n				$this->application->log_error( sprintf( LIBRARIES_ERROR_READING, $this->name, $e->getmessage( ) ) );\r\n			}\r\n			$name = \'\';\r\n			continue;\r\n		}\r\n		!empty( $name ) && $definition[ ] = $line;\r\n	}\r\n	$sql = "update dataprotector_libraries set valid_until=updated_on where id in (select id from (" .\r\n		 "select id from dataprotector_libraries where updated_by=\'%updated_by\' and updated_on<\'%updated_on\' " .\r\n		 "and valid_until is null) d order by id);";\r\n	$values = array( \r\n		\'updated_by\' => $application->cellserver, \r\n		\'updated_on\' => $application->start_time );\r\n	$d = $application->database->execute_query( $sql, $values );\r\n	$application->database->commit();\r\n	$application->log_action( sprintf( LIBRARIES_LOG, $i, $u, $d ) );\r\n	return true;\r\n}\r\n', '2013-01-01 00:00:00', '2016-08-09 09:15:03', NULL),
	(12, 'inc/devices.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 DEVICES PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'DEVICES_OMNIDOWNLOAD_TIMEOUT\', 30 );\r\ndefine( \'DEVICES_OMNIUPLOAD_TIMEOUT\', 15 );\r\ndefine( \'DEVICES_ERROR_READING\', \'Error reading "%s": %s\' );\r\ndefine( \'DEVICES_ERROR_WRITING\', \'Error writing "%s": %s\' );\r\ndefine( \'DEVICES_ERROR_NOT_IN_DB\', \'Device "%s" not found in database.\' );\r\ndefine( \'DEVICES_ERROR_INVALID\', \'Device "%s" is invalid.\' );\r\ndefine( \'DEVICES_PATTERN\', "^-?(?P<key>\\s*?\\w+)|(?:{(?P<items>(?:(?>[^{}]+)|(?R))*?)})|(?P<option>-\\w+)|(?P<value>\\S+)" );\r\ndefine( \'DEVICES_LOG\', \'DEVICES: %s inserted, %s updated, %s removed.\' );\r\n\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n	define( \'DEVICES_OMNIDOWNLOAD_LIST_DEVICES_CMD\', \'"%s\\omnidownload.exe" -list_devices -detail\' );\r\n	define( \'DEVICES_OMNIDOWNLOAD_DEVICE_CMD\', \'"%s\\omnidownload.exe" -device "%s"\' );\r\n	define( \'DEVICES_OMNIUPLOAD_DEVICE_CMD\', \'"%s\\omniupload.exe" -modify_device "%s"\' );\r\n} else {\r\n	define( \'DEVICES_OMNIDOWNLOAD_LIST_DEVICES_CMD\', \'"%s/omnidownload" -list_devices -detail\' );\r\n	define( \'DEVICES_OMNIDOWNLOAD_DEVICE_CMD\', \'"%s/omnidownload" -device "%s"\' );\r\n	define( \'DEVICES_OMNIUPLOAD_DEVICE_CMD\', \'"%s/omniupload" -modify_device "%s"\' );\r\n}\r\n\r\nclass mars_device {\r\n	var $application;\r\n	var $name;\r\n	var $definition;\r\n	var $parsed_definition;\r\n\r\n	function mars_device( $application, $name, $definition = \'\' ) {\r\n		$this->application = $application;\r\n		$this->name = $name;\r\n		$this->definition = $definition;\r\n		$this->parsed_definition = \'\';\r\n	}\r\n\r\n	function omnidownload() {\r\n		try {\r\n			$lines = $this->application->cache_command( \r\n				sprintf( DEVICES_OMNIDOWNLOAD_DEVICE_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->name ), \r\n				DEVICES_OMNIDOWNLOAD_TIMEOUT );\r\n			$this->definition = implode( PHP_EOL, $lines );\r\n			$this->parse( );\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( DEVICES_ERROR_READING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function omniupload() {\r\n		try {\r\n			$lines = $this->application->cache_command( \r\n				sprintf( DEVICES_OMNIUPLOAD_DEVICE_CMD, $this->application->config[ \'OMNI_BIN\' ], $this->name ), DEVICES_OMNIUPLOAD_TIMEOUT );\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( DEVICES_ERROR_WRITING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function read_database() {\r\n		try {\r\n			$this->definition = \'\';\r\n			$sql = "select definition from dataprotector_devices where cellserver=\'%cellserver\' and name=\'%name\' limit 1;";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'name\' => $this->name );\r\n			if ( $this->application->database->execute_query( $sql, $values ) == 0 ) {throw new exception( \r\n					sprintf( DEVICES_ERROR_NOT_IN_DB, $this->name ) );}\r\n			$this->definition = $this->application->database->rows[ 0 ][ \'definition\' ];\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( DEVICES_ERROR_READING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function write_database() {\r\n		$result = false;\r\n		try {\r\n			$device = $this->parse( );\r\n			$sql = "insert into dataprotector_devices (name,definition,disable,description,host,pool," .\r\n				 "library,blksize,lockname,devserial,updated_by,updated_on) " .\r\n				 "values(\'%name\',\'%definition\',nullif(\'%disable\',\'\'),nullif(\'%description\',\'\'),\'%host\',nullif(\'%pool\',\'\')," .\r\n				 "\'%library\',nullif(\'%blksize\',\'\'),\'%lockname\',\'%devserial\',\'%updated_by\',\'%updated_on\') on duplicate key " .\r\n				 "update definition=\'%definition\',disable=nullif(\'%disable\',\'\'),description=nullif(\'%description\',\'\'),host=\'%host\'," .\r\n				 "pool=nullif(\'%pool\',\'\'),library=\'%library\',blksize=nullif(\'%blksize\',\'\')," .\r\n				 "lockname=\'%lockname\',devserial=\'%devserial\',updated_on=\'%updated_on\',valid_until=null;";\r\n			$values = array( \r\n				\'name\' => substr( $this->name, 0, 32 ), \r\n				\'definition\' => $this->application->database->escape_string( $this->definition ), \r\n				\'disable\' => isset( $device[ \'DISABLE\' ] ) ? \'Y\' : \'\', \r\n				\'description\' => $this->application->database->escape_string( $device[ \'DESCRIPTION\' ] ), \r\n				\'host\' => $device[ \'HOST\' ], \r\n				\'pool\' => str_replace( \'"\', "", $device[ \'POOL\' ] ), \r\n				\'library\' => str_replace( \'"\', "", $device[ \'LIBRARY\' ] ), \r\n				\'blksize\' => isset( $device[ \'BLKSIZE\' ] ) ? $device[ \'BLKSIZE\' ] : \'\', \r\n				\'lockname\' => isset( $device[ \'LOCKNAME\' ] ) ? str_replace( \'"\', "", $device[ \'LOCKNAME\' ] ) : \'\', \r\n				\'devserial\' => str_replace( \'"\', "", $device[ \'DEVSERIAL\' ] ), \r\n				\'updated_by\' => $this->application->cellserver, \r\n				\'updated_on\' => $this->application->start_time );\r\n			$result = $this->application->database->execute_query( $sql, $values );\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( DEVICES_ERROR_WRITING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function parse() {\r\n		if ( is_array( $this->parsed_definition ) ) return $this->parsed_definition;\r\n		$result = array();\r\n		$match = array();\r\n		$tokens = preg_match_all( \'/\' . DEVICES_PATTERN . \'/m\', $this->definition, $match );\r\n		$i = 0;\r\n		$key = \'\';\r\n		$option = \'\';\r\n		$value = \'\';\r\n		while ( $i <= $tokens ) {\r\n			if ( $i == $tokens ) {\r\n				$action1 = \'key\';\r\n				$action2 = \'#\';\r\n			} else {\r\n				foreach ( array( \r\n					\'key\', \r\n					\'option\', \r\n					\'value\' ) as $j ) {\r\n					( $match[ $j ][ $i ] != \'\' ) && $action1 = $j;\r\n				}\r\n				$action2 = trim( $match[ $action1 ][ $i ] );\r\n			}\r\n			switch ( $action1 ) {\r\n				case \'key\':\r\n					if ( ( $key == $action2 ) or ( isset( $result[ $key . \'-S\' ] ) ) ) {\r\n						$result[ $key . \'-S\' ][ ] = $result[ $key ];\r\n						unset( $result[ $key ] );\r\n					}\r\n					$key = strtoupper( $action2 );\r\n					$option = \'\';\r\n					$value = \'\';\r\n					$key != \'#\' && $result[ $key ] = $value;\r\n					break;\r\n				case \'option\':\r\n					if ( $option == \'\' ) {\r\n						if ( $key != \'\' and !is_array( $result[ $key ] ) ) {\r\n							$result[ $key ] = ( $result[ $key ] == \'\' ? array() : array( \r\n								\'name\' => $result[ $key ] ) );\r\n						}\r\n					}\r\n					$option = substr( $action2, 1 );\r\n					$value = \'\';\r\n					if ( $key == \'\' ) {\r\n						$result[ $option ] = $value;\r\n					} else {\r\n						$result[ $key ][ $option ] = $value;\r\n					}\r\n					break;\r\n				case \'value\':\r\n					$value = trim( $value . \' \' . $action2 );\r\n					if ( $option == \'\' ) {\r\n						$result[ $key ] = $value;\r\n					} else {\r\n						if ( $key == \'\' ) {\r\n							$result[ $option ] = $value;\r\n						} else {\r\n							$result[ $key ][ $option ] = $value;\r\n						}\r\n					}\r\n					break;\r\n			}\r\n			$i++;\r\n		}\r\n		if ( !isset( $result[ \'NAME\' ] ) ) {throw new exception( sprintf( DEVICES_ERROR_INVALID, $this->name ) );}\r\n		$this->parsed_definition = $result;\r\n		return $this->parsed_definition;\r\n	}\r\n}\r\n\r\nfunction read_devices( $application, $action = true ) {\r\n	if ( $action ) {\r\n		$name = \'OMNIDOWNLOAD-DEVICES\';\r\n		$command = sprintf( DEVICES_OMNIDOWNLOAD_LIST_DEVICES_CMD, $application->config[ \'OMNI_BIN\' ] );\r\n		$file = $application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n		$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => \'DEVICES\' );\r\n		if ( !file_exists( $file ) ) {\r\n			$application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true );\r\n			return false;\r\n		}\r\n		$worker = $application->workers->decode( file_get_contents( $file ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file );\r\n	} else {\r\n		$lines = $application->cache_command( sprintf( DEVICES_OMNIDOWNLOAD_LIST_DEVICES_CMD, $application->config[ \'OMNI_BIN\' ] ), \r\n			DEVICES_OMNIDOWNLOAD_TIMEOUT );\r\n	}\r\n	$i = $u = 0;\r\n	array_push( $lines, \'\' );\r\n	$name = \'\';\r\n	$application->database->start_transaction();\r\n	foreach ( $lines as $line ) {\r\n		if ( preg_match( \'/^NAME/\', $line ) ) {\r\n			list ( $name ) = sscanf( $line, \'NAME %[^$]s\' );\r\n			$name = trim( str_replace( \'"\', \'\', $name ) );\r\n			$definition = array();\r\n		}\r\n		if ( preg_match( \'/^=/\', $line ) ) {\r\n			try {\r\n				$device = new mars_device( $application, $name, implode( PHP_EOL, $definition ) );\r\n				if ( $device->parse( ) ) {\r\n					$result = $device->write_database( );\r\n					( $result == 1 ) && $i++;\r\n					( $result == 2 ) && $u++;\r\n				}\r\n			}\r\n			catch ( exception $e ) {\r\n				$this->application->log_error( sprintf( DEVICES_ERROR_READING, $this->name, $e->getmessage( ) ) );\r\n			}\r\n			$name = \'\';\r\n			continue;\r\n		}\r\n		!empty( $name ) && $definition[ ] = $line;\r\n	}\r\n	$sql = "update dataprotector_devices set valid_until=updated_on " .\r\n		 "where id in (select id from (select id from dataprotector_devices where updated_by=\'%updated_by\' " .\r\n		 "and updated_on<\'%updated_on\' and valid_until is null) d order by id);";\r\n	$values = array( \r\n		\'updated_by\' => $application->cellserver, \r\n		\'updated_on\' => $application->start_time );\r\n	$d = $application->database->execute_query( $sql, $values );\r\n	$application->database->commit();\r\n	$application->log_action( sprintf( DEVICES_LOG, $i, $u, $d ) );\r\n	return true;\r\n}\r\n', '2013-01-01 00:00:00', '2016-08-09 09:14:49', NULL),
	(13, 'inc/media.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 POOLS AND MEDIA PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'MEDIA_OMNIMM_TIMEOUT\', 30 );\r\ndefine( \'MEDIA_ERROR_UNKNOWN_OMNIMM_LIST_POOLS_ITEM\', \'Error: Unknown "omnimm list_pools" item "%s=%s".\' );\r\ndefine( \'MEDIA_POOLS_LOG\', \'POOLS: %s inserted, %s updated, %s removed.\' );\r\ndefine( \'MEDIA_ERROR_UNKNOWN_OMNIMM_LIST_POOL_ITEM\', \'Error: Unknown "omnimm list_pool %s" item "%s=%s".\' );\r\ndefine( \'MEDIA_ERROR_READING\', \'Error reading media for pool "%s": %s\' );\r\ndefine( \'MEDIA_LOG\', \'MEDIA: %s inserted, %s updated, %s removed.\' );\r\n\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n	define( \'MEDIA_OMNIMM_LIST_POOLS_CMD\', \'"%s\\omnimm.exe" -list_pools -detail\' );\r\n	define( \'MEDIA_OMNIMM_LIST_POOL_CMD\', \'"%s\\omnimm.exe" -list_pool "%s" -detail\' );\r\n} else {\r\n	define( \'MEDIA_OMNIMM_LIST_POOLS_CMD\', \'"%s/omnimm" -list_pools -detail\' );\r\n	define( \'MEDIA_OMNIMM_LIST_POOL_CMD\', \'"%s/omnimm" -list_pool "%s" -detail\' );\r\n}\r\n	\r\nfunction read_media( $application, $action = true ) {\r\n	if ( $action ) {\r\n		$name = \'OMNIMM-POOLS\';\r\n		$file = $application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n		if ( !file_exists( $file ) ) {\r\n			$command = sprintf( MEDIA_OMNIMM_LIST_POOLS_CMD, $application->config[ \'OMNI_BIN\' ] );\r\n			$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => \'MEDIA\' );\r\n			$application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true );\r\n			return false;\r\n		}\r\n		$worker = $application->workers->decode( file_get_contents( $file ) );\r\n		$lines = $worker->output;\r\n		unset( $worker );\r\n		unlink( $file );\r\n	} else {\r\n		$lines = $application->cache_command( sprintf( MEDIA_OMNIMM_LIST_POOLS_CMD, $application->config[ \'OMNI_BIN\' ] ), MEDIA_OMNIMM_TIMEOUT );\r\n	}\r\n	$application->database->start_transaction();\r\n	array_push( $lines, \'\' );\r\n	$i = $u = 0;\r\n	foreach ( $lines as $line ) {\r\n		$key = strtoupper( trim( substr( $line, 0, strpos( $line, \':\' ) ) ) );\r\n		$value = trim( substr( strstr( $line, \':\' ), 1 ) );\r\n		switch ( $key ) {\r\n			case \'POOL NAME\':\r\n				$name = $value;\r\n				unset( $description );\r\n				break;\r\n			case \'POOL DESCRIPTION\':\r\n				$description = $value;\r\n				break;\r\n			case \'MEDIA TYPE\':\r\n				$type = $value;\r\n				break;\r\n			case \'POLICY\':\r\n				$policy = $value;\r\n				break;\r\n			case \'BLOCKS USED [MB]\':\r\n				$mbused = $value;\r\n				break;\r\n			case \'BLOCKS TOTAL [MB]\':\r\n				$mbtotal = $value;\r\n				break;\r\n			case \'ALTOGETHER MEDIA\':\r\n				$media = $value;\r\n				break;\r\n			case \'POOR MEDIA\':\r\n				$poor = $value;\r\n				break;\r\n			case \'FAIR MEDIA\':\r\n				$fair = $value;\r\n				break;\r\n			case \'MEDIUM AGE LIMIT\':\r\n				$agelimit = $value;\r\n				break;\r\n			case \'MAXIMUM OVERWRITES\':\r\n				$maxoverwrites = $value;\r\n				break;\r\n			case \'MAGAZINE SUPPORT\':\r\n				$magazinesupport = $value;\r\n				break;\r\n			case \'FREE POOL SUPPORT\':\r\n				$freepoolsupport = $value;\r\n				break;\r\n			case \'\':\r\n				$sql = \'\';\r\n				if ( isset( $name ) and isset( $description ) ) {\r\n					$sql = "insert into dataprotector_pools (name,description,type,policy,mbused,mbtotal," .\r\n						 "media,poor,fair,agelimit,maxoverwrites,magazinesupport,freepoolsupport,updated_by,updated_on) " .\r\n						 "values (\'%name\',\'%description\',\'%type\',\'%policy\',%mbused,%mbtotal," .\r\n						 "%media,%poor,%fair,\'%agelimit\',%maxoverwrites,\'%magazinesupport\',\'%freepoolsupport\',\'%updated_by\',\'%updated_on\') " .\r\n						 "on duplicate key update name=\'%name\',description=\'%description\',type=\'%type\',policy=\'%policy\'," .\r\n						 "mbused=%mbused,mbtotal=%mbtotal,media=%media,poor=%poor,fair=%fair,agelimit=\'%agelimit\',maxoverwrites=%maxoverwrites," .\r\n						 "magazinesupport=\'%magazinesupport\',freepoolsupport=\'%freepoolsupport\',updated_on=\'%updated_on\',valid_until=null;";\r\n					$values = array( \r\n						\'name\' => substr( $name, 0, 32 ), \r\n						\'description\' => $application->database->escape_string( $description ), \r\n						\'type\' => $type, \r\n						\'policy\' => $policy, \r\n						\'mbused\' => $mbused, \r\n						\'mbtotal\' => $mbtotal, \r\n						\'media\' => $media, \r\n						\'poor\' => $poor, \r\n						\'fair\' => $fair, \r\n						\'agelimit\' => $agelimit, \r\n						\'maxoverwrites\' => $maxoverwrites, \r\n						\'magazinesupport\' => $magazinesupport, \r\n						\'freepoolsupport\' => $freepoolsupport, \r\n						\'updated_by\' => $application->cellserver, \r\n						\'updated_on\' => $application->start_time );\r\n					unset( $mediumid );\r\n				}\r\n				if ( $sql == \'\' ) break;\r\n				$result = $application->database->execute_query( $sql, $values );\r\n				( $result == 1 ) && $i++;\r\n				( $result == 2 ) && $u++;\r\n				if ( $action ) {\r\n					$pool = $name;\r\n					$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'OMNIMM-POOL-%s\', $pool ) );\r\n					$file = $application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n					$command = sprintf( MEDIA_OMNIMM_LIST_POOL_CMD, $application->config[ \'OMNI_BIN\' ], $pool );\r\n					$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => \'POOLS\' );\r\n					$application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true );\r\n					$name = $pool;\r\n				}\r\n				break;\r\n			default:\r\n				$application->log_error( sprintf( MEDIA_ERROR_UNKNOWN_OMNIMM_LIST_POOLS_ITEM, $key, $value ) );\r\n		}\r\n	}\r\n	$sql = "update dataprotector_pools set valid_until=updated_on where id in (select id from (" .\r\n		 "select id from dataprotector_pools where updated_by=\'%updated_by\' and updated_on<\'%updated_on\' " .\r\n		 "and valid_until is null) d order by id);";\r\n	$values = array( \r\n		\'updated_by\' => $application->cellserver, \r\n		\'updated_on\' => $application->start_time );\r\n	$d = $application->database->execute_query( $sql, $values );\r\n	$message = sprintf( MEDIA_POOLS_LOG, $i, $u, $d );\r\n	$application->log_action( $message );\r\n	if ( $action ) {\r\n		queue_action( $application, \'ROUTINE\', \'POOLS\' );\r\n	} else {\r\n		read_pools( $application, $action );\r\n	}\r\n	$application->database->commit();\r\n	return true;\r\n}\r\n	\r\nfunction read_pools( $application, $action = true ) {\r\n	$sql = "select distinct name from dataprotector_pools where valid_until is null order by name;";\r\n	$application->database->execute_query( $sql );\r\n	$pools = $application->database->rows;\r\n	if ( $action ) {\r\n		foreach ( $pools as $pool ) {\r\n			$pool = $pool[ \'name\' ];\r\n			$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'OMNIMM-POOL-%s\', $pool ) );\r\n			$file = $application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n			if ( !file_exists( $file ) ) {\r\n				$result = false;\r\n				$command = sprintf( MEDIA_OMNIMM_LIST_POOL_CMD, $application->config[ \'OMNI_BIN\' ], $pool );\r\n				$items = array( \'NAME\' => \'ROUTINE\', \'DATA\' => \'POOLS\' );\r\n				$application->workers->add( array( \'CMD\' => $command, \'NAME\' => $name, \'ITEMS\' => $items ), true );\r\n				return false;\r\n			}\r\n		}\r\n	}\r\n	$application->database->start_transaction();\r\n	$i = $u = 0;\r\n	foreach ( $pools as $pool ) {\r\n		try {\r\n			$pool = $pool[ \'name\' ];\r\n			if ( $action ) {\r\n				$name = preg_replace(\'/[^a-zA-Z0-9-_\\.]/\',\'\', sprintf( \'OMNIMM-POOL-%s\', $pool ) );\r\n				$file = $application->root . DIRECTORY_SEPARATOR . \'tmp\'.  DIRECTORY_SEPARATOR . $name . \'.tmp\';\r\n				$worker = $application->workers->decode( file_get_contents( $file ) );\r\n				$lines = $worker->output;\r\n				unset( $worker );\r\n				unlink( $file );\r\n			} else {\r\n				$lines = $application->cache_command( \r\n					sprintf( MEDIA_OMNIMM_LIST_POOL_CMD, $application->config[ \'OMNI_BIN\' ], $pool ), MEDIA_OMNIMM_TIMEOUT );\r\n			}\r\n			array_push( $lines, \'\' );\r\n			foreach ( $lines as $line ) {\r\n				$key = strtoupper( trim( substr( $line, 0, strpos( $line, \':\' ) ) ) );\r\n				$value = trim( substr( strstr( $line, \':\' ), 1 ) );\r\n				switch ( $key ) {\r\n					case \'MEDIUM IDENTIFIER\':\r\n						$mediumid = $value;\r\n						unset( $label );\r\n						break;\r\n					case \'MEDIUM LABEL\':\r\n						$label = $value;\r\n						break;\r\n					case \'LOCATION\':\r\n						$location = $value;\r\n						break;\r\n					case \'MEDIUM OWNER\':\r\n						$owner = $value;\r\n						break;\r\n					case \'STATUS\':\r\n						$status = $value;\r\n						break;\r\n					case \'BLOCKS USED  [KB]\':\r\n						$kbused = $value;\r\n						break;\r\n					case \'BLOCKS TOTAL [KB]\':\r\n						$kbtotal = $value;\r\n						break;\r\n					case \'USABLE SPACE [KB]\':\r\n						$kbusable = $value;\r\n						break;\r\n					case \'NUMBER OF WRITES\':\r\n						$writes = $value;\r\n						break;\r\n					case \'NUMBER OF OVERWRITES\':\r\n						$overwrites = $value;\r\n						break;\r\n					case \'NUMBER OF ERRORS\':\r\n						$errors = $value;\r\n						break;\r\n					case \'MEDIUM INITIALIZED\':\r\n						$initialized = $value;\r\n						break;\r\n					case \'LAST WRITE\':\r\n						$lastwrite = $value;\r\n						break;\r\n					case \'LAST ACCESS\':\r\n						$lastaccess = $value;\r\n						break;\r\n					case \'LAST OVERWRITE\':\r\n						$lastoverwrite = $value;\r\n						break;\r\n					case \'PROTECTED\':\r\n						$protected = $value;\r\n						break;\r\n					case \'WRITE-PROTECTED\':\r\n						$wp = $value;\r\n						break;\r\n					case \'\':\r\n						$sql = \'\';\r\n						if ( isset( $mediumid ) and isset( $label ) ) {\r\n							$sql = "insert into dataprotector_media (pool,mediumid,label,location,owner,status,kbused,kbtotal,kbusable," .\r\n								 "writes,overwrites,errors,initialized,lastwrite,lastaccess,lastoverwrite," .\r\n								 "protected,wp,updated_by,updated_on) values (\'%pool\',\'%mediumid\',\'%label\',\'%location\',\'%owner\'," .\r\n								 "\'%status\',%kbused,%kbtotal,%kbusable,%writes,%overwrites,%errors," .\r\n								 "\'%initialized\',nullif(\'%lastwrite\',\'\'),nullif(\'%lastaccess\',\'\')," .\r\n								 "nullif(\'%lastoverwrite\',\'\'),nullif(\'%protected\',\'\'),\'%wp\',\'%updated_by\',\'%updated_on\') " .\r\n								 "on duplicate key update pool=\'%pool\',label=\'%label\',location=\'%location\'," .\r\n								 "owner=\'%owner\',status=\'%status\',kbused=%kbused,kbtotal=%kbtotal," .\r\n								 "kbusable=%kbusable,writes=%writes,overwrites=%overwrites,errors=%errors," .\r\n								 "initialized=\'%initialized\',lastwrite=nullif(\'%lastwrite\',\'\')," .\r\n								 "lastaccess=nullif(\'%lastaccess\',\'\'),lastoverwrite=nullif(\'%lastoverwrite\',\'\')," .\r\n								 "protected=nullif(\'%protected\',\'\'),wp=\'%wp\',updated_on=\'%updated_on\',valid_until=null;";\r\n							$values = array( \r\n								\'pool\' => substr( $pool, 0, 32 ), \r\n								\'mediumid\' => $mediumid, \r\n								\'label\' => $label, \r\n								\'location\' => $location, \r\n								\'owner\' => $owner, \r\n								\'status\' => $status, \r\n								\'kbused\' => $kbused, \r\n								\'kbtotal\' => $kbtotal, \r\n								\'kbusable\' => $kbusable, \r\n								\'writes\' => $writes, \r\n								\'overwrites\' => $overwrites, \r\n								\'errors\' => $errors, \r\n								\'initialized\' => $application->parse_date( $initialized ), \r\n								\'lastwrite\' => $application->parse_date( $lastwrite ), \r\n								\'lastaccess\' => $application->parse_date( $lastaccess ), \r\n								\'lastoverwrite\' => $application->parse_date( $lastoverwrite ), \r\n								\'protected\' => $application->parse_date( $protected ), \r\n								\'wp\' => $wp, \r\n								\'updated_by\' => $application->cellserver, \r\n								\'updated_on\' => $application->start_time );\r\n							unset( $mediumid );\r\n						}\r\n						if ( $sql == \'\' ) break;\r\n						$result = $application->database->execute_query( $sql, $values );\r\n						( $result == 1 ) && $i++;\r\n						( $result == 2 ) && $u++;\r\n						break;\r\n					default:\r\n						$application->log_error( sprintf( MEDIA_ERROR_UNKNOWN_OMNIMM_LIST_POOL_ITEM, $pool, $key, $value ) );\r\n				}\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$application->log_error( sprintf( MEDIA_ERROR_READING, $pool, $e->getmessage( ) ) );\r\n		}\r\n	}\r\n	$sql = "update dataprotector_media set valid_until=updated_on where id in (select id from (" .\r\n		 "select id from dataprotector_media where updated_by=\'%updated_by\' and updated_on<\'%updated_on\' " .\r\n		 "and valid_until is null) d order by id);";\r\n	$values = array( \r\n		\'updated_by\' => $application->cellserver, \r\n		\'updated_on\' => $application->start_time );\r\n	$d = $application->database->execute_query( $sql, $values );\r\n	$sql = "update dataprotector_pools p left join( " .\r\n		 "select updated_by,pool,round(sum(kbused)/1024,1) as mbused,round(sum(kbtotal)/1024,1) as mbtotal " .\r\n		 "from dataprotector_media where valid_until is null group by updated_by,pool) m on (m.updated_by=p.updated_by and m.pool=p.name) " .\r\n		 "set p.mbused=ifnull(m.mbused,0),p.mbtotal=ifnull(m.mbtotal,0) where p.valid_until is null;";\r\n	$application->database->execute_query( $sql, $values );\r\n	$application->database->commit();\r\n	$message = sprintf( MEDIA_LOG, $i, $u, $d );\r\n	$application->log_action( $message );\r\n	return true;\r\n}', '2013-01-01 00:00:00', '2016-12-01 15:19:23', NULL),
	(14, 'inc/events.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 EVENTS PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n	define( \'EVENTS_PROCESSES_CMD\', \'wmic process get Name,Caption,ProcessId,ParentProcessId,CommandLine /value\' );\r\n	define( \'EVENTS_PROCESSES_ERROR\', \'Error executing WMIC.\' );\r\n	define( \'EVENTS_PROCESSES_PPID\', \'ParentProcessId\' );\r\n	define( \'EVENTS_PROCESSES_CMDLINE\', \'CommandLine\' );\r\n	define( \'EVENTS_PROCESSES_PATTERN\', \'Caption=(?P<Caption>.+)\\s+CommandLine=(?P<CommandLine>.*)\\s+Name=(?P<Name>.+)\' .\r\n		\'\\s+ParentProcessId=(?P<ParentProcessId>.+)\\s+ProcessId=(?P<ProcessId>%s)\\s+\' );\r\n} else {\r\n	define( \'EVENTS_PROCESSES_CMD\', \'ps -ef\' );\r\n	define( \'EVENTS_PROCESSES_ERROR\', \'Error executing PS -ef.\' );\r\n	define( \'EVENTS_PROCESSES_PPID\', \'PPID\' );\r\n	define( \'EVENTS_PROCESSES_CMDLINE\', \'CMD\' );\r\n	define( \'EVENTS_PROCESSES_PATTERN\',\'(?P<UID>\\S+)\\s+(?P<PID>%s)\\s+(?P<PPID>\\d+)\\s+(?P<C>\\d+)\\s+(?P<STIME>\\S+)\' . \r\n	\'\\s+(?P<TTY>\\S+)\\s+(?P<TIME>\\S+)\\s+(?P<CMD>.+)\' );\r\n}\r\ndefine( \'EVENTS_OMNIRPT_PROCESS_PATTERN\', \'-oneliner\\s(?P<value>\\w+)\\s\' );\r\ndefine( \'EVENTS_OMNITRIG_PROCESS_PATTERN\', \'-event\\s(?P<value>\\w+)\\s\' );\r\ndefine( \'EVENTS_OMNITRIG_PROCESS_ERROR\', \'Error retrieving parent OMNITRIG process.\' );\r\ndefine( \'EVENTS_VARIABLES\', \'BACKUPGROUP,BACKUPTYPE,DATALIST,EVENTOBJECT,MODE,NODE,NUMBACKUPERRORS,\' .\r\n	\'OWNER,PREVIEW,RESTARTED,RESTART_COUNT,SESSIONID,SESSIONKEY,SESSIONLIST,SESSIONSTATUS,SESSIONSTATUSNUM,\' .\r\n	\'SESSIONSUBTYPE,SESSIONTYPE,SEVERITY,MEDIAPOOL,NUMFREEMEDIA,DEVICENAME,DEVICESLOT,MEDIUMID,\' .\r\n	\'LICCATEGORY,LICQUANTITY,TBLSPACENAME,TBLSPACEOCCUPIED,OB2_DEVICE_ERROR_COUNT,ALARMMSG,\' .\r\n	\'COMMANDERCODE,COMMANDERMSG,NUMEVENTS\' );\r\ndefine( \'EVENTS_EVENT_ERROR\', \'Blank/invalid event name.\' );\r\ndefine( \'EVENTS_NOTIFICATION\', \'NOTIFICATION\' );\r\ndefine( \'EVENTS_NOTIFICATION_QUEUED\', \'Notification "%s" was queued.\' );	\r\ndefine( \'EVENTS_NOTIFICATION_ERROR\', \'Error "%s" queuing notification "%s".\' );\r\ndefine( \'EVENTS_QUEUE\', \'%s/queue/%s.txt\' );\r\ndefine( \'EVENTS_TMP\', \'%s/tmp/%s.tmp\' );\r\n\r\nclass mars_event {\r\n	var $application;\r\n	var $php_pid = 0;\r\n	var $cmd_pid = 0;\r\n	var $omnirpt_pid = 0;\r\n	var $omnitrig_pid = 0;\r\n	var $name = \'\';\r\n	var $contents = \'\';\r\n	var $processes = \'\';\r\n	var $variables = \'\';\r\n	var $timestamp;\r\n	\r\n	function mars_event( $application ) {\r\n		$this->application = $application;\r\n		$this->timestamp = sprintf( \'%s-%s\', date( \'Ymd-His\' ), round( fmod( microtime( true ), 1 ) * pow( 10, 4 ) ) );\r\n		foreach ( $_SERVER as $key=>$value ) {\r\n			$this->variables .= sprintf( \'%s=%s\', $key, $value ) . PHP_EOL;\r\n		}\r\n		$this->contents = sprintf( \'TIMESTAMP=%s\', $this->timestamp ) . PHP_EOL;\r\n		$this->php_pid = getmypid();\r\n	}\r\n\r\n	function execute() {\r\n		$result = false;\r\n		try {\r\n			$this->application->append_file( sprintf( EVENTS_TMP, $this->application->root, $this->timestamp ), $this->contents, false );\r\n			$this->application->append_file( sprintf( EVENTS_TMP, $this->application->root, $this->timestamp ), $this->variables, false );\r\n			$lines = $this->application->cache_command( EVENTS_PROCESSES_CMD );\r\n			if ( !$lines ) throw new exception( sprintf( EVENTS_PROCESSES_ERROR ) );\r\n			$this->processes = implode( PHP_EOL, $lines );\r\n			$this->application->append_file( sprintf( EVENTS_TMP, $this->application->root, $this->timestamp ), $this->processes, false );\r\n			$process = $this->get_process( $this->php_pid );\r\n			$process && $this->cmd_pid = $process[ EVENTS_PROCESSES_PPID ]; \r\n			$process = $this->get_process( $this->cmd_pid );\r\n			$process && $this->omnirpt_pid = $process[ EVENTS_PROCESSES_PPID ];\r\n			$process = $this->get_process( $this->omnirpt_pid );\r\n			preg_match( sprintf( \'/%s/i\', EVENTS_OMNIRPT_PROCESS_PATTERN ), $process[ EVENTS_PROCESSES_CMDLINE ], $match );\r\n			!empty( $match[ \'value\' ] ) && $this->name = $match[ \'value\' ];\r\n			$process && $this->omnitrig_pid = $process[ EVENTS_PROCESSES_PPID ];\r\n			$process = $this->get_process( $this->omnitrig_pid );\r\n			if ( !$process ) \r\n				throw new exception( EVENTS_OMNITRIG_PROCESS_ERROR );\r\n			preg_match( sprintf( \'/%s/i\', EVENTS_OMNITRIG_PROCESS_PATTERN ), $process[ EVENTS_PROCESSES_CMDLINE ], $match );\r\n			!empty( $match[ \'value\' ] ) && $this->name = $match[ \'value\' ];\r\n			if ( empty( $this->name ) ) \r\n				throw new exception( EVENTS_EVENT_ERROR );\r\n			$arr = array_intersect_key( $_SERVER, array_flip( explode( \',\', EVENTS_VARIABLES ) ) );\r\n			$this->contents .= sprintf( \'%s=%s\', EVENTS_NOTIFICATION, $this->name ) . PHP_EOL;\r\n			foreach ( $arr as $key=>$value ) {\r\n				$this->contents .= sprintf( \'%s=%s\', $key, $value ) . PHP_EOL;\r\n			}\r\n			$this->application->append_file( sprintf( EVENTS_QUEUE, $this->application->root, \r\n				sprintf( \'%s-%s\', $this->timestamp, $this->name ) ), $this->contents, false );\r\n			unlink( sprintf( EVENTS_TMP, $this->application->root, $this->timestamp ) );\r\n			$this->application->log_action( sprintf( EVENTS_NOTIFICATION_QUEUED, $this->name ) );\r\n			$result = true;\r\n		} catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( EVENTS_NOTIFICATION_ERROR, $e->getMessage(), $this->timestamp ) );\r\n		}\r\n		return $result;\r\n	}\r\n	\r\n	function get_process( $pid ) {\r\n		$match = false;\r\n		preg_match( sprintf( \'/%s/m\', sprintf( EVENTS_PROCESSES_PATTERN, $pid ) ), $this->processes, $match );\r\n		return $match;\r\n	}\r\n}\r\n', '2013-01-01 00:00:00', '2015-08-20 15:29:54', NULL),
	(15, 'inc/copylists.php', '<?php\r\n\r\n/*\r\n * MARS 3.0 COPYLISTS PHP CODE\r\n * build 3.0.0.0 @ 2014-03-25 10:00\r\n * * rewritten from scratch\r\n */\r\ndefine( \'COPYLISTS_COPYLIST_PATTERN\', \r\n	"(?P<comment>^#.*?\\n)|(?P<key>^\\s*?[A-Z]+)|(?:{(?P<items>(?:(?>[^{}]+)|(?R))*?)})|(?P<option>-\\w+)|(?P<value>\\S+)" );\r\ndefine( \'COPYLISTS_SCHEDULE_PATTERN\', "(?P<option>\\"?-\\w+)|(?P<value>\\S+)" );\r\ndefine( \'COPYLISTS_SAMEASDL_STRING\', \'Same as datalist\' );\r\ndefine( \'COPYLISTS_TYPE\', serialize( array( \r\n	\'OPTIONS\' ) ) );\r\ndefine( \'COPYLISTS_COPYLISTS\', \'copylists/scheduled\' );\r\ndefine( \'COPYLISTS_SCHEDULES\', \'copylists/scheduled/schedules\' );\r\ndefine( \'COPYLISTS_ERROR\', \'Error in copy list "%s": %s\' );\r\ndefine( \'COPYLISTS_ERROR_NOT_EXISTS\', \'Missing copy list for schedule file "%s".\' );\r\ndefine( \'COPYLISTS_ERROR_INVALID\', \'Copy list "%s" is not valid.\' );\r\ndefine( \'COPYLISTS_ERROR_MISSING_SCHEDULE\', \'Schedule file "%s" does not exist.\' );\r\ndefine( \'COPYLISTS_ERROR_READING\', \'Error reading "%s": %s\' );\r\ndefine( \'COPYLISTS_ERROR_WRITE_COPYLIST\', \'Cannot write to copy list file "%s".\' );\r\ndefine( \'COPYLISTS_ERROR_WRITE_SCHEDULE\', \'Cannot write to schedule file "%s".\' );\r\ndefine( \'COPYLISTS_ERROR_WRITING\', \'Error writing "%s": %s\' );\r\ndefine( \'COPYLISTS_LOG\', \'COPYLISTS: %s inserted, %s updated, %s removed.\' );\r\n\r\nif ( strtoupper( substr(PHP_OS, 0, 3) ) === \'WIN\' ) {\r\n} else {\r\n}\r\n\r\nclass mars_copylist {\r\n	var $application;\r\n	var $name;\r\n	var $copylist_file;\r\n	var $schedule_file;\r\n	var $copylist_modified;\r\n	var $schedule_modified;\r\n	var $copylist;\r\n	var $parsed_copylist;\r\n	var $schedule;\r\n	var $parsed_schedule;\r\n	var $devices;\r\n	var $datalists;\r\n	var $protection;\r\n	var $periodicity;\r\n	var $nextexecution;\r\n\r\n	function mars_copylist( $application, $name, $copylist = \'\', $schedule = \'\' ) {\r\n		$this->application = $application;\r\n		$this->name = $name;\r\n		$this->copylist_file = \'\';\r\n		$this->schedule_file = \'\';\r\n		$this->copylist_modified = \'\';\r\n		$this->schedule_modified = \'\';\r\n		$this->copylist = $copylist;\r\n		$this->schedule = $schedule;\r\n		$this->parsed_copylist = \'\';\r\n		$this->parsed_schedule = \'\';\r\n		$this->devices = array();\r\n		$this->datalists = array();\r\n		$this->dl_group = \'\';\r\n		$this->protection = COPYLISTS_SAMEASDL_STRING;\r\n		$this->periodicity = -1;\r\n		$this->nextexecution = array();\r\n	}\r\n\r\n	function read_file() {\r\n		try {\r\n			$this->copylist_file = $this->application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR \r\n				. COPYLISTS_COPYLISTS . DIRECTORY_SEPARATOR . $this->name;\r\n			$this->copylist_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->copylist_file );\r\n			$this->schedule_file = $this->application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR \r\n				. COPYLISTS_SCHEDULES . DIRECTORY_SEPARATOR . $this->name;\r\n			$this->schedule_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->schedule_file );\r\n			if ( !file_exists( $this->copylist_file ) ) {throw new exception( \r\n					sprintf( COPYLISTS_ERROR_NOT_EXISTS, $this->schedule_file ) );}\r\n			$this->copylist_modified = date( $this->application->config[ \'TIME_FORMAT\' ], filemtime( $this->copylist_file ) );\r\n			$this->copylist = $this->application->read_file( $this->copylist_file );\r\n			if ( !in_array( trim( substr( $this->copylist, 0, 8 ) ), unserialize( COPYLISTS_TYPE ) ) ) {throw new exception( \r\n				sprintf( COPYLISTS_ERROR_INVALID, $this->copylist_file ) );}\r\n			$this->parse_copylist( );\r\n			if ( file_exists( $this->schedule_file ) ) {\r\n				$this->schedule_modified = date( $this->application->config[ \'TIME_FORMAT\' ], filemtime( $this->schedule_file ) );\r\n				$this->schedule = $this->application->read_file( $this->schedule_file );\r\n				$this->parse_schedule( );\r\n				$this->periodicity = -1;\r\n				$this->nextexecution = $this->get_nextexecution( );\r\n				if ( $this->nextexecution ) {\r\n					$nextexecution = $this->get_nextexecution( sprintf( "%s +1 day", $this->nextexecution[ 0 ][ \'date\' ] ) );\r\n					$this->periodicity = \r\n						( strtotime( $nextexecution[ 0 ][ \'date\' ] ) - strtotime( $this->nextexecution[ 0 ][ \'date\' ] ) ) / ( 24 * 60 * 60 );\r\n				}\r\n			} else {\r\n				throw new exception( sprintf( COPYLISTS_ERROR_MISSING_SCHEDULE, $this->schedule_file ) );\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( COPYLISTS_ERROR, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function write_file() {\r\n		try {\r\n			$this->copylist_file = $this->application->config[ \'OMNI_SERVER\' ] \r\n				. DIRECTORY_SEPARATOR . COPYLISTS_COPYLISTS . DIRECTORY_SEPARATOR . $this->name;\r\n			$this->copylist_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->copylist_file );\r\n			$this->schedule_file = $this->application->config[ \'OMNI_SERVER\' ] \r\n				. DIRECTORY_SEPARATOR . COPYLISTS_SCHEDULES . DIRECTORY_SEPARATOR . $this->name;\r\n			$this->schedule_file = str_replace( DIRECTORY_SEPARATOR . DIRECTORY_SEPARATOR, DIRECTORY_SEPARATOR, $this->schedule_file );\r\n			if ( !file_put_contents( $this->copylist_file, $this->copylist ) ) {throw new exception( \r\n					sprintf( COPYLISTS_ERROR_WRITE_COPYLIST, $this->copylist_file ) );}\r\n			if ( !file_put_contents( $this->schedule_file, $this->schedule ) ) {throw new exception( \r\n					sprintf( COPYLIST_ERROR_WRITE_SCHEDULE, $this->schedule_file ) );}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( COPYLISTS_ERROR_WRITING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function read_database() {\r\n		try {\r\n			$this->copylist_file = \'\';\r\n			$this->schedule_file = \'\';\r\n			$this->copylist_modified = \'\';\r\n			$this->schedule_modified = \'\';\r\n			$sql = "select * from dataprotector_copylists where cellserver=\'%cellserver\' and name=\'%name\' limit 1;";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'name\' => $this->name );\r\n			if ( $this->application->database->execute_query( $sql, $values ) == 0 ) {throw new exception( \r\n					sprintf( COPYLISTS_ERROR_NOT_IN_DB, $this->name ) );}\r\n			$this->copylist = $this->application->database->rows[ 0 ][ \'copylist\' ];\r\n			$this->schedule = $this->application->database->rows[ 0 ][ \'schedule\' ];\r\n			$this->parse_copylist( );\r\n			$this->periodicity = -1;\r\n			$this->nextexecution = $this->get_nextexecution( );\r\n			if ( $this->nextexecution ) {\r\n				$nextexecution = $this->get_nextexecution( sprintf( "%s +1 day", $this->nextexecution[ 0 ][ \'date\' ] ) );\r\n				$this->periodicity = ( strtotime( $nextexecution[ 0 ][ \'date\' ] ) - strtotime( $this->nextexecution[ 0 ][ \'date\' ] ) ) /\r\n					 ( 24 * 60 * 60 );\r\n			}\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( COPYLISTS_ERROR_READING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return true;\r\n	}\r\n\r\n	function write_database() {\r\n		$result = false;\r\n		try {\r\n			$sql = "select name from config_customers where \'%name\' regexp specification and valid_until is null limit 1;";\r\n			$values = array(\r\n					\'name\' => $this->name );\r\n			if ( $this->application->database->execute_query( $sql, $values ) == 1 ) {\r\n				$customer = $this->application->database->rows[ 0 ][ \'name\' ];\r\n			} else {\r\n				$customer = \'\';\r\n			}\r\n			$nextexecution = \'\';\r\n			if ( $this->nextexecution ) {\r\n				$nextexecution = date( $this->application->config[ \'TIME_FORMAT\' ], \r\n					strtotime( sprintf( \'%s %s\', $this->nextexecution[ 0 ][ \'date\' ], $this->nextexecution[ 0 ][ \'time\' ] ) ) );\r\n			}\r\n			$sql = "insert into dataprotector_copylists " .\r\n				 "(cellserver,name,customer,copylist_modified,copylist," .\r\n				 "schedule_modified,schedule,devices,datalists,dl_group,nextexecution,periodicity,protection) " .\r\n				 "values(\'%cellserver\',\'%name\',nullif(\'%customer\',\'\'),nullif(\'%copylist_modified\',\'\'),\'%copylist\'," .\r\n				 "nullif(\'%schedule_modified\',\'\'),nullif(\'%schedule\',\'\'),\'%devices\',\'%datalists\',\'%dl_group\'," .\r\n				 "nullif(\'%nextexecution\',\'\'),\'%periodicity\',\'%protection\') " .\r\n				 "on duplicate key update customer=nullif(\'%customer\',\'\'),copylist_modified=nullif(\'%copylist_modified\',\'\')," . \r\n				 "copylist=\'%copylist\',schedule_modified=nullif(\'%schedule_modified\',\'\'),schedule=nullif(\'%schedule\',\'\'), " .\r\n				 "devices=\'%devices\',datalists=\'%datalists\',dl_group=\'%dl_group\',nextexecution=nullif(\'%nextexecution\',\'\')," .\r\n				 "periodicity=\'%periodicity\',protection=\'%protection\',updated_on=\'%updated_on\',valid_until=null;";\r\n			$values = array( \r\n				\'cellserver\' => $this->application->cellserver, \r\n				\'name\' => $this->name, \r\n				\'customer\' => $customer,\r\n				\'copylist_modified\' => $this->copylist_modified, \r\n				\'copylist\' => $this->application->database->escape_string( $this->copylist ), \r\n				\'schedule_modified\' => $this->schedule_modified, \r\n				\'schedule\' => $this->application->database->escape_string( $this->schedule ), \r\n				\'devices\' => implode( PHP_EOL, $this->devices ), \r\n				\'datalists\' => implode( PHP_EOL, $this->datalists ),\r\n				\'dl_group\' => implode ( PHP_EOL, $this->dl_group ),\r\n				\'nextexecution\' => $nextexecution, \r\n				\'periodicity\' => $this->periodicity, \r\n				\'protection\' => $this->protection, \r\n				\'updated_on\' => $this->application->start_time );\r\n			$result = $this->application->database->execute_query( $sql, $values );\r\n		}\r\n		catch ( exception $e ) {\r\n			$this->application->log_error( sprintf( COPYLISTS_ERROR_WRITING, $this->name, $e->getmessage( ) ) );\r\n			return false;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function parse( $text ) {\r\n		$result = array();\r\n		$match = array();\r\n		$tokens = preg_match_all( \'/\' . COPYLISTS_COPYLIST_PATTERN . \'/m\', $text, $match );\r\n		$i = 0;\r\n		$key = \'\';\r\n		$option = \'\';\r\n		$value = \'\';\r\n		while ( $i <= $tokens ) {\r\n			if ( $i == $tokens ) {\r\n				$action1 = \'key\';\r\n				$action2 = \'#\';\r\n			} else {\r\n				foreach ( array( \r\n					\'comment\', \r\n					\'key\', \r\n					\'option\', \r\n					\'value\', \r\n					\'items\' ) as $j ) {\r\n					( $match[ $j ][ $i ] != \'\' ) && $action1 = $j;\r\n				}\r\n				$action2 = trim( $match[ $action1 ][ $i ] );\r\n			}\r\n			switch ( $action1 ) {\r\n				case \'key\':\r\n					if ( ( $key == $action2 ) or ( isset( $result[ $key . \'-S\' ] ) ) ) {\r\n						$result[ $key . \'-S\' ][ ] = $result[ $key ];\r\n						unset( $result[ $key ] );\r\n					}\r\n					$key = strtoupper( $action2 );\r\n					$option = \'\';\r\n					$value = \'\';\r\n					$key != \'#\' && $result[ $key ] = $value;\r\n					break;\r\n				case \'option\':\r\n					if ( $option == \'\' ) {\r\n						if ( $key != \'\' and !is_array( $result[ $key ] ) ) {\r\n							$result[ $key ] = ( $result[ $key ] == \'\' ? array() : array( \r\n								\'name\' => $result[ $key ] ) );\r\n						}\r\n					}\r\n					$option = substr( $action2, 1 );\r\n					$value = \'\';\r\n					if ( $key == \'\' ) {\r\n						$result[ $option ] = $value;\r\n					} else {\r\n						$result[ $key ][ $option ] = $value;\r\n					}\r\n					break;\r\n				case \'value\':\r\n					$value = trim( $value . \' \' . $action2 );\r\n					if ( $option == \'\' ) {\r\n						$result[ $key ] = $value;\r\n					} else {\r\n						if ( $key == \'\' ) {\r\n							$result[ $option ] = $value;\r\n						} else {\r\n							$result[ $key ][ $option ] = $value;\r\n						}\r\n					}\r\n					( $option == \'protect\' ) && $this->protection = $value;\r\n					break;\r\n				case \'items\':\r\n					if ( ( $key != \'\' ) and !is_array( $result[ $key ] ) ) {\r\n						$result[ $key ] = ( $result[ $key ] == \'\' ? array() : array( \r\n							\'name\' => $result[ $key ] ) );\r\n						$result[ $key ][ \'items\' ] = $this->parse( $action2 );\r\n					} else {\r\n						$result[ \'items\' ] = $this->parse( $action2 );\r\n					}\r\n					break;\r\n			}\r\n			$i++;\r\n		}\r\n		return $result;\r\n	}\r\n\r\n	function parse_copylist() {\r\n		if ( is_array( $this->parsed_copylist ) ) return $this->parsed_copylist;\r\n		$copylist = $this->parse( $this->copylist );\r\n		\r\n		$keys = array_keys( $copylist );\r\n		foreach ( $keys as $key => $value ) {\r\n			$keys[ $key ] = str_replace( \'-S\', \'\', $value );\r\n		}\r\n		$this->parsed_copylist = array_combine( $keys, $copylist );\r\n		foreach ( $this->parsed_copylist[ \'FILTER\' ] as $filter ) {\r\n			isset( $filter[ \'name\' ] ) && ( $filter[ \'name\' ] == \'datalist\' ) && $this->datalists = implode( $filter[ \'items\' ] );\r\n			isset( $filter[ \'name\' ] ) && ( $filter[ \'name\' ] == \'dl_group\' ) && $this->dl_group = implode( $filter[ \'items\' ] );\r\n		}\r\n		$this->datalists = str_replace( \'" "\', \',\', $this->datalists );\r\n		$this->datalists = str_replace( \'"\', \'\', $this->datalists );\r\n		$this->datalists = explode( \',\', $this->datalists );\r\n		$this->dl_group = str_replace( \'" "\', \',\', $this->dl_group );\r\n		$this->dl_group = str_replace( \'"\', \'\', $this->dl_group );\r\n		$this->dl_group = explode( \',\', $this->dl_group );\r\n		foreach ( $this->parsed_copylist[ \'DEVICE\' ] as $device ) {\r\n			isset( $device[ \'name\' ] ) && $this->devices[ ] = str_replace( \'"\', \'\', $device[ \'name\' ] );\r\n		}\r\n		$this->devices = array_unique( $this->devices );\r\n		return $this->parsed_copylist;\r\n	}\r\n\r\n	function parse_schedule() {\r\n		if ( is_array( $this->parsed_schedule ) ) return $this->parsed_schedule;\r\n		$schedule = array();\r\n		$match = array();\r\n		$tokens = preg_match_all( \'/\' . COPYLISTS_SCHEDULE_PATTERN . \'/m\', $this->schedule, $match );\r\n		$i = 0;\r\n		$option = \'\';\r\n		$value = \'\';\r\n		$item = array();\r\n		while ( $i < $tokens ) {\r\n			foreach ( array( \r\n				\'option\', \r\n				\'value\' ) as $j ) {\r\n				( $match[ $j ][ $i ] != \'\' ) && $action1 = $j;\r\n			}\r\n			$action2 = trim( $match[ $action1 ][ $i ] );\r\n			switch ( $action1 ) {\r\n				case \'option\':\r\n					$option = substr( $action2, 1 );\r\n					$value = \'\';\r\n					$item[ $option ] = $value;\r\n					break;\r\n				case \'value\':\r\n					$value = trim( $value . \' \' . $action2 );\r\n					$item[ $option ] = $value;\r\n					if ( $option == \'at\' ) {\r\n						$schedule[ ] = $item;\r\n						$item = array();\r\n					}\r\n					break;\r\n			}\r\n			$i++;\r\n		}\r\n		$this->parsed_schedule = $schedule;\r\n		return $this->parsed_schedule;\r\n	}\r\n\r\n	function is_scheduled( $date = \'today\' ) {\r\n		try {\r\n			$result = false;\r\n			$schedule = $this->parse_schedule( );\r\n			$date = date( \'Y-m-d\', strtotime( $date ) );\r\n			list ( $yday, $weekday, $day, $month, $year ) = explode( \' \', date( \'z D j M Y\', strtotime( $date ) ) );\r\n			foreach ( $schedule as $item ) {\r\n				if ( isset( $item[ \'disabled\' ] ) ) {\r\n					$result = false;\r\n					break;\r\n				}\r\n				if ( isset( $item[ \'every\' ] ) and isset( $item[ \'4day\' ] ) and in_array( $weekday, explode( \' \', $item[ \'4day\' ] ) ) ) {\r\n					$firstday = date( \'z\', strtotime( sprintf( \'%s Jan %s\', $item[ \'4day\' ], $year ) ) );\r\n					if ( ( ( $yday - $firstday ) % 28 ) == 0 ) {\r\n						list ( $mode, $value ) = each( $item );\r\n						$result[ ] = array(\r\n								\'mode\' => trim( $mode . \' \' . $value ),\r\n								\'date\' => $date,\r\n								\'time\' => $item[ \'at\' ] );\r\n					}\r\n				}\r\n				if ( isset( $item[ \'starting\' ] ) and isset( $item[ \'every\' ] ) and isset( $item[ \'day\' ] ) and\r\n						( isset( $item[ \'2month\' ] ) or isset( $item[ \'3month\' ] ) or isset( $item[ \'4month\' ] )\r\n								or isset( $item[ \'6month\' ] ) or isset( $item[ \'12month\' ] ) ) ) {\r\n									$emonth = 1;\r\n									isset( $item[ \'2month\' ] )  && $emonth = 2;\r\n									isset( $item[ \'3month\' ] )  && $emonth = 3;\r\n									isset( $item[ \'4month\' ] ) && $emonth = 4;\r\n									isset( $item[ \'6month\' ] )  && $emonth = 6;\r\n									isset( $item[ \'12month\' ] ) && $emonth = 12;\r\n									$months = array( );\r\n									list( $sday, $smonth,$syear ) = explode( \' \', $item[ \'starting\' ] );\r\n									for ( $m = 0; $m < 12; $m++) {\r\n										( $smonth + $m - 1 ) % $emonth == 0 &&\r\n										$months[ ] = date(\'M\', strtotime( sprintf( \'+%d months\', $m ), 0 ) );\r\n									}\r\n								} else {\r\n									unset( $months );\r\n								}\r\n								if ( isset( $item[ \'every\' ] ) and isset( $item[ \'day\' ] ) and ( ( $item[ \'day\' ] == \'\' ) or ( $item[ \'day\' ] == $day )\r\n										or in_array( $day, explode( \' \', $item[ \'day\' ] ) ) or in_array( $weekday, explode( \' \', $item[ \'day\' ] ) ) )\r\n										and ( !isset( $item[ \'month\' ] ) or ( $item[ \'month\' ] == $month ) or( in_array( $month, explode( \' \', $item[ \'month\' ] ) ) ) )\r\n										and ( !isset( $months ) or in_array( $month,  $months ) ) ) {\r\n											list ( $mode, $value ) = each( $item );\r\n											$result[ ] = array(\r\n													\'mode\' => trim( $mode . \' \' . $value ),\r\n													\'date\' => $date,\r\n													\'time\' => $item[ \'at\' ] );\r\n										}\r\n										if ( isset( $item[ \'only\' ] ) and $item[ \'only\' ] == $year and $item[ \'day\' ] == $day and $item[ \'month\' ] == $month ) {\r\n											list ( $mode, $value ) = each( $item );\r\n											$result[ ] = array(\r\n													\'mode\' => trim( $mode . \' \' . $value ),\r\n													\'date\' => $date,\r\n													\'time\' => $item[ \'at\' ] );\r\n										}\r\n										if ( isset( $item[ \'exclude\' ] ) and ( !isset( $item[ \'year\' ] ) or $item[ \'year\' ] == $year )\r\n												and	( isset( $item[ \'month\' ] ) and $item[ \'month\' ] == $month )\r\n												and ( isset( $item[ \'day\' ] ) and $item[ \'day\' ] == $day ) ) {\r\n													$result = false;\r\n												}\r\n												if ( isset( $item[ \'exclude\' ] ) and !isset( $item[ \'year\' ] ) and !isset( $item[ \'month\' ] ) and ( isset( $item[ \'day\' ] )\r\n														and ( in_array( $day, explode( \' \', $item[ \'day\' ] ) ) ) or in_array( $weekday, explode( \' \', $item[ \'day\' ] ) ) ) ) {\r\n															$result = false;\r\n														}\r\n														if ( isset( $item[ \'exclude\' ] ) and !isset( $item[ \'year\' ] ) and !isset( $item[ \'month\' ] )\r\n																and isset( $item[ \'4day\' ] ) and in_array( $weekday, explode( \' \', $item[ \'4day\' ] ) ) ) {\r\n																	$firstday = date( \'z\', strtotime( sprintf( \'%s Jan %s\', $item[ \'4day\' ], $year ) ) );\r\n																	if ( ( ( $yday - $firstday ) % 28 ) == 0 ) {\r\n																		$result = false;\r\n																	}\r\n																}\r\n			}\r\n		}\r\n	catch ( exception $e ) {\r\n		$this->application->log_error( $e->getmessage( ) );\r\n	}\r\n		return $result;\r\n	}\r\n\r\n	function get_nextexecution( $date = \'today\' ) {\r\n		$i = 1;\r\n		$result = $this->is_scheduled( $date );\r\n		while ( $i < 365 and !$result ) {\r\n			$result = $this->is_scheduled( sprintf( \'%s +%d day\', $date, $i ) );\r\n			$i++;\r\n		}\r\n		return $result;\r\n	}\r\n}\r\n\r\nfunction read_copylists( $application ) {\r\n	$lines = array();\r\n	$files = array_merge( glob( $application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR . COPYLISTS_COPYLISTS . DIRECTORY_SEPARATOR .\'*\' ), \r\n		glob( $application->config[ \'OMNI_SERVER\' ] . DIRECTORY_SEPARATOR . COPYLISTS_SCHEDULES . DIRECTORY_SEPARATOR . \'*\' ) );\r\n	foreach ( $files as $file ) {\r\n		if ( is_file( $file ) ) $lines[ ] = basename( $file );\r\n	}\r\n	$i = $u = 0;\r\n	foreach ( $lines as $line ) {\r\n		$copylist = new mars_copylist( $application, $line );\r\n		if ( $copylist->read_file( ) ) {\r\n			$result = $copylist->write_database( );\r\n			( $result == 1 ) && $i++;\r\n			( $result == 2 ) && $u++;\r\n		}\r\n	}\r\n	$sql = "update dataprotector_copylists set valid_until=updated_on where id in (select id from (" .\r\n		 "select id from dataprotector_copylists where cellserver=\'%cellserver\' " .\r\n		 "and updated_on<\'%updated_on\' and valid_until is null) d order by id);";\r\n	$values = array( \r\n		\'cellserver\' => $application->cellserver, \r\n		\'updated_on\' => $application->start_time );\r\n	$d = $application->database->execute_query( $sql, $values );\r\n	$message = sprintf( COPYLISTS_LOG, $i, $u, $d );\r\n	$application->log_action( $message );\r\n	return true;\r\n}\r\n', '2013-01-01 00:00:00', '2016-12-15 08:47:42', NULL),
	(20, 'reschedule/reschedule.sh', '#!/bin/sh\r\n\r\n_reschedule_home=${0%/*}\r\n_php_home=`grep -i php_home ${_reschedule_home}/../config.ini | cut -d= -f2`\r\n\r\n${_php_home}/php ${_reschedule_home}/reschedule.php\r\n', '2015-11-13 15:01:42', '2016-04-21 12:21:47', NULL),
	(21, 'reschedule/reschedule.php', '<?php\r\n\r\n#leading spaces from beginning of the specification\r\n$base_pattern =\'/^\\s*\';\r\n#look for eventual -disabled token\r\n$base_pattern.=\'(?:\\-(?P<disabled>disabled)\\s+)?\';\r\n#look for -<mode> token\r\n$base_pattern.=\'(?:\\-(?P<mode>full|incr 1|trans)\\s+\';\r\n#look for eventual -starting <day> <month> <year> token\r\n$base_pattern.=\'(?:\\-starting\\s+(?P<starting>\\d+ \\d+ \\d+)\\s+)?\';\r\n#look for -every token\r\n$base_pattern.=\'\\-every\\s+\\-day\\s+\';\r\n#given as either list of <weekdays>\r\n$base_pattern.=\'(?:(?P<every>(?:(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)\\s+)*)|\';\r\n#or list of <days>\r\n$base_pattern.=\'(?P<every_day>(?:\\d+\\s+)+)\';\r\n#and list of <months>\r\n$base_pattern.=\'\\-month\\s+(?P<every_month>(?:(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+)+))\';\r\n#no clue why this is here, i keep it commented out\r\n#$base_pattern.=\'|\\-only\\s+(?P<only_date>\\d+ \\d+ \\d+)\\s+\';\r\n#$base_pattern.=\'\\-day\\s+(?P<only_day>\\d+)\\s+\';\r\n#$base_pattern.=\'\\-month\\s+(?P<only_month>(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\s+)\';\r\n#look for eventual -exclude <days> token\r\n$base_pattern.=\'(?:\\-exclude\\s+\\-day\\s+(?P<exclude_day>(?:\\d+\\s+)+))?\';\r\n#look for -at <hour>:<minute> token\r\n$base_pattern.=\'\\-at\\s+(?P<at>\\d+:\\d+)\';\r\n#trailing spaces at end of the specification\r\n$base_pattern.=\'\\s*)/sim\';\r\n\r\n#beginning of the -exclude token\r\n$exclude_pattern =\'/\';\r\n#look for -<mode> token\r\n$exclude_pattern.=\'(?:\\-(?P<mode>full|incr 1|trans)\\s+\';\r\n#look for -exclude -<day> token\r\n$exclude_pattern.=\'\\-exclude\\s+\\-day\\s+(?P<day>\\d+)\\s+\';\r\n#look for -<month> token\r\n$exclude_pattern.=\'\\-month\\s+(?P<month>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+\';\r\n#look for -<year> token\r\n$exclude_pattern.=\'\\-year\\s+(?P<year>\\d+)\\s+\';\r\n#look for -<at> token\r\n$exclude_pattern.=\'\\-at\\s+(?P<at>..:..)\';\r\n#trailing spaces at end of the -exclude token\r\n$exclude_pattern.=\'\\s*)/sim\';\r\n\r\n#beginning of the -only token\r\n$only_pattern =\'/\';\r\n#look for -<mode> token\r\n$only_pattern.=\'(?:\\-(?P<mode>full|incr 1|trans)\\s+\';\r\n#look for -only -<year> token\r\n$only_pattern.=\'\\-only\\s+(?P<year>\\d+)\\s+\';\r\n#look for -<day> token\r\n$only_pattern.=\'\\-day\\s+(?P<day>\\d+)\\s+\';\r\n#look for -<month> token\r\n$only_pattern.=\'\\-month\\s+(?P<month>Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+\';\r\n#look for -<at> token\r\n$only_pattern.=\'\\-at\\s+(?P<at>\\d+:\\d+)\';\r\n#trailing spaces at end of the -only token\r\n$only_pattern.=\'\\s*)/sim\';\r\n\r\nfunction cleanup_schedule($folder,$file,\r\n                $exclude_day=0,$exclude_month=\'\',$exclude_year=0,$time_pattern=\'.*\',\r\n                $reschedule_day=0,$reschedule_month=\'\',$reschedule_year=0) {\r\n\r\n        global $rescheduled,$excluded,$main,$base_pattern,$exclude_pattern,$only_pattern;\r\n        if (!file_exists($folder . DIRECTORY_SEPARATOR . $file)) {\r\n                echo sprintf("ERROR02: %s does not exist.\\n",$file);\r\n                return false;\r\n        }\r\n        $contents=trim(file_get_contents($folder . DIRECTORY_SEPARATOR . $file));\r\n        if ($contents==\'\') {\r\n                echo sprintf("WARN01: %s is empty.\\n",$file);\r\n                return false;\r\n        }\r\n        $exclude=0;\r\n        $reschedule=0;\r\n        $cleaned="";\r\n        $exclude_file="";\r\n        $modified=false;\r\n        if ($exclude_day>0) {\r\n                if (is_numeric($exclude_month)) $exclude_month=date(\'M\',mktime(0,0,0,$exclude_month,1));\r\n                if ($exclude_month==\'\') $exclude_month=date(\'M\');\r\n                if ($exclude_year==0) $exclude_year=date(\'Y\');\r\n                $exclude=strtotime(sprintf(\'%s %s %s\', $exclude_day, $exclude_month, $exclude_year));\r\n                $exclude_weekday=date(\'D\',$exclude);\r\n                if ($reschedule_day>0) {\r\n                        if (is_numeric($reschedule_month)) $reschedule_month=date(\'M\',mktime(0,0,0,$reschedule_month,1));\r\n                        if ($reschedule_month==\'\') $reschedule_month=$exclude_month;\r\n                        if ($reschedule_year==0) $reschedule_year=$exclude_year;\r\n                        $reschedule=strtotime(sprintf(\'%s %s %s\', $reschedule_day, $reschedule_month, $reschedule_year));\r\n                }\r\n        }\r\n        preg_match_all($base_pattern,$contents,$match);\r\n        $mode=\'\';\r\n        $every=\'\';\r\n        $at=\'\';\r\n        for ($i=0; $i<count($match[\'mode\']); $i++) {\r\n                $mode=trim($match[\'mode\'][$i]);\r\n                $every=trim($match[\'every\'][$i]);\r\n                $at=trim($match[\'at\'][$i]);\r\n                $cleaned.=($match[\'disabled\'][$i]==\'\') ? "" : "-disabled\\n";\r\n                $cleaned.=sprintf("-%s\\n", trim($match[\'mode\'][$i]));\r\n                $cleaned.=($match[\'starting\'][$i]==\'\') ? "" : sprintf("-starting %s\\n", trim($match[\'starting\'][$i]));\r\n                $cleaned.="-every\\n";\r\n                $cleaned.=($match[\'every\'][$i]==\'\') ?\r\n                        sprintf("\\t-day %s\\n\\t-month %s\\n", trim($match[\'every_day\'][$i]), trim($match[\'every\'][$i])) :\r\n                        sprintf("\\t-day %s\\n", trim($match[\'every\'][$i]));\r\n                $cleaned.=sprintf("\\t-at %s\\n\\n", trim($match[\'at\'][$i]));\r\n        }\r\n        preg_match_all($only_pattern,$contents,$match);\r\n        if (($reschedule>0) and stristr($every,$exclude_weekday) and preg_match(sprintf(\'/^%s:/\',$time_pattern),$at)) {\r\n                $modified=true;\r\n                echo sprintf("OK03: %s will be rescheduled to %s %s %s at %s.\\n",\r\n                        $file,$reschedule_day,$reschedule_month,$reschedule_year,$at);\r\n                $match[\'mode\'][]=$mode;\r\n                $match[\'day\'][]=$reschedule_day;\r\n                $match[\'month\'][]=$reschedule_month;\r\n                $match[\'year\'][]=$reschedule_year;\r\n                $match[\'at\'][]=$at;\r\n                $rescheduled++;\r\n                preg_match(sprintf(\'/%s/i\',$main[\'reschedule\']),$file,$match1);\r\n                $exclude_file=str_replace($match1[0],$main[\'instead\'],$file);\r\n        }\r\n        for ($i=0; $i<count($match[\'mode\']); $i++) {\r\n                if ((strtotime(sprintf(\'%s %s %s\', $match[\'day\'][$i], $match[\'month\'][$i], $match[\'year\'][$i]))==$exclude)\r\n                        and preg_match(sprintf(\'/^%s:/\',$time_pattern),$at)) continue;\r\n                if (($main[\'cleanup\']==1) and (strtotime(sprintf(\'%s %s %s %s\',\r\n                        $match[\'day\'][$i], $match[\'month\'][$i], $match[\'year\'][$i], $match[\'at\'][$i]))<strtotime(\'now\')))\r\n                        continue;\r\n                $new=sprintf("-%s\\n-only %s\\n\\t-day %s -month %s\\n\\t-at %s\\n\\n",\r\n                        $match[\'mode\'][$i], $match[\'year\'][$i], $match[\'day\'][$i], $match[\'month\'][$i], $match[\'at\'][$i]);\r\n                $cleaned.=(stristr($cleaned,$new)) ? "" : $new;\r\n        }\r\n        preg_match_all($exclude_pattern,$contents,$match);\r\n        if (($exclude>0) and stristr($every,$exclude_weekday) and preg_match(sprintf(\'/^%s:/\',$time_pattern),$at)) {\r\n                $modified=true;\r\n                echo sprintf("OK04: %s will be excluded from %s %s %s at %s.\\n",$file,$exclude_day,$exclude_month,$exclude_year,$at);\r\n                $match[\'mode\'][]=$mode;\r\n                $match[\'day\'][]=$exclude_day;\r\n                $match[\'month\'][]=$exclude_month;\r\n                $match[\'year\'][]=$exclude_year;\r\n                $match[\'at\'][]=\'--:--\';\r\n                $excluded++;\r\n        }\r\n        for ($i=0; $i<count($match[\'mode\']); $i++) {\r\n                if ((strtotime(sprintf(\'%s %s %s\',\r\n                        $match[\'day\'][$i], $match[\'month\'][$i], $match[\'year\'][$i]))==$reschedule)) continue;\r\n                if (($main[\'cleanup\']==1) and (strtotime(sprintf(\'%s %s %s %s\',\r\n                        $match[\'day\'][$i], $match[\'month\'][$i], $match[\'year\'][$i], $at))<strtotime(\'now\'))) continue;\r\n                $new=sprintf("-%s\\n-exclude\\n\\t-day %s -month %s -year %s\\n\\t-at %s\\n\\n",\r\n                        $match[\'mode\'][$i], $match[\'day\'][$i], $match[\'month\'][$i], $match[\'year\'][$i], $match[\'at\'][$i]);\r\n                $cleaned.=(stristr($cleaned,$new)) ? "" : $new;\r\n        }\r\n        if (!$modified and ($main[\'cleanup\']==1)) echo sprintf("OK05: %s will be just cleaned up.\\n", $file);\r\n        if ($cleaned==\'\') echo sprintf("WARN02: %s is empty after cleanup.\\n",$file);\r\n        if (($modified or ($main[\'cleanup\']==1)) and ($main[\'test\']<>1)) {\r\n                $backup=str_replace($main[\'omni_server\'],$main[\'backup\'],$folder);\r\n                if (isset($main[\'backup\']) and !is_file($backup . DIRECTORY_SEPARATOR . $file)) {\r\n                        if (!is_dir($backup)) mkdir($backup,0644,true);\r\n                        if (!copy($folder . DIRECTORY_SEPARATOR . $file,$backup . DIRECTORY_SEPARATOR . $file))\r\n                                echo sprintf("ERROR05: cannot copy %s to %s.\\n", $folder . DIRECTORY_SEPARATOR . $file, $backup);\r\n                }\r\n                $fp = fopen($folder . DIRECTORY_SEPARATOR . $file, \'w\');\r\n                if (!fwrite ($fp, $cleaned . PHP_EOL))\r\n                        echo sprintf("ERROR04: cannot write to %s.\\n", $folder . DIRECTORY_SEPARATOR . $file);\r\n                fclose ($fp);\r\n                chmod($folder . DIRECTORY_SEPARATOR . $file, 0644);\r\n        }\r\n        if ($exclude_file!==\'\') {\r\n                echo sprintf("OK06: %s respective \'%s\' will be processed.\\n",$file, $main[\'instead\']);\r\n                cleanup_schedule($folder,$exclude_file,$reschedule_day,$reschedule_month,$reschedule_year);\r\n        }\r\n        return true;\r\n}\r\n\r\ndate_default_timezone_set( \'UTC\' );\r\n\r\n$ini                    = parse_ini_file(\'reschedule.ini\', true);\r\n$main                   = array_change_key_case($ini,CASE_LOWER);\r\n$main                   = array_change_key_case($main[\'main\'],CASE_LOWER);\r\n$folders                = glob($main[\'omni_server\'] . DIRECTORY_SEPARATOR . \'barschedules\' . DIRECTORY_SEPARATOR . \'*\' , GLOB_ONLYDIR);\r\n$folders[]              = $main[\'omni_server\'] . DIRECTORY_SEPARATOR . \'schedules\';\r\n\r\n$excluded               = 0;\r\n$ignored                = 0;\r\n$rescheduled    = 0;\r\n\r\necho "OK01: RESCHEDULING STARTED.\\n";\r\n\r\nforeach ($ini as $key => $value) {\r\n        $entry = array_change_key_case($value,CASE_LOWER);\r\n        if (isset($entry[\'omni_server\'])) continue;\r\n        $error=\'\';\r\n        if (!isset($entry[\'mtw_day\'])) $error=\'"mtw_day" entry is missing\'. PHP_EOL;\r\n        if (!isset($entry[\'time_pattern\'])) $error=\'"time_pattern" entry is missing\'. PHP_EOL;\r\n        if (!isset($entry[\'new_day\'])) $error=\'"new_day" entry is missing\'. PHP_EOL;\r\n        list($day,$month,$year)=explode(\' \',$entry[\'mtw_day\']);\r\n        if ($day<1 or $day>31) $error=sprintf(\'"%s" day is incorrect\',$day). PHP_EOL;\r\n        if (!stristr(\'(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\',$month)) $error=sprintf(\'"%s" month is incorrect\',$month). PHP_EOL;\r\n        if ($year<2013 or $year>2100) $error=sprintf(\'"%s" year is incorrect\',$year). PHP_EOL;\r\n        $time_pattern=$entry[\'time_pattern\'];\r\n        list($new_day,$new_month,$new_year)=explode(\' \',$entry[\'new_day\']);\r\n        if ($new_day<1 or $new_day>31) $error=sprintf(\'"%s" day is incorrect\',$new_day). PHP_EOL;\r\n        if (!stristr(\'(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\',$new_month)) $error=sprintf(\'"%s" month is incorrect\',$new_month). PHP_EOL;\r\n        if ($new_year<2013 or $new_year>2100) $error=sprintf(\'"%s" year is incorrect\',$new_year). PHP_EOL;\r\n        if ($error!==\'\') die(sprintf(\'ERROR01: $s in [%s] entry\',$error,$key));\r\n}\r\n\r\n$i=0;\r\n\r\nforeach ($folders as $folder) {\r\n        $files=glob($folder . DIRECTORY_SEPARATOR . \'*\');\r\n        sort($files);\r\n        foreach ($files as $file) {\r\n                $i++;\r\n                $schedule=basename($file);\r\n                if (preg_match(sprintf(\'/%s/i\',$main[\'ignore\']),$schedule)) {\r\n                        echo sprintf("OK02: %s will be ignored.\\n",$schedule);\r\n                        $ignored++;\r\n                        continue;\r\n                }\r\n                foreach ($ini as $key => $value) {\r\n                        if ($key==\'main\') continue;\r\n                        $entry = array_change_key_case($value,CASE_LOWER);\r\n                        list($exclude_day,$exclude_month,$exclude_year)=explode(\' \',$entry[\'mtw_day\']);\r\n                        $time_pattern=$entry[\'time_pattern\'];\r\n                        list($reschedule_day,$reschedule_month,$reschedule_year)=explode(\' \',$entry[\'new_day\']);\r\n                        if(preg_match(sprintf(\'/%s/i\',$main[\'reschedule\']),$schedule)) {\r\n                                cleanup_schedule($folder,$schedule,$exclude_day,$exclude_month,$exclude_year,$time_pattern,$reschedule_day,$reschedule_month,$reschedule_year);\r\n                                continue;\r\n                        }\r\n                        if (preg_match(sprintf(\'/%s/i\',$main[\'exclude\']),$schedule)) {\r\n                                cleanup_schedule($folder,$schedule,$exclude_day,$exclude_month,$exclude_year,$time_pattern);\r\n                                continue;\r\n                        }\r\n                        if ($main[\'cleanup\']==1) cleanup_schedule($folder,$schedule);\r\n                }\r\n        }\r\n}\r\necho sprintf("OK99: RESCHEDULING FINISHED. %s schedules processed, %s ignored, %s excluded, %s rescheduled.\\n", $i, $ignored, $excluded, $rescheduled);\r\n?>\r\n', '2015-11-13 15:01:53', '2016-04-21 12:21:50', NULL),
	(22, 'reschedule/reschedule.ini', '[main]\r\n; PATH TO OMNI/SERVER FOLDER\r\nomni_server=/etc/opt/omni/server\r\n\r\n; PATH WHERE TO BACKUP SCHEDULES\r\nbackup          ="./backup"\r\n\r\n; PATTERN SPECIFIES WHICH SCHEDULES TO IGNORE(REGEXP)\r\nignore          ="(arch|log|trans)"\r\n\r\n; PATTERN SPECIFIES WHICH SCHEDULES TO EXCLUDE (REGEXP)\r\nexclude         ="Daily"\r\n\r\n; PATTERN SPECIFIES WHICH SCHEDULES TO RESCHEDULE (REGEXP)\r\nreschedule      ="(Weekly|Monthly|Yearly|Special)"\r\n\r\n; SUBSTRING SPECIFIES WHICH SCHEDULES TO EXCLUDE INSTEAD OF RESCHEDULED BACKUPS\r\ninstead         ="Daily"\r\n\r\n; TEST ONLY. NO WRITE OPERATION WILL BE PERFORMED, JUST LOGGING\r\n; test          =1|0\r\ntest            =0\r\n\r\n; CLEANUP OF SCHEDULES REMOVES ALL \'EXCLUDE\' AND \'ONLY\' ENTRIES\r\n; cleanup       =1|0\r\ncleanup         =0\r\n\r\n; MAINTENANCE DATE\r\n; mtw_day        =1-31\r\n; mtw_month      =Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec\r\n; mtw_year       =2013-9999\r\n\r\n; MAINTENANCE TIME PATTERN (REGEXP)\r\n; time_pattern   =0*x        single hour before 10AM (x=0-9)\r\n; time_pattern   =0*[a-b]    range of hours before 10AM (a,b=0-9,b>a)\r\n; time_pattern   =1x         single hour before 8PM (x=0-9)\r\n; time_pattern   =1[a-b]     range of hours before 8PM (a,b=0-9,b>a)\r\n; time_pattern   =2x         single hour 8PM and later (x=0-9)\r\n; time_pattern   =2[a-b]     range of hours 8PM and later (a,b=0-9,b>a)\r\n\r\n; NEW DATE FOR WEEKLY BACKUPS\r\n; new_day        =1-31\r\n; new_month      =Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec\r\n; new_year       =2013-9999\r\n\r\n;[EXAMPLE]\r\n;mtw_day                        ="18 May 2013"\r\n;time_pattern   ="0*[7-9]"\r\n;new_day                        ="17 May 2013"\r\n\r\n[Sat13_06-09]\r\nmtw_day                 ="13 Feb 2016"\r\ntime_pattern    ="0*[6-9]"\r\nnew_day                 ="15 Feb 2016"\r\n[Sat13_10-19]\r\nmtw_day                 ="13 Feb 2016"\r\ntime_pattern    ="1[0-9]"\r\nnew_day                 ="15 Feb 2016"\r\n[Sat13_20-23]\r\nmtw_day                 ="13 Feb 2016"\r\ntime_pattern    ="2[0-3]"\r\nnew_day                 ="15 Feb 2016"\r\n\r\n[Sun14_00-09]\r\nmtw_day                 ="14 Feb 2016"\r\ntime_pattern    ="0*[0-9]"\r\nnew_day                 ="16 Feb 2016"\r\n[Sun14_10-19]\r\nmtw_day                 ="14 Feb 2016"\r\ntime_pattern    ="1[0-9]"\r\nnew_day                 ="16 Feb 2016"\r\n', '2015-11-13 15:02:08', '2016-04-21 12:21:53', NULL);
/**/

DROP TABLE IF EXISTS config_settings;
CREATE TABLE config_settings (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(32) DEFAULT NULL,
  name varchar(32) NOT NULL,
  value varchar(32) NOT NULL,
  description varchar(64) NOT NULL,
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_name (cellserver,name)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='Settings and parameters';

INSERT INTO config_settings (id,cellserver,name,value,description,valid_since,updated_on) VALUES 
	(1,NULL,'region','Default Region','Region Name','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(2,NULL,'pool_physical','LTO[45]','Physical Tapes','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(3,NULL,'pool_virtual','VLS|STR','Virtual Tapes','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(4,NULL,'pool_no_offload','(PROTECTED|SCRATCH)','No offload Tapes','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(5,NULL,'hourly_bsr_timeframe','24','Timeframe for Hourly BSR report','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(6,NULL,'purge_log_weeks','4','Maximum age for log entries','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(7,NULL,'purge_media_weeks','4','Maximum age for unprotected media','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(8,NULL,'purge_objects_weeks','4','Maximum age for unprotected objects','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(9,NULL,'purge_sessions_weeks','16','Maximum age for unprotected sessions','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(10,NULL,'daily_routine','10:15','Start time of daily routine','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(11,NULL,'backup_sessions','Y','Backup unprotected sessions before purge','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(12,NULL,'routine_periodicity','15','Periodicity of normal routine (minutes)','2012-12-31 23:00:00','2012-12-31 23:00:00'),
	(13, NULL, 'bw_start', '18:00', 'Start of backup window', '2018-08-13 14:24:16', '2018-08-13 14:24:26');

DROP TABLE IF EXISTS config_timeperiods;
CREATE TABLE config_timeperiods (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(32) NOT NULL DEFAULT 'Default',
  value varchar(8) NOT NULL DEFAULT 'D-7::D',
  ord int(10) unsigned NOT NULL DEFAULT '1',
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name (name)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='List o time periods';

INSERT INTO config_timeperiods (id,name,value,ord,valid_since,updated_on) VALUES 
	(1,'This hour','H::H+1',1,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(2,'Last hour','H-1::H',2,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(3,'Last 12 hours','H-12::H',3,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(4,'Last 24 hours','H-24::H',4,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(5,'Last 48 hours','H-48::H',5,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(6,'Today','D::D+1',6,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(7,'Yesterday','D-1::D',7,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(8,'Last 3 days','D-3::D',8,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(9,'Last 7 days','D-7::D',9,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(10,'This week','W::W+1',10,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(11,'Last week','W-1::W',11,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(12,'Last 2 weeks','W-2::W',12,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(13,'Last 4 weeks','W-4::W',13,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(14,'This month (1.)','M::M+1',14,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(15,'This month (15.)','N::N+1',15,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(16,'Last month (1.)','M-1::M',16,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(17,'Last month (15.)','N-1::N',17,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(18,'Last 3 months (1.)','M-3::M',18,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(19,'Last 3 months (15.)','N-3::N',19,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(20,'Last 6 months (1.)','M-6::M',20,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(21,'Last 6 months (15.)','N-6::N',21,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(22,'Last 12 months (1.)','M-12::M',22,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(23,'Last 12 months (15.)','N-12::N',23,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(24,'This year','Y::Y+1',24,'2013-01-01 00:00:00','2013-01-01 00:00:00'),
	(25,'Last year','Y-1::Y',25,'2013-01-01 00:00:00','2013-01-01 00:00:00');

CREATE TABLE `config_timers` (
	`name` VARCHAR(32) NOT NULL,
	`start` TIMESTAMP NOT NULL,
	`end` TIMESTAMP NOT NULL,
	`duration` INT(11) NOT NULL,
	PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Start times and durations of events';

DROP TABLE IF EXISTS dataprotector_clients;
CREATE TABLE dataprotector_clients (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  name varchar(64) NOT NULL,
  type varchar(16) NOT NULL,
  customer varchar(32) DEFAULT NULL,
  specifications int(10) unsigned NOT NULL DEFAULT '0',
  mountpoints int(10) unsigned NOT NULL DEFAULT '0',
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_name_type (cellserver,name,type),
  KEY customer (customer)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Clients list';

DROP TABLE IF EXISTS dataprotector_copylists;
CREATE TABLE dataprotector_copylists (
	id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	cellserver VARCHAR(64) NOT NULL,
	name VARCHAR(128) NOT NULL,
	customer VARCHAR(32) NULL DEFAULT NULL,
	protection VARCHAR(40) NULL DEFAULT NULL,
	copylist MEDIUMTEXT NOT NULL,
	copylist_modified TIMESTAMP NULL DEFAULT NULL,
	schedule TEXT NULL,
	schedule_modified TIMESTAMP NULL DEFAULT NULL,
	nextexecution TIMESTAMP NULL DEFAULT NULL,
	periodicity INT(3) NULL DEFAULT NULL,
	devices TEXT NULL,
	datalists TEXT NULL,
	dl_group VARCHAR(32) NULL DEFAULT NULL,
	valid_since TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	valid_until TIMESTAMP NULL DEFAULT NULL,
	PRIMARY KEY (id),
	UNIQUE INDEX cellserver_name (cellserver,name),
	INDEX customer (customer),
	INDEX updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Copylists with schedules';

DROP TABLE IF EXISTS dataprotector_devices;
CREATE TABLE dataprotector_devices (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(64) NOT NULL,
  definition text NOT NULL,
  disable varchar(1) DEFAULT NULL,
  description varchar(64) DEFAULT NULL,
  host varchar(64) NOT NULL,
  pool varchar(64) DEFAULT NULL,
  library varchar(64) NOT NULL,
  blksize int(5) unsigned DEFAULT NULL,
  lockname varchar(64) NOT NULL,
  devserial varchar(16) NOT NULL,
  updated_by varchar(64) NOT NULL,
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name_updated_by (updated_by,name),
  KEY lockname (lockname),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Device configuration "omnidownload -list_devices -detail"';

DROP TABLE IF EXISTS dataprotector_libraries;
CREATE TABLE dataprotector_libraries (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(64) NOT NULL,
  definition text NOT NULL,
  description varchar(128) NOT NULL,
  host varchar(64) NOT NULL,
  ioctlserial varchar(16) NOT NULL,
  control varchar(32) NOT NULL,
  mgmtconsoleurl varchar(64) NOT NULL,
  updated_by varchar(64) DEFAULT NULL,
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name_updated_by (updated_by,name),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Library configuration "omnidownload -list_libraries -detail"';

DROP TABLE IF EXISTS dataprotector_locked_objects;
CREATE TABLE dataprotector_locked_objects (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  type varchar(16) NOT NULL,
  name varchar(64) NOT NULL,
  pid int(6) unsigned NOT NULL,
  host varchar(64) NOT NULL,
  label varchar(64) DEFAULT NULL,
  location varchar(8) DEFAULT NULL,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY type_name_host (type,name,host),
  KEY type (type),
  KEY name (name),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Locked objects "omnidbutil -show_locked_devs -all"';

DROP TABLE IF EXISTS dataprotector_media;
CREATE TABLE dataprotector_media (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  pool varchar(64) NOT NULL,
  mediumid varchar(32) NOT NULL,
  label varchar(64) NOT NULL,
  location varchar(128) NOT NULL,
  owner varchar(64) NOT NULL,
  status varchar(8) NOT NULL,
  kbused decimal(12,0) unsigned NOT NULL,
  kbtotal decimal(12,0) unsigned NOT NULL,
  kbusable decimal(12,0) unsigned NOT NULL,
  writes int(10) unsigned NOT NULL,
  overwrites int(10) unsigned NOT NULL,
  errors int(10) unsigned NOT NULL,
  initialized timestamp NULL DEFAULT NULL,
  lastwrite timestamp NULL DEFAULT NULL,
  lastaccess timestamp NULL DEFAULT NULL,
  lastoverwrite timestamp NULL DEFAULT NULL,
  protected timestamp NULL DEFAULT NULL,
  wp varchar(8) NOT NULL,
  updated_by varchar(64) DEFAULT NULL,
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY mediumid_updated_by (updated_by,mediumid),
  KEY label (label),
  KEY pool (pool),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Media list';

DROP TABLE IF EXISTS dataprotector_objects;
CREATE TABLE dataprotector_objects (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  client varchar(64) NOT NULL,
  type varchar(16) NOT NULL,
  name varchar(128) NOT NULL,
  description varchar(128) NOT NULL,
  versions int(10) unsigned NOT NULL DEFAULT '0',
  oldest timestamp NULL DEFAULT NULL,
  newest timestamp NULL DEFAULT NULL,
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_client_type_name (cellserver,client,type,name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Objects list';

DROP TABLE IF EXISTS dataprotector_omnistat;
CREATE TABLE dataprotector_omnistat (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  sessionid varchar(16) NOT NULL,
  type varchar(32) NOT NULL,
  status varchar(32) NOT NULL,
  sessionowner varchar(128) NOT NULL,
  starttime timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  specification varchar(128) NOT NULL,
  devices int(3) DEFAULT NULL,
  active_devices int(3) DEFAULT NULL,
  ad_delta int(3) DEFAULT NULL,
  done bigint(20) DEFAULT NULL,
  done_delta bigint(20) DEFAULT NULL,
  objects int(3) DEFAULT NULL,
  active_objects int(3) DEFAULT NULL,
  ao_delta int(3) DEFAULT NULL,
  total_files bigint(20) DEFAULT NULL,
  processed_files bigint(20) DEFAULT NULL,
  pf_delta bigint(20) DEFAULT NULL,
  total_size bigint(20) DEFAULT NULL,
  processed_size bigint(20) DEFAULT NULL,
  ps_delta bigint(20) DEFAULT NULL,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_sessionid (cellserver,sessionid),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Actual status "omnistat -det"';

DROP TABLE IF EXISTS dataprotector_omnistat_devices;
CREATE TABLE dataprotector_omnistat_devices (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  sessionid varchar(16) NOT NULL,
  name varchar(64) NOT NULL,
  host varchar(128) NOT NULL,
  started timestamp NULL DEFAULT NULL,
  finished timestamp NULL DEFAULT NULL,
  done bigint(20) DEFAULT NULL,
  physical_device varchar(32) DEFAULT NULL,
  status varchar(32) DEFAULT NULL,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_sessionid_name (cellserver,sessionid,name),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Actual status "omnistat -ses -det"';

DROP TABLE IF EXISTS dataprotector_omnistat_objects;
CREATE TABLE dataprotector_omnistat_objects (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  sessionid varchar(16) NOT NULL,
  name varchar(200) NOT NULL,
  type varchar(16) NOT NULL,
  started timestamp NULL DEFAULT NULL,
  finished timestamp NULL DEFAULT NULL,
  runlevel varchar(16) DEFAULT NULL,
  warnings int(3) unsigned DEFAULT NULL,
  errors int(3) unsigned DEFAULT NULL,
  total_files int(3) unsigned DEFAULT NULL,
  processed_files int(3) unsigned DEFAULT NULL,
  total_size bigint(20) DEFAULT NULL,
  processed_size bigint(20) DEFAULT NULL,
  device varchar(64) DEFAULT NULL,
  status varchar(32) DEFAULT NULL,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_sessionid_name (cellserver,sessionid,name),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Actual status "omnistat -ses -det"';

DROP TABLE IF EXISTS dataprotector_pools;
CREATE TABLE dataprotector_pools (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  name varchar(64) NOT NULL,
  description varchar(128) NOT NULL,
  type varchar(32) NOT NULL,
  policy varchar(32) NOT NULL,
  mbused bigint(20) NOT NULL,
  mbtotal bigint(20) NOT NULL,
  media int(3) unsigned NOT NULL,
  poor int(3) unsigned NOT NULL,
  fair int(3) unsigned NOT NULL,
  agelimit varchar(64) DEFAULT NULL,
  maxoverwrites int(3) unsigned NOT NULL,
  magazinesupport varchar(8) DEFAULT NULL,
  freepoolsupport varchar(128) DEFAULT NULL,
  updated_by varchar(64) DEFAULT NULL,
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY name_updated_by (updated_by,name),
  KEY name (name),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Pool list';

DROP TABLE IF EXISTS dataprotector_sessions;
CREATE TABLE dataprotector_sessions (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  sessionid varchar(16) NOT NULL,
  specification varchar(128) NOT NULL,
  scheduled tinyint(3) unsigned NOT NULL DEFAULT '0',
  restartof varchar(16) DEFAULT NULL,
  type varchar(8) NOT NULL,
  sessionowner varchar(128) NOT NULL,
  status varchar(32) NOT NULL,
  mode varchar(8) NOT NULL,
  starttime timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  starttimet int(10) unsigned NOT NULL,
  endtime timestamp NULL DEFAULT NULL,
  endtimet int(10) unsigned NOT NULL,
  queuing time NOT NULL,
  duration time NOT NULL,
  gbwritten decimal(10,2) unsigned NOT NULL,
  media int(3) unsigned NOT NULL,
  errors int(5) unsigned NOT NULL,
  warnings int(5) unsigned NOT NULL,
  pendingda int(5) unsigned NOT NULL,
  runningda int(5) unsigned NOT NULL,
  failedda int(5) unsigned NOT NULL,
  completedda int(5) unsigned NOT NULL,
  objects int(5) unsigned NOT NULL,
  success varchar(8) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_sessionid (cellserver,sessionid),
  KEY starttime (starttime),
  KEY specification (specification),
  KEY scheduled (scheduled),
  KEY cellserver_restartof (cellserver,restartof)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Sessions "omnirpt -report single_session"';

DROP TABLE IF EXISTS dataprotector_session_devices;
CREATE TABLE dataprotector_session_devices (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  sessionid varchar(16) NOT NULL,
  device varchar(64) NOT NULL,
  starttime timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  starttimet int(10) unsigned NOT NULL,
  endtime timestamp NULL DEFAULT NULL,
  endtimet int(10) unsigned DEFAULT NULL,
  duration time NOT NULL,
  gbwritten decimal(10,2) unsigned NOT NULL,
  performance decimal(10,2) unsigned NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_sessionid_device (cellserver,sessionid,device)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Session devices "omnirpt -report session_devices"';

DROP TABLE IF EXISTS dataprotector_session_media;
CREATE TABLE dataprotector_session_media (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  sessionid varchar(16) NOT NULL,
  mediumid varchar(32) NOT NULL,
  label varchar(64) NOT NULL,
  location varchar(128) NOT NULL,
  pool varchar(64) NOT NULL,
  protection timestamp NULL DEFAULT NULL,
  used decimal(20,2) unsigned NOT NULL,
  total decimal(20,2) unsigned NOT NULL,
  lastused timestamp NULL DEFAULT NULL,
  lastusedt int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_sessionid_mediumid (cellserver,sessionid,mediumid)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Session media "omnirpt -report session_media"';

DROP TABLE IF EXISTS dataprotector_session_objects;
CREATE TABLE dataprotector_session_objects (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  sessionid varchar(16) NOT NULL,
  type varchar(16) DEFAULT NULL,
  client varchar(64) NOT NULL,
  mountpoint varchar(128) NOT NULL,
  description varchar(128) NOT NULL,
  status varchar(32) NOT NULL,
  mode varchar(8) NOT NULL,
  starttime timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  starttimet int(10) unsigned NOT NULL,
  endtime timestamp NULL DEFAULT NULL,
  endtimet int(10) unsigned DEFAULT NULL,
  duration time NOT NULL,
  kbwritten bigint(20) unsigned NOT NULL,
  files int(10) unsigned NOT NULL,
  performance decimal(10,2) unsigned NOT NULL,
  protection timestamp NULL DEFAULT NULL,
  errors int(10) unsigned NOT NULL,
  warnings int(10) unsigned NOT NULL,
  device varchar(64) NOT NULL,
  PRIMARY KEY (id),
  KEY cellserver_sessionid (cellserver,sessionid),
  KEY client_type (client,type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Session objects "omnirpt -report session_objects"';

DROP TABLE IF EXISTS dataprotector_specifications;
CREATE TABLE dataprotector_specifications (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  cellserver varchar(64) NOT NULL,
  name varchar(128) NOT NULL,
  type varchar(8) DEFAULT NULL,
  customer varchar(32) DEFAULT NULL,
  retention varchar(32) DEFAULT NULL,
  protection varchar(40) DEFAULT NULL,
  dpgroup varchar(32) NULL DEFAULT NULL,
  specification text NOT NULL,
  specification_modified timestamp NULL DEFAULT NULL,
  schedule text,
  schedule_modified timestamp NULL DEFAULT NULL,
  hosts int(3) unsigned DEFAULT NULL,
  hostnames text,
  nextexecution timestamp NULL DEFAULT NULL,
  periodicity int(3) DEFAULT NULL,
  lastsessionid varchar(16) DEFAULT NULL,
  lastsuccessfulsessionid varchar(16) DEFAULT NULL,
  failure int(3) unsigned NOT NULL DEFAULT '0',
  success int(3) unsigned NOT NULL DEFAULT '0',
  valid_since timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_name (cellserver,name),
  KEY customer (customer),
  KEY dpgroup (dpgroup),
  KEY updated_on (updated_on)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Datalists/Barlists with schedules';

DROP TABLE IF EXISTS mars_log;
CREATE TABLE mars_log (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  cellserver varchar(32) NOT NULL,
  pid int(6) unsigned DEFAULT NULL,
  duration decimal(7,2) DEFAULT NULL,
  severity varchar(8) DEFAULT NULL,
  message varchar(256) NOT NULL,
  PRIMARY KEY (id),
  KEY timestamp (timestamp),
  KEY cellserver (cellserver),
  KEY severity (severity)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Application log';

DROP TABLE IF EXISTS mars_queue;
CREATE TABLE mars_queue (
  id int(10) unsigned NOT NULL AUTO_INCREMENT,
  timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  cellserver varchar(64) NOT NULL,
  name varchar(64) NOT NULL,
  data varchar(128) DEFAULT NULL,
  valid_from timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  valid_until timestamp NULL DEFAULT NULL,
  executed_on timestamp NULL DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY cellserver_name_data (cellserver,name,data),
  KEY timestamp (timestamp)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Action queue';

DELIMITER ;;

DROP EVENT IF EXISTS event_routine;;

CREATE DEFINER=root@'%' EVENT event_routine
	ON SCHEDULE
		EVERY 5 MINUTE STARTS '2015-01-01'
	ON COMPLETION PRESERVE
	DISABLE
	COMMENT ''
	DO BEGIN
  DECLARE __id INT;
  DECLARE __done BOOLEAN DEFAULT FALSE;
  DECLARE __type VARCHAR(16) DEFAULT 'ROUTINE';
  DECLARE __mode VARCHAR(16) DEFAULT 'Normal';
  DECLARE queue CURSOR FOR SELECT id,name,data FROM mars_queue WHERE cellserver='localhost' AND valid_from<=NOW() AND executed_on IS NULL 
	 AND (valid_until IS NULL OR valid_until>=NOW()) AND UPPER(name) IN ('ROUTINE','MAINTENANCE') ORDER BY timestamp;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET __done := TRUE;

  SELECT FLOOR(RAND() * 9000) + 1000,DATE_FORMAT(NOW(),'%H:%i') INTO @pid,@time FROM DUAL;
  SELECT value INTO @periodicity FROM config_settings WHERE name='routine_periodicity';
  SELECT value INTO @daily FROM config_settings WHERE name='daily_routine';

  SET @mode='';
  IF MOD(MINUTE(NOW()),@periodicity)=0 THEN
    SET @mode='Normal';
  END IF;
  IF @time=@daily THEN
    SET @mode='Daily';
  END IF;
  IF @mode<>'' THEN
    INSERT INTO mars_queue (timestamp, cellserver, name, data, valid_from, valid_until )
      VALUES (NOW(), 'localhost', 'ROUTINE', @mode, NOW(), NOW()+INTERVAL 2*@periodicity MINUTE)
      ON DUPLICATE KEY  UPDATE timestamp=NOW(), valid_until=NOW()+INTERVAL 2*@periodicity MINUTE, executed_on=NULL;
  END IF;
  
  OPEN queue;
  QueueLoop: LOOP
    FETCH queue INTO __id,__type,__mode;
    IF __done THEN
      LEAVE QueueLoop;
    END IF;
	 IF UPPER(__type)='ROUTINE' THEN 
	   CALL procedure_routine(__mode);
	 END IF;
	 IF UPPER(__type)='MAINTENANCE' THEN 
	   CALL procedure_maintenance();
	 END IF;
    DELETE FROM mars_queue WHERE id=__id;
  END LOOP QueueLoop;
  CLOSE queue;
END ;;

DROP FUNCTION IF EXISTS function_customer;;

CREATE DEFINER=root@'%' FUNCTION function_customer()
	RETURNS varchar(32) CHARSET utf8
	LANGUAGE SQL
	DETERMINISTIC
	NO SQL
	SQL SECURITY DEFINER
	COMMENT ''
BEGIN
RETURN NULLIF(@customer,'');
END ;;

DROP FUNCTION IF EXISTS function_from;;

CREATE DEFINER=root@'%' FUNCTION function_from()
	RETURNS timestamp
	LANGUAGE SQL
	DETERMINISTIC
	NO SQL
	SQL SECURITY DEFINER
	COMMENT ''
BEGIN
RETURN IFNULL(NULLIF(@datetime_from,''),DATE(SUBDATE(NOW(), interval 1 MONTH)));
END ;;

DROP FUNCTION IF EXISTS function_mountpoint;;

CREATE DEFINER=root@'%' FUNCTION function_mountpoint(type VARCHAR(16), mountpoint VARCHAR(128), description VARCHAR(128))
	RETURNS varchar(128) CHARSET utf8
	LANGUAGE SQL
	DETERMINISTIC
	CONTAINS SQL
	SQL SECURITY DEFINER
	COMMENT ''
BEGIN
SET @f=1;
SET @t=LENGTH(mountpoint);
SET @result=mountpoint;
IF type='BAR'AND description='DB2' THEN
  SET @f=1;
  SET @t=IFNULL(NULLIF(LOCATE(':',mountpoint),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
IF type='BAR'AND description='E2010' THEN
  SET @f=IFNULL(NULLIF(LOCATE('/',mountpoint,2)+1,1),1);
  SET @t=IFNULL(NULLIF(LOCATE('/',mountpoint,@f+1),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
  SET @result=description;
END IF;
IF type='BAR'AND description='Hana' THEN
  SET @f=1;
  SET @t=IFNULL(NULLIF(LOCATE(':',mountpoint),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
IF type='BAR'AND description='IDB' THEN
  SET @f=1;
  SET @t=IFNULL(NULLIF(LOCATE(':',mountpoint),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
  SET @result=description;
END IF;
IF type='BAR'AND description='Lotus' THEN
  SET @f=1;
  SET @t=IFNULL(NULLIF(LOCATE('::',mountpoint),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
IF type='BAR'AND description='MSESE' THEN
  SET @f=IFNULL(NULLIF(LOCATE('Store)/',mountpoint)+6,6),1);
  SET @f=IFNULL(NULLIF(LOCATE('/',mountpoint,@f)+1,1),1);
  SET @t=IFNULL(NULLIF(LOCATE('/',mountpoint,@f+1),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
IF type='BAR'AND description='MSSQL' THEN
  SET @f=IFNULL(NULLIF(LOCATE('/',mountpoint)+1,1),1);
  SET @t=IFNULL(NULLIF(LOCATE('/',mountpoint,@f+1),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
IF type='BAR'AND description='MSVSSW-APP' THEN
  SET @f=IFNULL(NULLIF(LOCATE('Store/',mountpoint)+5,5),1);
  SET @f=IFNULL(NULLIF(LOCATE('/',mountpoint,@f)+1,1),1);
  SET @t=IFNULL(NULLIF(LOCATE('/',mountpoint,@f+1),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
  SET @result=description;
END IF;
IF type='BAR'AND description='Oracle8' THEN
  SET @f=IFNULL(NULLIF(LOCATE('<',mountpoint)+1,1),1);
  SET @t=IFNULL(NULLIF(LOCATE('_',mountpoint,@f),0),LENGTH(mountpoint)+1);
  SET @t=IFNULL(NULLIF(LOCATE('-',mountpoint,@f+2),0),@t);
  SET @t=IFNULL(NULLIF(LOCATE('DP Managed Control File',mountpoint),0),@t);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
IF type='BAR'AND description='SAP' THEN
  SET @f=1;
  SET @t=IFNULL(NULLIF(LOCATE('.',mountpoint),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
IF type='BAR'AND description='SAPDB' THEN
  SET @f=IFNULL(NULLIF(LOCATE('/',mountpoint)+1,1),1);
  SET @t=IFNULL(NULLIF(LOCATE('/',mountpoint,@f+1),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
IF type='BAR'AND description='Sybase' THEN
  SET @f=IFNULL(NULLIF(LOCATE(':',mountpoint)+1,1),1);
  SET @t=IFNULL(NULLIF(LOCATE('<',mountpoint,@f+1),0),LENGTH(mountpoint)+1);
  SET @result=SUBSTRING(mountpoint,@f,@t-@f);
END IF;
RETURN IFNULL(TRIM(@result),mountpoint);
END ;;

DROP FUNCTION IF EXISTS function_restartof;;

CREATE DEFINER=root@'%' FUNCTION function_restartof(_cellserver VARCHAR(32), _sessionid VARCHAR(16))
	RETURNS varchar(16) CHARSET utf8
	LANGUAGE SQL
	DETERMINISTIC
	CONTAINS SQL
	SQL SECURITY DEFINER
	COMMENT ''
BEGIN
  SET @_restartof=NULL;
  SELECT s3.sessionid INTO @_restartof
    FROM dataprotector_sessions s1
    LEFT JOIN dataprotector_specifications s2 ON (s2.cellserver=s1.cellserver AND s2.name=s1.specification)
    LEFT JOIN config_retentions r ON (r.name=s2.retention AND (r.customer=s2.customer OR r.customer IS NULL))
    LEFT JOIN dataprotector_sessions s3 ON
    (s3.cellserver=s1.cellserver AND s3.specification=s2.name AND s3.scheduled=1 
    AND s3.starttime BETWEEN DATE_SUB(s1.starttime, INTERVAL IFNULL(r.restarthours,s2.periodicity*12) HOUR) AND s1.starttime)
    WHERE s1.cellserver=_cellserver AND s1.sessionid=_sessionid
    AND s1.scheduled=0
    AND s2.retention NOT IN ('Excluded')
    ORDER BY s3.starttime DESC,r.customer DESC
    LIMIT 1;
  RETURN IFNULL(@_restartof,'');
END ;;


DROP FUNCTION IF EXISTS function_to;;

CREATE DEFINER=root@'%' FUNCTION function_to()
	RETURNS timestamp
	LANGUAGE SQL
	DETERMINISTIC
	NO SQL
	SQL SECURITY DEFINER
	COMMENT ''
BEGIN
RETURN IFNULL(NULLIF(@datetime_to,''),DATE(ADDDATE(NOW(), interval 1 DAY))) - INTERVAL 1 SECOND;
END ;;


DROP FUNCTION IF EXISTS function_uptime;;

CREATE DEFINER=root@'%' FUNCTION function_uptime()
	RETURNS varchar(32) CHARSET utf8
	LANGUAGE SQL
	DETERMINISTIC
	CONTAINS SQL
	SQL SECURITY DEFINER
	COMMENT ''
BEGIN
select SEC_TO_TIME(variable_value) into @uptime from information_schema.global_status where variable_name='UPTIME';
select concat(FLOOR(HOUR(@uptime) / 24), 'd ',
MOD(HOUR(@uptime), 24), 'h ',
MINUTE(@uptime), 'm') into @result from dual;
return @result;
END ;;

DROP PROCEDURE IF EXISTS procedure_maintenance;;
CREATE DEFINER=root@'%' PROCEDURE procedure_maintenance()
	LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER
	COMMENT 'Maintenance'
BEGIN
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS @conditions = NUMBER;  
    GET DIAGNOSTICS CONDITION @conditions @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @full_error = CONCAT('ERROR ', @errno, ' (', @sqlstate, '): ', @text);
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG',CONCAT('ERROR conditions ', @conditions,' ',@full_error));
    ALTER EVENT event_routine ENABLE;
    SELECT @full_error AS ERROR;
    RESIGNAL;
  END;

  ALTER EVENT event_routine DISABLE;

  SET @start=NOW();
  SET @pid=FLOOR(RAND() * 9000) + 1000;
  INSERT INTO mars_log (cellserver, pid, duration, severity, message) 
  VALUES ('localhost', @pid, 0, 'Action', 'Database maintenance started');

  SELECT value INTO @purge_log_weeks FROM config_settings WHERE name='purge_log_weeks';
  SELECT value INTO @purge_objects_weeks FROM config_settings WHERE name='purge_objects_weeks';
  SELECT value INTO @purge_media_weeks FROM config_settings WHERE name='purge_media_weeks';
  SELECT value INTO @purge_sessions_weeks FROM config_settings WHERE name='purge_sessions_weeks';
  SELECT value INTO @backup_sessions FROM config_settings WHERE name='backup_sessions';

  INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#01 MAINTENANCE CONFIG');

	DROP TABLE IF EXISTS drop_table;
	DROP TABLE IF EXISTS temp_table;
	CREATE TABLE temp_table LIKE config_cellservers;
	INSERT INTO temp_table SELECT * FROM config_cellservers WHERE valid_until IS NULL ORDER BY name;
	RENAME TABLE config_cellservers TO drop_table,temp_table TO config_cellservers;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE config_customers;
	INSERT INTO temp_table SELECT * FROM config_customers WHERE valid_until IS NULL ORDER BY name;
	RENAME TABLE config_customers TO drop_table,temp_table TO config_customers;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE config_mediaservers;
	INSERT INTO temp_table SELECT * FROM config_mediaservers WHERE valid_until IS NULL ORDER BY name;
	RENAME TABLE config_mediaservers TO drop_table,temp_table TO config_mediaservers;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE config_retentions;
	INSERT INTO temp_table SELECT * FROM config_retentions WHERE valid_until IS NULL ORDER BY name;
	RENAME TABLE config_retentions TO drop_table,temp_table TO config_retentions;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE config_scheduler;
	INSERT INTO temp_table SELECT * FROM config_scheduler WHERE valid_until IS NULL ORDER BY name;
	RENAME TABLE config_scheduler TO drop_table,temp_table TO config_scheduler;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE config_timeperiods;
	INSERT INTO temp_table SELECT * FROM config_timeperiods WHERE valid_until IS NULL ORDER BY name;
	RENAME TABLE config_timeperiods TO drop_table,temp_table TO config_timeperiods;
	DROP TABLE drop_table;

	INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#02 MAINTENANCE DATAPROTECTOR');

	CREATE TABLE temp_table LIKE dataprotector_omnistat;
	INSERT INTO temp_table SELECT * FROM dataprotector_omnistat WHERE updated_on>(NOW()-INTERVAL 1 DAY) ORDER BY cellserver,sessionid;
	RENAME TABLE dataprotector_omnistat TO drop_table,temp_table TO dataprotector_omnistat;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_omnistat_devices;
	INSERT INTO temp_table SELECT s.* FROM dataprotector_omnistat_devices s WHERE 
		EXISTS (SELECT * FROM dataprotector_omnistat o WHERE o.cellserver=s.cellserver AND o.sessionid=s.sessionid) 
		ORDER BY s.cellserver,s.sessionid;
	RENAME TABLE dataprotector_omnistat_devices TO drop_table,temp_table TO dataprotector_omnistat_devices;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_omnistat_objects;
	INSERT INTO temp_table SELECT s.* FROM dataprotector_omnistat_objects s WHERE 
		EXISTS (SELECT * FROM dataprotector_omnistat o WHERE o.cellserver=s.cellserver AND o.sessionid=s.sessionid) 
		ORDER BY s.cellserver,s.sessionid;
	RENAME TABLE dataprotector_omnistat_objects TO drop_table,temp_table TO dataprotector_omnistat_objects;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_clients;
	INSERT INTO temp_table SELECT * FROM dataprotector_clients WHERE valid_until IS NULL ORDER BY cellserver,name;
	RENAME TABLE dataprotector_clients TO drop_table,temp_table TO dataprotector_clients;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_copylists;
	INSERT INTO temp_table SELECT * FROM dataprotector_copylists WHERE valid_until IS NULL ORDER BY cellserver,name;
	RENAME TABLE dataprotector_copylists TO drop_table;
	RENAME TABLE temp_table TO dataprotector_copylists;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_devices;
	INSERT INTO temp_table SELECT * FROM dataprotector_devices WHERE valid_until IS NULL ORDER BY library,name;
	RENAME TABLE dataprotector_devices TO drop_table,temp_table TO dataprotector_devices;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_libraries;
	INSERT INTO temp_table SELECT * FROM dataprotector_libraries WHERE valid_until IS NULL ORDER BY updated_by,name;
	RENAME TABLE dataprotector_libraries TO drop_table,temp_table TO dataprotector_libraries;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_media;
	INSERT INTO temp_table SELECT * FROM dataprotector_media WHERE valid_until IS NULL ORDER BY updated_by,mediumid;
	RENAME TABLE dataprotector_media TO drop_table,temp_table TO dataprotector_media;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_objects;
	INSERT INTO temp_table SELECT * FROM dataprotector_objects WHERE valid_until IS NULL ORDER BY cellserver,client,type,name;
	RENAME TABLE dataprotector_objects TO drop_table,temp_table TO dataprotector_objects;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_pools;
	INSERT INTO temp_table SELECT * FROM dataprotector_pools WHERE valid_until IS NULL ORDER BY updated_by,name;
	RENAME TABLE dataprotector_pools TO drop_table,temp_table TO dataprotector_pools;
	DROP TABLE drop_table;
	CREATE TABLE temp_table LIKE dataprotector_specifications;
	INSERT INTO temp_table SELECT * FROM dataprotector_specifications WHERE valid_until IS NULL ORDER BY cellserver,name;
	RENAME TABLE dataprotector_specifications TO drop_table,temp_table TO dataprotector_specifications;
	DROP TABLE drop_table;

	INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#03 MAINTENANCE MARS');

	CREATE TABLE temp_table LIKE mars_log;
	INSERT INTO temp_table SELECT * FROM mars_log WHERE timestamp >= (NOW() - INTERVAL @purge_log_weeks WEEK) ORDER BY timestamp;
	RENAME TABLE mars_log TO drop_table,temp_table TO mars_log;
	DROP TABLE drop_table;

	INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#04 MAINTENANCE DEVICES');

	CREATE TABLE temp_table LIKE dataprotector_session_devices;
	INSERT INTO temp_table SELECT * FROM dataprotector_session_devices WHERE (starttime >= (NOW() - INTERVAL @purge_sessions_weeks WEEK))
		ORDER BY cellserver,sessionid;
	RENAME TABLE dataprotector_session_devices TO drop_table,temp_table TO dataprotector_session_devices;
	DROP TABLE drop_table;

	INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#05 MAINTENANCE MEDIA');

	CREATE TABLE temp_table LIKE dataprotector_session_media;
	INSERT INTO temp_table SELECT * FROM dataprotector_session_media WHERE (lastused >= (NOW() - INTERVAL @purge_media_weeks WEEK))
		OR ((protection >= (NOW() - INTERVAL @purge_media_weeks WEEK))) 
		ORDER BY cellserver,sessionid;
	RENAME TABLE dataprotector_session_media TO drop_table,temp_table TO dataprotector_session_media;
	DROP TABLE drop_table;

	INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#06 MAINTENANCE OBJECTS');

	CREATE TABLE temp_table LIKE dataprotector_session_objects;
	INSERT INTO temp_table SELECT * FROM dataprotector_session_objects WHERE (starttime >= (NOW() - INTERVAL @purge_objects_weeks WEEK))
		OR ((protection >= (NOW() - INTERVAL @purge_objects_weeks WEEK))) 
		ORDER BY cellserver,sessionid;
	RENAME TABLE dataprotector_session_objects TO drop_table,temp_table TO dataprotector_session_objects;
	DROP TABLE drop_table;

	IF @backup_sessions in (1,'Y','T') THEN 
		INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#07 BACKUP SESSIONS');
		CREATE DATABASE IF NOT EXISTS mars_backup;
		CREATE TABLE IF NOT EXISTS mars_backup.dataprotector_sessions LIKE dataprotector_sessions;
		REPLACE INTO mars_backup.dataprotector_sessions
		  (SELECT s.* FROM dataprotector_sessions s WHERE (s.starttime<(NOW() - INTERVAL @purge_sessions_weeks WEEK))
		  AND NOT EXISTS (SELECT * FROM dataprotector_session_objects o 
		  WHERE o.cellserver=s.cellserver AND o.sessionid=s.sessionid)
		  ORDER BY starttime);
	END IF;
	INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#08 MAINTENANCE SESSIONS');

	CREATE TABLE temp_table LIKE dataprotector_sessions;
	INSERT INTO temp_table SELECT s.* FROM dataprotector_sessions s WHERE (s.starttime >= (NOW() - INTERVAL @purge_sessions_weeks WEEK))
		OR EXISTS (SELECT * FROM dataprotector_session_objects o WHERE o.cellserver=s.cellserver AND o.sessionid=s.sessionid) 
		OR EXISTS (SELECT * FROM dataprotector_session_devices d WHERE d.cellserver=s.cellserver AND d.sessionid=s.sessionid) 
		OR EXISTS (SELECT * FROM dataprotector_session_media m WHERE m.cellserver=s.cellserver AND m.sessionid=s.sessionid) 
		ORDER BY s.cellserver,s.sessionid;
	RENAME TABLE dataprotector_sessions TO drop_table,temp_table TO dataprotector_sessions;
	DROP TABLE drop_table;

  DELETE FROM mars_log WHERE cellserver='localhost' AND pid=@pid AND severity='DEBUG';
  SET @finish=NOW();
  SET @duration=TIMESTAMPDIFF(SECOND,@start,@finish);
  SET @result=CONCAT('Database maintenance finished in ',@duration,'s.');
  REPLACE INTO config_timers (name,start,end,duration) VALUES ('maintenance',@start,@finish,@duration);
  INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,@duration,'Action',@result);
  ALTER EVENT event_routine ENABLE;
  SELECT @result AS RESULT;
END ;;

DROP PROCEDURE IF EXISTS procedure_queue;;

CREATE DEFINER=root@'%' PROCEDURE procedure_queue(IN cellserver VARCHAR(64), IN action VARCHAR(64), IN data VARCHAR(128))
	LANGUAGE SQL
	NOT DETERMINISTIC
	CONTAINS SQL
	SQL SECURITY DEFINER
	COMMENT ''
BEGIN
IF cellserver='localhost' THEN
  INSERT INTO mars_queue (cellserver,name,data) 
    VALUES(cellserver,action,data)
    ON DUPLICATE KEY UPDATE timestamp=NOW(), executed_on=NULL;
ELSE
  INSERT INTO mars_queue (cellserver,name,data) 
    SELECT cs.name,action,data FROM config_cellservers cs 
    WHERE cs.name REGEXP cellserver
    ON DUPLICATE KEY UPDATE timestamp=NOW(), executed_on=NULL;
END IF;
END ;;

DROP PROCEDURE IF EXISTS procedure_routine;;

CREATE DEFINER=`root`@`%` PROCEDURE `procedure_routine`( IN `mode` VARCHAR(50))
	LANGUAGE SQL
	NOT DETERMINISTIC
	CONTAINS SQL
	SQL SECURITY DEFINER
	COMMENT ''
BEGIN
  DECLARE __done BOOLEAN DEFAULT FALSE;
  DECLARE __id INT;
  DECLARE __cellserver VARCHAR(32);
  DECLARE __customer VARCHAR(32);
  DECLARE __customer_specification VARCHAR(32);
  DECLARE __clients INT;
  DECLARE __specifications INT;
  DECLARE __sessions INT;
  DECLARE __bsr_sessions INT;
  DECLARE __errors INT;
  DECLARE __written DECIMAL(10,2);
  DECLARE __bsr DECIMAL(5,2);
  DECLARE cellservers CURSOR FOR SELECT id,name FROM config_cellservers WHERE valid_until IS NULL ORDER BY name;
  DECLARE customers CURSOR FOR SELECT id,name,specification FROM config_customers WHERE valid_until IS NULL ORDER BY name;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET __done := TRUE;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION
  BEGIN
    GET DIAGNOSTICS @conditions = NUMBER;  
    GET DIAGNOSTICS CONDITION @conditions @sqlstate = RETURNED_SQLSTATE, @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
    SET @full_error = CONCAT('ERROR ', @errno, ' (', @sqlstate, '): ', @text);
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG',CONCAT('ERROR conditions ', @conditions,' ',@full_error));
    ALTER EVENT event_routine ENABLE;
    SELECT @full_error AS ERROR;
    RESIGNAL;
  END;

  ALTER EVENT event_routine DISABLE;
  
  SET @start=NOW();
  IF mode='' THEN
    SET mode='Normal';
  END IF;
  IF UPPER(mode)='DAILY' THEN
    SET mode='Daily';
  END IF;
  SET @pid=FLOOR(RAND() * 9000) + 1000;
  INSERT INTO mars_log (cellserver,pid,duration,severity,message) 
  VALUES ('localhost',@pid,0,'Action',CONCAT(mode,' routine started'));

  INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#01 START');
  
  INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#02 CELLSERVERS LOOP');
  OPEN cellservers;
  CellserverLoop: LOOP
    FETCH cellservers INTO __id,__cellserver;
    IF __done THEN
      LEAVE CellserverLoop;
    END IF;
    SET @datetime_from=NOW() - INTERVAL 24 HOUR;
    SET @datetime_to=NOW();
    SELECT COUNT(DISTINCT name) INTO __clients FROM dataprotector_clients
      WHERE cellserver=__cellserver
      AND (valid_until > NOW() OR valid_until IS NULL);
    SELECT COUNT(*) INTO __specifications FROM _specifications WHERE cellserver=__cellserver;
    SELECT COUNT(*) INTO __sessions FROM _sessions_all WHERE cellserver=__cellserver;
    SELECT COUNT(*) INTO __errors FROM _log 
      WHERE cellserver=__cellserver AND severity IN ('Error') AND (timestamp > @datetime_from);
    SELECT COUNT(*),ROUND(AVG(bsr),1) INTO __bsr_sessions,__bsr FROM _sessions_aggregated WHERE cellserver=__cellserver;
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG',CONCAT('#02a CELLSERVER #',__id));
    UPDATE config_cellservers SET
      clients=IFNULL(__clients,0),specifications=IFNULL(__specifications,0),
      sessions_24h=IFNULL(__sessions,0),bsr_sessions_24h=IFNULL(__bsr_sessions,0),
      bsr_24h=__bsr,errors_24h=IFNULL(__errors,0)
      WHERE id=__id;
    IF mode='Daily' THEN
      SET @datetime_from=DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01');
      SET @datetime_to=DATE_FORMAT(CURRENT_DATE, '%Y-%m-01');
      SELECT COUNT(*) INTO __sessions FROM _sessions_all WHERE cellserver=__cellserver;
      SELECT COUNT(*),ROUND(AVG(bsr),2) INTO __bsr_sessions,__bsr FROM _sessions_aggregated WHERE cellserver=__cellserver;
      INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG',CONCAT('#02b DAILY CELLSERVER #',__id));
      UPDATE config_cellservers SET
        sessions_1m=IFNULL(__sessions,0),bsr_sessions_1m=IFNULL(__bsr_sessions,0),
        bsr_1m=__bsr 
        WHERE id=__id;
    END IF;
  END LOOP CellserverLoop;
  CLOSE cellservers;

  SET __done:=FALSE;
  INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#03 CUSTOMERS LOOP');
  OPEN customers;
  CustomerLoop: LOOP
    FETCH customers INTO __id,__customer,__customer_specification;
    IF __done THEN
      LEAVE CustomerLoop;
    END IF;
    SET @datetime_from=NOW() - INTERVAL 24 HOUR;
    SET @datetime_to=NOW();
    SET @customer=__customer;
    SELECT COUNT(DISTINCT name) INTO __clients FROM dataprotector_clients
      WHERE customer=__customer AND (valid_until > NOW() OR valid_until IS NULL);
    SELECT COUNT(*) INTO __specifications FROM _specifications;
    SELECT COUNT(*),SUM(gbwritten) INTO __sessions,__written FROM _sessions_all;
    SELECT COUNT(*),ROUND(AVG(bsr),1) INTO __bsr_sessions,__bsr FROM _sessions_aggregated;
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG',CONCAT('#3a CUSTOMER #',__id));
    UPDATE config_customers SET 
      clients=IFNULL(__clients,0),specifications=IFNULL(__specifications,0),
      sessions_24h=IFNULL(__sessions,0),bsr_sessions_24h=IFNULL(__bsr_sessions,0),
      bsr_24h=__bsr,gbwritten_24h=IFNULL(__written,0)
      WHERE id=__id;
      IF mode='Daily' THEN
        SET @datetime_from=DATE_FORMAT(CURRENT_DATE - INTERVAL 1 MONTH, '%Y-%m-01');
        SET @datetime_to=DATE_FORMAT(CURRENT_DATE, '%Y-%m-01');
        SELECT COUNT(*),ROUND(SUM(gbwritten)/1024,1) INTO __sessions,__written FROM _sessions_all;
        SELECT COUNT(*),ROUND(AVG(bsr),1) INTO __bsr_sessions,__bsr FROM _sessions_aggregated;
        INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG',CONCAT('#3b DAILY CUSTOMER #',__id));
        UPDATE config_customers SET
          sessions_1m=IFNULL(__sessions,0),bsr_sessions_1m=IFNULL(__bsr_sessions,0),
          bsr_1m=__bsr,tbwritten_1m=IFNULL(__written,0)
          WHERE id=__id;
      END IF;
    END LOOP CustomerLoop;
  CLOSE customers;
  SET @customer=NULL;

  IF mode='Daily' THEN
    SET @interval=NOW() - INTERVAL 3 DAY;
  ELSE
    SET @interval=NOW() - INTERVAL 1 DAY;
  END IF;  
  INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#04 SESSIONS');
  UPDATE dataprotector_sessions SET 
    restartof=function_restartof(cellserver,sessionid)
    WHERE scheduled=0
    AND starttime > @interval;

  IF mode='Daily' THEN
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#05 DAILY OBJECTS INSERT');
    INSERT INTO dataprotector_objects (cellserver,client,type,name,description,versions,oldest,newest) 
      (SELECT o.cellserver,o.client,o.type,function_mountpoint(o.type,o.mountpoint,o.description) AS name,o.description,
		  COUNT(o.id) AS versions,MIN(o.starttime) AS oldest,MAX(o.starttime) AS newest
        FROM dataprotector_session_objects o
        WHERE (o.protection>=@start)
        AND (o.description<>'Oracle8' OR (o.description='Oracle8' AND o.mountpoint NOT REGEXP 'c-'))
        GROUP BY 1,2,3,4,5)
      ON DUPLICATE KEY UPDATE versions=VALUES(versions),oldest=VALUES(oldest),newest=VALUES(newest),updated_on=@start,valid_until=NULL;
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#06 DAILY OBJECTS OBSOLETE');
    UPDATE dataprotector_objects SET versions=0,oldest=NULL,newest=NULL,valid_until=updated_on WHERE (valid_until IS NULL) AND (updated_on<(@start - INTERVAL 1 DAY));
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#07 DAILY CLIENTS INSERT');
    INSERT INTO dataprotector_clients (cellserver,name,type,mountpoints) 
      (SELECT o.cellserver,o.client AS name,o.type,count(o.id) AS mountpoints
        FROM dataprotector_objects o
        WHERE o.valid_until IS NULL
        GROUP BY o.cellserver,o.client,o.type)
      ON DUPLICATE KEY UPDATE mountpoints=VALUES(mountpoints),updated_on=@start,valid_until=NULL;
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#08 DAILY CLIENTS OBSOLETE');
     UPDATE dataprotector_clients SET specifications=0,mountpoints=0,valid_until=updated_on WHERE (valid_until IS NULL) AND (updated_on<(@start - INTERVAL 1 DAY));
     UPDATE dataprotector_clients c SET c.specifications=0,c.mountpoints=0,c.valid_until=c.updated_on 
      WHERE NOT EXISTS (SELECT o.id FROM dataprotector_objects o WHERE o.valid_until IS NULL AND o.cellserver=c.cellserver AND o.client=c.name AND o.type=c.type);
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#09 DAILY CLIENTS CUSTOMER');
    UPDATE dataprotector_clients c SET 
      c.customer=(SELECT s1.customer FROM dataprotector_specifications s1 
        WHERE (s1.valid_until IS NULL) AND (s1.hostnames REGEXP c.name) LIMIT 1),
      c.specifications=(SELECT count(s2.name) FROM dataprotector_specifications s2
        WHERE (s2.valid_until IS NULL) AND (s2.hostnames REGEXP c.name) AND (s2.specification REGEXP IF(c.type='BAR','BARLIST','DATALIST' )))
      WHERE c.valid_until IS NULL;
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#10 DAILY CLIENTS CUSTOMER FQDN');
    UPDATE dataprotector_clients c SET 
      c.customer=(SELECT cc.name FROM config_customers cc
        WHERE cc.valid_until IS NULL AND c.name REGEXP REPLACE(cc.fqdn,'.','\\.') LIMIT 1)
      WHERE (c.customer IS NULL) AND (c.valid_until IS NULL);
    INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,0,'DEBUG','#11 CLEANUP');
    DELETE FROM dataprotector_libraries WHERE updated_by NOT IN (SELECT name FROM config_cellservers WHERE mmd_local=1 AND valid_until IS NULL);
    DELETE FROM dataprotector_devices WHERE updated_by NOT IN (SELECT name FROM config_cellservers WHERE mmd_local=1 AND valid_until IS NULL);
    DELETE FROM dataprotector_pools WHERE updated_by NOT IN (SELECT name FROM config_cellservers WHERE mmd_local=1 AND valid_until IS NULL);
    DELETE FROM dataprotector_media WHERE updated_by NOT IN (SELECT name FROM config_cellservers WHERE mmd_local=1 AND valid_until IS NULL);
    DELETE FROM dataprotector_clients WHERE cellserver NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
    DELETE FROM dataprotector_objects WHERE cellserver NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
    DELETE FROM dataprotector_objects WHERE client NOT IN (SELECT name FROM dataprotector_clients WHERE valid_until IS NULL);
    DELETE FROM dataprotector_copylists WHERE cellserver NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
    DELETE FROM dataprotector_specifications WHERE cellserver NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
    DELETE FROM dataprotector_omnistat WHERE cellserver NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
    DELETE FROM dataprotector_locked_objects WHERE host NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
    DELETE FROM dataprotector_sessions WHERE cellserver NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
    DELETE FROM mars_log WHERE cellserver<>'localhost' and cellserver NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
    DELETE FROM mars_queue WHERE cellserver NOT IN (SELECT name FROM config_cellservers WHERE valid_until IS NULL);
  END IF;
  delete d from dataprotector_omnistat_devices d left join dataprotector_omnistat o using (cellserver,sessionid) where o.sessionid is null;
  delete d from dataprotector_omnistat_objects d left join dataprotector_omnistat o using (cellserver,sessionid) where o.sessionid is null;
  DELETE FROM mars_log WHERE cellserver='localhost' AND pid=@pid AND severity='DEBUG';
  SET @finish=NOW();
  SET @duration=TIMESTAMPDIFF(SECOND,@start,@finish);
  SET @result=CONCAT(mode,' routine finished in ',@duration,'s.');
  REPLACE INTO config_timers (name,start,end,duration) VALUES (CONCAT(mode,'_routine'),@start,@finish,@duration);
  INSERT INTO mars_log (cellserver,pid,duration,severity,message) VALUES ('localhost',@pid,@duration,'Action',@result);
  ALTER EVENT event_routine ENABLE;
  SELECT @result AS RESULT;
END ;;

DELIMITER ;

DROP VIEW IF EXISTS _copylists;
CREATE ALGORITHM = MERGE DEFINER=root@`%` SQL SECURITY DEFINER VIEW _copylists AS 
SELECT c.cellserver AS cellserver,
	c.name AS name,
	c.customer AS customer,
	c.protection AS protection,
	c.periodicity AS periodicity,
	c.dl_group AS dl_group,
	LENGTH(c.datalists) - LENGTH(REPLACE(c.datalists, '\n', '')) + 1 as dlcount,
	c.datalists AS datalists,
	LENGTH(c.devices) - LENGTH(REPLACE(c.devices, '\n', '')) + 1 as devicecount, 
	c.devices AS devices,
	c.nextexecution AS nextexecution,
	c.copylist AS copylist,
	c.schedule AS schedule 
	FROM (dataprotector_copylists c) 
	WHERE (ISNULL(c.valid_until)) 
	ORDER BY c.nextexecution DESC 
;

DROP VIEW IF EXISTS _locked_objects;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _locked_objects AS 
	SELECT lo.host AS host,
	lo.pid AS pid,
	lo.type AS type,
	lo.name AS name,
	lo.label AS label,
	lo.location AS location 
	FROM dataprotector_locked_objects lo 
	ORDER BY lo.host,lo.pid,lo.type,lo.name 
;

DROP VIEW IF EXISTS _media;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _media AS 
	SELECT m.updated_by AS cellserver,
	m.mediumid AS mediumid,
	m.label AS label,
	m.pool AS pool,
	m.location AS location,
	m.owner AS owner,
	m.wp AS wp,
	m.status AS status,
	ROUND((m.kbused / 1048576),1) AS gbused,
	ROUND((m.kbtotal / 1048576),1) AS gbtotal,
	ROUND((m.kbusable / 1048576),1) AS gbusable,
	m.writes AS writes,
	m.overwrites AS overwrites,
	m.errors AS errors,
	m.initialized AS initialized,
	m.protected AS protected,
	m.lastwrite AS lastwrite,
	m.lastaccess AS lastaccess,
	m.lastoverwrite AS lastoverwrite 
	FROM dataprotector_media m 
	WHERE ISNULL(m.valid_until) 
	ORDER BY m.updated_by,m.label 
;

DROP VIEW IF EXISTS _pools;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _pools AS 
	SELECT p.updated_by AS cellserver,
	max(c.name) AS customer,
	p.name AS name,
	p.description AS description,
	p.type AS type,
	s.description AS mtype,
	ROUND((p.mbused / 1024),1) AS gbused,
	ROUND((p.mbtotal / 1024),1) AS gbtotal,
	p.media AS media,
	p.poor AS poor,
	p.fair AS fair 
	FROM ((dataprotector_pools p 
	LEFT JOIN config_customers c ON((p.name REGEXP c.specification))) 
	LEFT JOIN config_settings s ON(((UCASE(s.name) IN ('POOL_PHYSICAL','POOL_VIRTUAL')) AND (p.name REGEXP s.value)))) 
	WHERE ISNULL(p.valid_until) 
	GROUP BY p.updated_by,p.name 
	ORDER BY p.updated_by,c.name,p.name 
;

DROP VIEW IF EXISTS _queue;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _queue AS 
SELECT q.cellserver AS cellserver,
	q.timestamp AS timestamp,
	q.name AS name,
	q.data AS data,
	q.valid_from AS valid_from,
	q.valid_until AS valid_until,
	q.executed_on AS executed_on 
	FROM mars_queue q 
	ORDER BY q.executed_on desc,q.timestamp 
;

DROP VIEW IF EXISTS _specifications;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _specifications AS 
	SELECT s.cellserver AS cellserver,
	s.dpgroup AS dpgroup,
	s.name AS name,
	s.customer AS customer,
	s.retention AS retention,
	s.protection AS protection,
	s.periodicity AS periodicity,
	s.type AS type,
	s.hosts AS hosts,
	s.hostnames AS hostnames,
	s.nextexecution AS nextexecution,
	s.lastsessionid AS lastsessionid,
	s.lastsuccessfulsessionid AS lastsuccessfulsessionid,
	s1.duration AS duration,
	s1.gbwritten AS gbwritten,
	s.failure AS failure,
	s.success AS success,
	s.specification AS specification,
	s.schedule AS schedule 
	FROM (dataprotector_specifications s 
	LEFT JOIN dataprotector_sessions s1 ON(((s1.cellserver = s.cellserver) AND (s1.sessionid = s.lastsuccessfulsessionid)))) 
	WHERE (ISNULL(s.valid_until) 
	AND ((function_customer() IS NULL) OR (s.customer=function_customer()))) 
	ORDER BY s.nextexecution DESC 
;

DROP VIEW IF EXISTS _groups;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _groups AS 
SELECT cellserver,customer,dpgroup,count(name) as specifications 
	FROM _specifications 
	GROUP BY cellserver,customer,dpgroup
	ORDER BY cellserver,customer,dpgroup
;

DROP VIEW IF EXISTS _omnistat;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _omnistat AS 
	SELECT o.cellserver AS cellserver,
	o.sessionid AS sessionid,
	o.type AS type,
	o.status AS status,
	o.sessionowner AS sessionowner,
	o.specification AS specification,
	o.starttime AS starttime,
	timediff(NOW(),o.starttime) AS duration,
	s.duration AS last,
	ROUND(((100 * time_to_sec(timediff(NOW(),o.starttime))) / time_to_sec(s.duration)),1) AS current,
	o.devices AS devices,
	o.active_devices AS active_devices,
	o.ad_delta AS ad_delta,
	ROUND((o.done / 1048576),1) AS gbdone,
	ROUND((o.done_delta / 1048576),1) AS done_delta,
	o.objects AS objects,
	o.active_objects AS active_objects,
	o.ao_delta AS ao_delta,
	ROUND((o.total_size / 1048576),1) AS gbtotal,
	ROUND((o.processed_size / 1048576),1) AS gbprocessed,
	ROUND((o.ps_delta / 1048576),1) AS ps_delta 
	FROM (dataprotector_omnistat o 
	LEFT JOIN _specifications s ON(((s.cellserver = o.cellserver) AND (s.name = o.specification)))) 
	ORDER BY o.starttime DESC 
;

DROP VIEW IF EXISTS _session_objects;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _session_objects AS 
	SELECT so.cellserver AS cellserver,
	so.sessionid AS sessionid,
	so.type AS type,
	so.client AS client,
	so.mountpoint AS mountpoint,
	so.description AS description,
	so.status AS status,
	so.starttime AS starttime,
	so.endtime AS endtime,
	so.duration AS duration,
	so.kbwritten AS kbwritten,
	so.files AS files,
	so.performance AS performance,
	so.protection AS protection,
	so.errors AS errors,
	so.warnings AS warnings,
	so.device AS device 
	FROM dataprotector_session_objects so
	ORDER BY so.starttime DESC 
;

DROP VIEW IF EXISTS _sessions;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _sessions AS 
	SELECT s1.cellserver AS cellserver,
	s1.sessionid AS sessionid,
	IF((s1.scheduled = 1),'S',IF((s1.restartof = ''),'A','R')) AS sar,
	s1.restartof AS restartof,
	s1.specification AS specification,
	s2.customer AS customer,
	s2.retention AS retention,
	s2.periodicity AS periodicity,
	s2.type AS type,
	CAST(left(s1.success, length(s1.success) - 1) AS unsigned) AS bsr,
	s1.sessionowner AS sessionowner,
	s1.status AS status,
	s1.mode AS mode,
	s1.starttime AS starttime,
	s1.endtime AS endtime,
	s1.queuing AS queuing,
	s1.duration AS duration,
	s1.gbwritten AS gbwritten,
	s1.media AS media,
	s1.errors AS errors,
	s1.warnings AS warnings,
	s1.pendingda AS pendingda,
	s1.runningda AS runningda,
	s1.failedda AS failedda,
	s1.completedda AS completedda,
	s1.objects AS objects,
	s1.success AS success 
	FROM (dataprotector_sessions s1 
	LEFT JOIN dataprotector_specifications s2 ON(((s2.cellserver = s1.cellserver) AND (s2.name = s1.specification)))) 
	ORDER BY s1.starttime DESC 
;

DROP VIEW IF EXISTS _sessions_all;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _sessions_all AS 
	SELECT s1.cellserver AS cellserver,
	s1.sessionid AS sessionid,
	s1.sar AS sar,
	s1.restartof AS restartof,
	s1.specification AS specification,
	s1.customer AS customer,
	s1.retention AS retention,
	s1.periodicity AS periodicity,
	s1.type AS type,
	s1.bsr AS bsr,
	s1.sessionowner AS sessionowner,
	s1.status AS status,
	s1.mode AS mode,
	s1.starttime AS starttime,
	s1.endtime AS endtime,
	s1.queuing AS queuing,
	s1.duration AS duration,
	s1.gbwritten AS gbwritten,
	s1.media AS media,
	s1.errors AS errors,
	s1.warnings AS warnings,
	s1.pendingda AS pendingda,
	s1.runningda AS runningda,
	s1.failedda AS failedda,
	s1.completedda AS completedda,
	s1.objects AS objects,
	s1.success AS success 
	FROM _sessions s1 
	WHERE ((s1.starttime BETWEEN function_from() AND function_to()) 
	AND ((function_customer() IS NULL) OR (s1.customer=function_customer()))) 
;

DROP VIEW IF EXISTS _backup_retained_customer;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _backup_retained_customer AS 
	SELECT c.name AS customer,
	s.description AS mtype,
	COUNT(m.label) AS media,
	ROUND((SUM(m.gbused) / 1024),1) AS tbused,
	ROUND((SUM(m.gbtotal) / 1024),1) AS tbtotal 
	FROM ((_media m 
	LEFT JOIN config_customers c ON((m.pool REGEXP c.specification))) 
	LEFT JOIN config_settings s ON(((UCASE(s.name) IN ('POOL_PHYSICAL','POOL_VIRTUAL')) AND (m.pool REGEXP s.value)))) 
	WHERE ((m.protected >= NOW()) 
	AND ((function_customer() IS NULL) OR (c.name=function_customer()))) 
	GROUP BY c.name,s.description 
	ORDER BY c.name,s.description
;

DROP VIEW IF EXISTS _backup_volume_cellserver;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _backup_volume_cellserver AS 
SELECT sa.cellserver AS cellserver,
	COUNT(sa.sessionid) AS sessions,
	ROUND((SUM(sa.gbwritten) / 1024),1) AS tbwritten 
	FROM _sessions_all sa 
	GROUP BY sa.cellserver
	ORDER BY sa.cellserver 
;

DROP VIEW IF EXISTS _backup_volume_customer;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _backup_volume_customer AS 
	SELECT sa.customer AS customer,
	COUNT(sa.sessionid) AS sessions,
	ROUND((SUM(sa.gbwritten) / 1024),1) AS tbwritten 
	FROM _sessions_all sa 
	WHERE (function_customer() IS NULL) OR (sa.customer=function_customer()) 
	GROUP BY sa.customer 
	ORDER BY sa.customer 
;

DROP VIEW IF EXISTS _backup_volume_customer_host;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _backup_volume_customer_host AS 
	SELECT s.customer AS customer,
	IF(LOCATE('-b.',s1.hostnames),LEFT(s1.hostnames,(LOCATE('-b.',s1.hostnames) - 1)),IF(LOCATE('.',s1.hostnames),LEFT(s1.hostnames,(LOCATE('.',s1.hostnames) - 1)),s1.hostnames)) AS host,
	s.type AS type,
	COUNT(s.sessionid) AS sessions,
	SUM(s.gbwritten) AS gbwritten 
	FROM (_sessions_all s 
	LEFT JOIN _specifications s1 ON(((s1.cellserver = s.cellserver) AND (s1.name = s.specification)))) 
	WHERE (function_customer() IS NULL) OR (s.customer=function_customer()) 
	GROUP BY 1,2,3 
	ORDER BY 1,2,3 
;

DROP VIEW IF EXISTS _clients;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _clients AS 
	SELECT c.cellserver AS cellserver,
	c.customer AS customer,
	c.name AS name,
	c.type AS type,
	c.specifications AS specifications,
	c.mountpoints AS mountpoints 
	FROM dataprotector_clients c 
	WHERE (ISNULL(c.valid_until) 
	AND ((function_customer() IS NULL) OR (c.customer=function_customer()))) 
	ORDER BY c.name,c.type 
;

DROP VIEW IF EXISTS _cellservers;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _cellservers AS 
	SELECT cs.name AS name,
	cs.mmd_local AS mmd_local,
	cs.timezone AS timezone,
	cs.os AS os,
	cs.host AS host,
	cs.php AS php,
	cs.dp AS dp,
	cs.maintenance AS maintenance,
	cs.active AS processes_active,
	cs.down AS processes_down,
	timediff(cs.localtime,cs.updated_on) as `localtime`,
	timediff(NOW(),cs.updated_on) AS last_updated,
	(SELECT COUNT(0) FROM _queue q WHERE (q.cellserver = cs.name)) AS queue,
	(SELECT COUNT(0) FROM _omnistat o WHERE (o.cellserver = cs.name)) AS running_sessions,
	(SELECT COUNT(0) FROM _locked_objects l WHERE (l.host = cs.name)) AS locked_objects,
	cs.clients AS clients,
	(SELECT CAST(COUNT(DISTINCT cl.name) AS unsigned) FROM _clients cl WHERE ((cl.cellserver = cs.name) AND (cl.type <> 'BAR'))) AS fsclients,
	(SELECT CAST(COUNT(DISTINCT cl.name) AS unsigned) FROM _clients cl WHERE ((cl.cellserver = cs.name) AND (cl.type = 'BAR'))) AS barclients,
	(SELECT CAST(SUM(cl.mountpoints) AS unsigned) FROM _clients cl WHERE cl.cellserver = cs.name) AS objects,
	(SELECT CAST(SUM(cl.mountpoints) AS unsigned) FROM _clients cl WHERE ((cl.cellserver = cs.name) AND (cl.type <> 'BAR'))) AS fsobjects,
	(SELECT CAST(SUM(cl.mountpoints) AS unsigned) FROM _clients cl WHERE ((cl.cellserver = cs.name) AND (cl.type = 'BAR'))) AS barobjects,
	cs.specifications AS specifications,
	cs.sessions_24h AS sessions_24h,
	cs.bsr_sessions_24h AS bsr_sessions_24h,
	cs.bsr_24h AS bsr_24h,
	cs.sessions_1m AS sessions_1m,
	cs.bsr_sessions_1m AS bsr_sessions_1m,
	cs.bsr_1m AS bsr_1m,
	cs.errors_24h AS errors_24h 
	FROM config_cellservers cs 
	WHERE ISNULL(cs.valid_until) 
	ORDER BY cs.name
;

DROP VIEW IF EXISTS _consecutive_failures;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _consecutive_failures AS 
	SELECT spec.cellserver AS cellserver,
	spec.customer AS customer,
	spec.name AS specification,
	spec.retention AS retention,
	spec.type AS type,
	IF(ISNULL(spec.nextexecution),'No','Yes') AS scheduled,
	spec.lastsessionid AS lastfailure,
	spec.lastsuccessfulsessionid AS lastsuccess,
	spec.failure AS failures 
	FROM _specifications spec 
	WHERE ((spec.failure > 1) 
	AND (spec.retention NOT IN ('General','Excluded')) 
	AND ((function_customer() IS NULL) OR (spec.customer=function_customer()))) 
	ORDER BY spec.failure DESC 
;

DROP VIEW IF EXISTS _customers;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _customers AS 
	SELECT c.name AS customer,
	c.clients AS clients,
	(SELECT CAST(COUNT(DISTINCT cl.name) AS unsigned) FROM _clients cl WHERE ((cl.customer = c.name) AND (cl.type <> 'BAR'))) AS fsclients,
	(SELECT CAST(COUNT(DISTINCT cl.name) AS unsigned) FROM _clients cl WHERE ((cl.customer = c.name) AND (cl.type = 'BAR'))) AS barclients,
	(SELECT CAST(SUM(cl.mountpoints) AS unsigned) FROM _clients cl WHERE cl.customer = c.name) AS objects,
	(SELECT CAST(SUM(cl.mountpoints) AS unsigned) FROM _clients cl WHERE ((cl.customer = c.name) AND (cl.type <> 'BAR'))) AS fsobjects,
	(SELECT CAST(SUM(cl.mountpoints) AS unsigned) FROM _clients cl WHERE ((cl.customer = c.name) AND (cl.type = 'BAR'))) AS barobjects,
	c.specifications AS specifications,
	(SELECT COUNT(p.name) FROM _pools p WHERE (p.customer = c.name)) AS pools,
	c.sessions_24h AS sessions_24h,
	c.bsr_sessions_24h AS bsr_sessions_24h,
	c.bsr_24h AS bsr_24h,
	c.gbwritten_24h AS gbwritten_24h,
	c.sessions_1m AS sessions_1m,
	c.bsr_sessions_1m AS bsr_sessions_1m,
	c.bsr_1m AS bsr_1m,
	c.tbwritten_1m AS tbwritten_1m,
	(SELECT ROUND((SUM(p.gbused) / 1024),1) FROM _pools p WHERE ((p.customer = c.name) AND (p.mtype REGEXP 'physical'))) AS tbretained 
	FROM config_customers c 
	WHERE (ISNULL(c.valid_until) 
	AND ((function_customer() IS NULL) OR (c.name=function_customer()))) 
	ORDER BY c.name
;

DROP VIEW IF EXISTS _devices;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _devices AS 
	SELECT d.updated_by AS cellserver,
	d.library AS library,
	d.lockname AS lockname,
	d.name AS name,
	d.disable AS disable,
	d.description AS description,
	d.host AS host,
	d.pool AS pool,
	d.blksize AS blksize,
	d.devserial AS devserial 
	FROM dataprotector_devices d 
	WHERE ISNULL(d.valid_until) 
	ORDER BY d.updated_by,d.library,d.name 
;

DROP VIEW IF EXISTS _device_utilization;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _device_utilization AS 
	SELECT s2.starttime AS starttime,
	s2.duration AS duration,
	s2.endtime AS endtime,
	d.library AS library,
	d.lockname AS lockname,
	s2.device AS device,
	s2.gbwritten AS gbwritten,
	s2.performance AS performance,
	s2.cellserver AS cellserver,
	s1.sessionid AS sessionid,
	s1.specification AS specification 
	FROM ((dataprotector_sessions s1 
	JOIN dataprotector_session_devices s2) 
	JOIN dataprotector_devices d) 
	WHERE ((s1.cellserver = s2.cellserver) 
	AND (s1.sessionid = s2.sessionid) 
	AND (d.name = s2.device) 
	AND (s1.starttime BETWEEN function_from() AND function_to())) 
	ORDER BY s2.starttime,s2.device 
;

DROP VIEW IF EXISTS _did_not_run;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _did_not_run AS 
	SELECT s.cellserver AS cellserver,
	s.customer AS customer,
	s.name AS specification,
	s.retention AS retention,
	s.type AS type,
	s.periodicity AS periodicity,
	IF(ISNULL(NULLIF(s.schedule,'')),'missing',IF((s.schedule REGEXP 'disabled'),'disabled','enabled')) AS schedule,
	s.lastsessionid AS sessionid,
	IF(ISNULL(s.lastsessionid),999,(TO_DAYS(curdate()) - TO_DAYS(h.starttime))) AS daysago 
	FROM (_specifications s 
	LEFT JOIN _sessions h ON(((h.cellserver = s.cellserver) AND (h.sessionid = s.lastsessionid)))) 
	WHERE ((s.retention <> 'Excluded') 
	AND (IF(ISNULL(s.lastsessionid),'999',(TO_DAYS(curdate()) - TO_DAYS(h.starttime))) > (s.periodicity + 1)) 
	AND ((function_customer() IS NULL) OR (s.customer=function_customer()))) 
	ORDER BY 9 DESC,s.cellserver,s.customer,s.name 
;

DROP VIEW IF EXISTS _libraries;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _libraries AS 
	SELECT l.updated_by AS cellserver,
	l.name AS name,
	(SELECT COUNT(0) FROM _devices d WHERE ((d.cellserver = l.updated_by) AND (d.library = l.name))) AS devices,
	l.description AS description,
	l.host AS host,
	l.ioctlserial AS ioctlserial,
	l.control AS control 
	FROM dataprotector_libraries l 
	WHERE ISNULL(l.valid_until) 
	ORDER BY l.updated_by,l.name 
;

DROP VIEW IF EXISTS _log;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _log AS 
	SELECT l.cellserver AS cellserver,
	l.timestamp AS timestamp,
	l.pid AS pid,
	l.duration AS duration,
	l.severity AS severity,
	l.message AS message 
	FROM mars_log l 
	ORDER BY l.timestamp DESC 
;

DROP VIEW IF EXISTS _objects;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _objects AS 
	SELECT c.customer AS customer,
	o.cellserver AS cellserver,
	o.client AS client,
	o.type AS type,
	o.name AS name,
	o.description AS description,
	o.versions AS versions,
	o.oldest AS oldest,
	o.newest AS newest 
	FROM (dataprotector_objects o 
	LEFT JOIN _clients c ON(((o.cellserver = c.cellserver) AND (o.client = c.name) AND (o.type = c.type)))) 
	WHERE (ISNULL(o.valid_until) 
	AND ((function_customer() IS NULL) OR (c.customer=function_customer()))) 
	ORDER BY o.cellserver,o.client,o.type,o.name 
;

DROP VIEW IF EXISTS _object_versions;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _object_versions AS 
	SELECT c.customer AS customer,
	o.cellserver AS cellserver,
	o.client AS client,
	o.type AS type,
	o.mountpoint AS mountpoint,
	o.description AS description,
	o.sessionid AS sessionid,
	o.status AS status,
	o.starttime AS starttime,
	o.kbwritten AS kbwritten,
	o.protection AS protection 
	FROM (_session_objects o 
	LEFT JOIN _clients c ON(((o.cellserver = c.cellserver) AND (o.client = c.name) AND (o.type = c.type)))) 
	WHERE ((o.protection > NOW()) 
	AND ((function_customer() IS NULL) OR (c.customer=function_customer()))) 
	ORDER BY c.customer,o.client,o.type,o.mountpoint,o.starttime DESC 
;

DROP VIEW IF EXISTS _offload_scratch_tapes;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _offload_scratch_tapes AS 
	SELECT m.pool AS pool,
	SUBSTR(m.label,(LOCATE('[',m.label) + 1),2) AS prefix,
	SUBSTR(m.label,(LOCATE('[',m.label) + 1),(LOCATE(']',m.label) - 2)) AS barcode,
	m.location AS location,
	m.status AS status 
	FROM (((dataprotector_media m 
	LEFT JOIN dataprotector_libraries l ON((m.location REGEXP CONCAT(l.name,':')))) 
	LEFT JOIN config_settings s ON(((UCASE(s.name) = 'POOL_PHYSICAL') AND (m.pool REGEXP s.value)))) 
	LEFT JOIN dataprotector_pools p ON((m.pool = p.name))) 
	WHERE (ISNULL(m.valid_until) 
	AND (m.updated_on > (NOW() - INTERVAL 24 HOUR)) 
	AND (s.description IS NOT NULL) 
	AND ISNULL(l.name) 
	AND (p.policy REGEXP 'FREE POOL')) 
	ORDER BY m.pool,2,m.lastwrite 
;

DROP VIEW IF EXISTS _offload_used_tapes;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _offload_used_tapes AS 
	SELECT l.name AS library,
	IF((m.kbused = m.kbtotal),'yes','no') AS full,
	m.pool AS pool,
	SUBSTR(m.label,(LOCATE('[',m.label) + 1),(LOCATE(']',m.label) - 2)) AS barcode,
	m.location AS location,
	m.status AS status 
	FROM (((dataprotector_media m 
	LEFT JOIN dataprotector_libraries l ON((m.location REGEXP CONCAT(l.name,':')))) 
	LEFT JOIN config_settings s ON(((UCASE(s.name) = 'POOL_PHYSICAL') AND (m.pool REGEXP s.value)))) 
	LEFT JOIN config_settings s1 ON(((UCASE(s1.name) = 'POOL_NO_OFFLOAD') AND (m.pool REGEXP s1.value)))) 
	WHERE (ISNULL(m.valid_until) 
	AND (m.kbused = m.kbtotal) 
	AND (m.updated_on > (NOW() - INTERVAL 24 HOUR)) 
	AND (m.protected > (NOW() + INTERVAL 28 day)) 
	AND (s.description IS NOT NULL) 
	AND (l.name IS NOT NULL) 
	AND ISNULL(s1.description)) 
	ORDER BY l.name,2 DESC,m.pool,m.label 
;

DROP VIEW IF EXISTS _omnistat_devices;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _omnistat_devices AS 
	SELECT od.cellserver AS cellserver,
	od.sessionid AS sessionid,
	od.name AS name,
	dd.lockname AS lockname,
	dd.library AS library,
	od.host AS host,
	od.started AS started,
	od.finished AS finished,
	ROUND((od.done / 1048576),1) AS gbdone,
	od.physical_device AS physical_device,
	od.status AS status 
	FROM (dataprotector_omnistat_devices od 
	LEFT JOIN dataprotector_devices dd ON((dd.name = od.name))) 
	ORDER BY od.started DESC 
;

DROP VIEW IF EXISTS _omnistat_objects;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _omnistat_objects AS 
	SELECT oo.cellserver AS cellserver,
	oo.sessionid AS sessionid,
	oo.name AS name,
	oo.type AS type,
	oo.started AS started,
	oo.finished AS finished,
	oo.runlevel AS runlevel,
	oo.warnings AS warnings,
	oo.errors AS errors,
	oo.total_files AS total_files,
	oo.processed_files AS processed_files,
	ROUND((oo.processed_size / 1048576),1) AS gbprocessed_size,
	oo.device AS device,
	oo.status AS status 
	FROM dataprotector_omnistat_objects oo 
	ORDER BY oo.started DESC 
;

DROP VIEW IF EXISTS _processes;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _processes AS 
SELECT pl.ID AS ID,
	pl.USER AS USER,
	pl.HOST AS HOST,
	pl.DB AS DB,
	pl.COMMAND AS COMMAND,
	pl.TIME AS TIME,
	pl.STATE AS STATE,
	pl.INFO AS INFO 
	FROM information_schema.processlist pl 
	WHERE (pl.COMMAND<>'Daemon') AND (ISNULL(pl.INFO) 
	OR (NOT((pl.INFO REGEXP 'process')))) 
;

DROP VIEW IF EXISTS _scheduler;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _scheduler AS 
SELECT cs.*
	FROM config_scheduler cs 
	WHERE ISNULL(cs.valid_until) 
	AND DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 5 SECOND),'%a %d. %b %Y') REGEXP IFNULL(cs.date,'.*')
	ORDER BY cs.date,cs.time,cs.type,cs.name
;

DROP VIEW IF EXISTS _sessions_aggregated;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _sessions_aggregated AS 
SELECT s1.cellserver AS cellserver,
	s1.sessionid AS sessionid,
	s1.status AS istatus,
	CAST(s1.success AS unsigned) AS ibsr,
	COUNT(s3.sessionid) AS restarts,
	GROUP_CONCAT(s3.sessionid ORDER BY s3.starttime ASC separator ',') AS sessionids,
	IFNULL(SUBSTRING_INDEX(GROUP_CONCAT(s3.status ORDER BY s3.starttime DESC separator ','),',',1),s1.status) AS status,
	CAST(IFNULL(SUBSTRING_INDEX(GROUP_CONCAT(s3.success ORDER BY s3.starttime DESC separator ','),'%',1),s1.success) AS unsigned) AS bsr,
	s2.customer AS customer,
	s2.retention AS retention,
	s2.type AS type,
	s1.specification AS specification,
	DATE(FROM_UNIXTIME(UNIX_TIMESTAMP(s1.starttime)-TIME_TO_SEC(s.value))) AS bw_day,
	s1.starttime AS starttime,
	s1.duration AS duration,
	max(s3.starttime) AS laststarttime,
	CAST(SUBSTRING_INDEX(GROUP_CONCAT(s3.duration ORDER BY s3.starttime DESC separator ','),',',1) AS time) AS lastduration,
	(s1.gbwritten + SUM(IFNULL(s3.gbwritten,0))) AS gbwritten,
	CAST((s1.media + SUM(IFNULL(s3.media,0))) AS unsigned) AS media,
	CAST((s1.errors + SUM(IFNULL(s3.errors,0))) AS unsigned) AS errors,
	CAST((s1.warnings + SUM(IFNULL(s3.warnings,0))) AS unsigned) AS warnings,
	CAST((s1.pendingda + SUM(IFNULL(s3.pendingda,0))) AS unsigned) AS pendingda,
	CAST((s1.runningda + SUM(IFNULL(s3.runningda,0))) AS unsigned) AS runningda,
	CAST((s1.failedda + SUM(IFNULL(s3.failedda,0))) AS unsigned) AS failedda,
	CAST((s1.completedda + SUM(IFNULL(s3.completedda,0))) AS unsigned) AS completedda,
	CAST((s1.objects + SUM(IFNULL(s3.objects,0))) AS unsigned) AS objects 
	FROM ((dataprotector_sessions s1 
	LEFT JOIN dataprotector_specifications s2 ON(((s2.cellserver = s1.cellserver) AND (s2.name = s1.specification)))) 
	LEFT JOIN dataprotector_sessions s3 ON(((s3.cellserver = s1.cellserver) AND (s3.restartof = s1.sessionid)))
	LEFT JOIN config_settings s ON(s.name='bw_start')) 
	WHERE ((s1.scheduled = 1) 
	AND (s1.starttime BETWEEN function_from() AND function_to()) 
	AND (s2.retention NOT IN ('General','Excluded')) 
	AND ((function_customer() IS NULL) OR (s2.customer=function_customer()))) 
	GROUP BY s1.cellserver,s1.sessionid 
	ORDER BY s1.starttime DESC 
;

DROP VIEW IF EXISTS _sessions_review;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _sessions_review AS 
	SELECT COALESCE(IF((_sessions_aggregated.cellserver REGEXP 'IDPCP01'),'EU','WW'),'TOTAL') AS support,
	COALESCE(IF(((_sessions_aggregated.type = 'SAP') OR (_sessions_aggregated.specification REGEXP 'EAO_')),'EAO','GOC'),'TOTAL') AS tower,
	COALESCE(_sessions_aggregated.cellserver,'TOTAL') AS cellserver,
	COUNT(_sessions_aggregated.sessionid) AS bsrsessions,
	CAST(SUM(IF((_sessions_aggregated.bsr = 100),1,0)) AS unsigned) AS bsrsuccess,
	CAST(SUM(IF((_sessions_aggregated.bsr < 100),1,0)) AS unsigned) AS bsrfailed,
	ROUND(((100 * SUM(IF((_sessions_aggregated.bsr = 100),1,0))) / COUNT(_sessions_aggregated.sessionid)),2) AS bsr,
	CAST(SUM(IF(((_sessions_aggregated.restarts = 0) AND (_sessions_aggregated.bsr = 100)),1,0)) AS unsigned) AS 1stsuccess,
	CAST(SUM(IF((((_sessions_aggregated.restarts = 0) AND (_sessions_aggregated.bsr < 100)) OR (_sessions_aggregated.restarts > 0)),1,0)) AS unsigned) AS 1stfailed,
	ROUND(((100 * SUM(IF(((_sessions_aggregated.restarts = 0) AND (_sessions_aggregated.bsr = 100)),1,0))) / COUNT(_sessions_aggregated.sessionid)),2) AS 1stbsr,
	CAST(SUM(IF((_sessions_aggregated.restarts > 0),1,0)) AS unsigned) AS restarted,
	CAST(SUM(IF(((_sessions_aggregated.restarts = 0) AND (_sessions_aggregated.bsr < 100)),1,0)) AS unsigned) AS notrestarted,
	ROUND(((100 * SUM(IF((_sessions_aggregated.restarts > 0),1,0))) / SUM(IF((((_sessions_aggregated.restarts = 0) AND (_sessions_aggregated.bsr < 100)) OR (_sessions_aggregated.restarts > 0)),1,0))),2) AS restartrate,
	CAST(SUM(IF(((_sessions_aggregated.restarts > 0) AND (_sessions_aggregated.bsr = 100)),1,0)) AS unsigned) AS restartsuccess,
	CAST(SUM(IF(((_sessions_aggregated.restarts > 0) AND (_sessions_aggregated.bsr < 100)),1,0)) AS unsigned) AS restartfailed,
	ROUND(((100 * SUM(IF(((_sessions_aggregated.restarts > 0) AND (_sessions_aggregated.bsr = 100)),1,0))) / SUM(IF((_sessions_aggregated.restarts > 0),1,0))),2) AS rsr 
	FROM _sessions_aggregated 
	GROUP BY 1,2,3 WITH ROLLUP
;

DROP VIEW IF EXISTS _sessions_xmastree;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _sessions_xmastree AS 
	SELECT REPLACE(REPLACE(s.specification,'_Daily',''),'_Weekly','') AS specification,
	DATE_FORMAT(s.starttime,'%m/%d') AS date,
	CONCAT(IF((LEFT(s.retention,1) = 'D'),'D',IF((LEFT(s.retention,1) = 'W'),'W','')),IF((s.bsr = 100),'S',IF((s.bsr = 0),'F','P')),IF((s.restarts = 0),'','+')) AS flag 
	FROM _sessions_aggregated s 
	ORDER BY 1,2 DESC 
;

DROP VIEW IF EXISTS _session_counts;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _session_counts AS 
	SELECT CONCAT(CAST(s.starttime AS date),' ',hour(s.starttime),':',right(CONCAT('00',(truncate((minute(s.starttime) / 15),0) * 15)),2)) AS starttime,
	s.cellserver AS cellserver,
	s.retention AS retention,
	COUNT(s.sessionid) AS sessions 
	FROM _sessions s
	WHERE ((s.starttime BETWEEN function_from() AND function_to()) 
	AND ((function_customer() IS NULL) OR (s.customer=function_customer()))) 
	GROUP BY 1,2,3 
	ORDER BY 1,2,3 
;

DROP VIEW IF EXISTS _session_devices;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _session_devices AS 
	SELECT sd.cellserver AS cellserver,
	sd.sessionid AS sessionid,
	sd.device AS device,
	dd.lockname AS lockname,
	dd.library AS library,
	sd.starttime AS starttime,
	sd.endtime AS endtime,
	sd.duration AS duration,
	sd.gbwritten AS gbwritten,
	sd.performance AS performance 
	FROM (dataprotector_session_devices sd 
	LEFT JOIN dataprotector_devices dd ON((dd.name = sd.device))) 
	ORDER BY sd.starttime DESC 
;

DROP VIEW IF EXISTS _session_media;
CREATE ALGORITHM=MERGE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _session_media AS 
	SELECT sm.cellserver AS cellserver,
	sm.sessionid AS sessionid,
	sm.mediumid AS mediumid,
	sm.label AS label,
	sm.location AS location,
	sm.pool AS pool,
	sm.protection AS protection,
	sm.used AS used,
	sm.total AS total,
	sm.lastused AS lastused 
	FROM dataprotector_session_media sm 
	ORDER BY sm.lastused DESC 
;

DROP VIEW IF EXISTS _specification_copylist;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _specification_copylist AS 
SELECT s.cellserver,s.dpgroup,
	s.name AS specification,s.customer,
	s.retention,s.protection,
	s.type,s.hosts,s.hostnames,
	c.name AS copylist,c.customer AS clcustomer,
	c.protection AS clprotection,
	c.dl_group AS clgroup,c.dlcount,c.devicecount
	FROM _specifications s
	LEFT JOIN _copylists c ON (c.cellserver=s.cellserver AND ((c.datalists REGEXP s.name) OR (c.dl_group=s.dpgroup)))
	ORDER BY s.cellserver,s.name
;

DROP VIEW IF EXISTS _specification_periodicity;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _specification_periodicity AS 
	SELECT s.cellserver AS cellserver,
	s.specification AS specification,
	COUNT(s.sessionid) AS sessions 
	FROM _sessions s 
	WHERE ((s.starttime BETWEEN function_from() AND function_to()) 
	AND ((function_customer() IS NULL) OR (s.customer=function_customer()))) 
	GROUP BY 1,2 
	ORDER BY 3 DESC 
;

DROP VIEW IF EXISTS _specification_status;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _specification_status AS 
	SELECT s.cellserver,s.name AS specification,s.customer,s.retention,s.type,
	(SELECT count(sessionid) FROM _sessions_all s1 WHERE s1.cellserver=s.cellserver AND s1.specification=s.name) AS sessions,
	(SELECT count(sessionid) FROM _sessions_all s1 WHERE s1.cellserver=s.cellserver AND s1.specification=s.name AND status='Completed') AS completed,
	(SELECT count(sessionid) FROM _sessions_all s1 WHERE s1.cellserver=s.cellserver AND s1.specification=s.name AND status='Completed/Errors') AS errors,
	(SELECT count(sessionid) FROM _sessions_all s1 WHERE s1.cellserver=s.cellserver AND s1.specification=s.name AND status='Completed/Failures') AS failures,
	(SELECT count(sessionid) FROM _sessions_all s1 WHERE s1.cellserver=s.cellserver AND s1.specification=s.name AND status='Failed') AS failed,
	(SELECT count(sessionid) FROM _sessions_all s1 WHERE s1.cellserver=s.cellserver AND s1.specification=s.name AND status='Aborted') AS aborted
	FROM _specifications s
	GROUP BY s.cellserver,s.name
	ORDER BY s.cellserver,s.name 
;

DROP VIEW IF EXISTS _specification_status_percent;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _specification_status_percent AS 
	SELECT cellserver,specification,customer,retention,type,sessions,
	ROUND(100*completed/sessions,1) AS completed,
	ROUND(100*errors/sessions,1) AS errors,
	ROUND(100*failures/sessions,1) AS failures,
	ROUND(100*aborted/sessions,1) AS aborted,
	ROUND(100*failed/sessions,1) AS failed
	FROM _specification_status 
;

DROP VIEW IF EXISTS _status;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _status AS 
SELECT mars30.function_uptime() AS uptime,
		((SELECT COUNT(0) FROM mars30._processes) - 1) AS processes,
		(SELECT COUNT(0) FROM mars30.mars_queue) AS queue,
		e.STATUS AS events,
		e.LAST_EXECUTED AS last_executed,
		(SELECT start FROM config_timers WHERE name REGEXP 'normal_routine') as last_normal_routine,
		(SELECT TIME_FORMAT(SEC_TO_TIME(duration),CONCAT(IF(duration>3600,'%Hh ',''),IF(duration>60,'%im ',''),'%ss')) FROM config_timers WHERE name REGEXP 'normal_routine') as normal_routine_duration,
		(SELECT start FROM config_timers WHERE name REGEXP 'daily_routine') as last_daily_routine,
		(SELECT TIME_FORMAT(SEC_TO_TIME(duration),CONCAT(IF(duration>3600,'%Hh ',''),IF(duration>60,'%im ',''),'%ss')) FROM config_timers WHERE name REGEXP 'daily_routine') as daily_routine_duration,
		(SELECT start FROM config_timers WHERE name REGEXP 'maintenance') as last_maintenance,
		(SELECT TIME_FORMAT(SEC_TO_TIME(duration),CONCAT(IF(duration>3600,'%Hh ',''),IF(duration>60,'%im ',''),'%ss')) FROM config_timers WHERE name REGEXP 'maintenance') as maintenance_duration
		FROM information_schema.events e 
		WHERE e.EVENT_NAME='event_routine' 
;

DROP VIEW IF EXISTS _status_cellservers;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _status_cellservers AS 
	SELECT (SELECT COUNT(0) FROM _cellservers) AS cellservers,
	(SELECT COUNT(0) FROM _omnistat) AS sessions,
	(SELECT CAST(SUM(_cellservers.sessions_24h) AS unsigned) FROM _cellservers) AS sessions_24h,
	(SELECT CAST(SUM(_cellservers.bsr_sessions_24h) AS unsigned) FROM _cellservers) AS bsr_sessions_24h,
	(SELECT ROUND(avg(_cellservers.bsr_24h),2) FROM _cellservers) AS bsr_24h,
	(SELECT CAST(SUM(_cellservers.sessions_1m) AS unsigned) FROM _cellservers) AS sessions_1m,
	(SELECT CAST(SUM(_cellservers.bsr_sessions_1m) AS unsigned) FROM _cellservers) AS bsr_sessions_1m,
	(SELECT ROUND(avg(_cellservers.bsr_1m),2) FROM _cellservers) AS bsr_1m 
;

DROP VIEW IF EXISTS _status_customers;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _status_customers AS 
	SELECT (SELECT COUNT(0) FROM _customers) AS customers,
	(SELECT CAST(SUM(IF((_clients.type IN ('FileSystem','WinFS')),1,0)) AS unsigned) FROM _clients) AS fs,
	(SELECT CAST(SUM(_customers.fsobjects) AS unsigned) FROM _customers) AS fsobjects,
	(SELECT CAST(SUM(IF((_clients.type IN ('BAR','IDB')),1,0)) AS unsigned) FROM _clients) AS integ,
	(SELECT CAST(SUM(_customers.barobjects) AS unsigned) FROM _customers) AS barobjects,
	(SELECT SUM(_customers.gbwritten_24h) FROM _customers) AS gbwritten_24h,
	(SELECT SUM(_customers.tbwritten_1m) FROM _customers) AS tbwritten_1m,
	(SELECT SUM(_customers.tbretained) FROM _customers) AS tbretained 
;
DROP VIEW IF EXISTS _clients_missing_objects;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _clients_missing_objects AS 
	SELECT 
	c.cellserver,c.customer,c.name AS client,c.type,c.specifications,c.mountpoints,
	o.name AS mountpoint,
	MAX(date(o.newest)) AS newest_mountpoint,
	date((SELECT MAX(date(t.newest)) FROM _objects t WHERE c.cellserver=t.cellserver AND c.name=t.client AND c.type=t.type)) AS newest_client,
	DATEDIFF((SELECT MAX(date(t.newest)) FROM _objects t WHERE c.cellserver=t.cellserver AND c.name=t.client AND c.type=t.type),MAX(o.newest)) AS days
	FROM _objects o
	LEFT JOIN _clients c ON (c.cellserver=o.cellserver AND c.name=o.client AND c.type=o.type)
	GROUP BY o.cellserver,o.client,o.type ,o.name
	HAVING days>1
	ORDER BY days DESC 
;

DROP VIEW IF EXISTS _backup_volume_library;
CREATE ALGORITHM=TEMPTABLE DEFINER=root@'%' SQL SECURITY DEFINER VIEW _backup_volume_library AS 
SELECT sd.library AS library,
	COUNT(DISTINCT sd.sessionid) AS sessions,
	COUNT(DISTINCT sd.device) AS devices,
	ROUND((SUM(sd.gbwritten) / 1024),1) AS tbwritten 
	FROM _session_devices sd
	WHERE (sd.starttime BETWEEN function_from() AND function_to())
	GROUP BY sd.library
	ORDER BY sd.library 
;

CREATE DATABASE IF NOT EXISTS mars_backup;
CREATE TABLE IF NOT EXISTS mars_backup.dataprotector_sessions LIKE mars30.dataprotector_sessions;

ALTER EVENT event_routine ENABLE;
